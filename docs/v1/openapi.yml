openapi: "3.0.2"
info:
  title: Sator API
  version: "0.0.1"
servers:
  - url: http://localhost:8080/
    description: Local server
  - url: https://sator-api-stage-93k39.ondigitalocean.app/
    description: Development server
components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    EmptyBody:
      description: Returns only HTTP status, without any payload.
    ResultSuccess:
      description: "Successful result"
      content:
        application/json:
          schema:
            type: object
            properties:
              result:
                type: boolean
                example: true
    AccessToken:
      description: Returns JWT token.
      content:
        application/json:
          schema:
            type: object
            properties:
              access_token:
                type: string
                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
    DefaultError:
      description: Default error view.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "something went wrong"
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access token is missing or invalid"
    ValidationError:
      description: Validation errors.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  field_name:
                    type: array
                    items:
                      type: string
                      example:
                        - "Field field_name cannot be empty"
                        - "Field field_name must be a valid email address"
                  another_field:
                    type: array
                    items:
                      type: string
                      example: "Field another_field must contain at least 8 chars"
paths:
  /:
    get:
      tags:
        - "Common"
      summary: Get current build tag
      responses:
        "200":
          description: Returns current build tag, which contains build date and commit hash.
          content:
            application/json:
              schema:
                type: object
                properties:
                  build_tag:
                    type: string
                    example: "20210514.062552-e5cad484406f996a4da8674f8fbc9ef6e1b925d5"
  /health:
    get:
      tags:
        - "Common"
      summary: Health check
      responses:
        "204":
          description: Get current API running status.

  /auth/login:
    post:
      tags:
        - "Auth"
      summary: Log in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "john.doe@mail.dev"
                password:
                  type: string
                  example: "qwerty12345"
      responses:
        "200":
          $ref: "#/components/responses/AccessToken"
        "400":
          $ref: "#/components/responses/DefaultError"
        "422":
          $ref: "#/components/responses/ValidationError"

  /auth/refresh-token:
    get:
      tags:
        - "Auth"
      summary: Refresh access token (JWT).
      security:
        - bearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/AccessToken"
        "400":
          $ref: "#/components/responses/DefaultError"
        "403":
          $ref: "#/components/responses/UnauthorizedError"

  /auth/signup:
    post:
      tags:
        - "Auth"
      summary: Sign up
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "john.doe@mail.dev"
                username:
                  type: string
                  example: "johndoe"
                password:
                  type: string
                  example: "qwerty12345"
      responses:
        "200":
          $ref: "#/components/responses/AccessToken"
        "400":
          $ref: "#/components/responses/DefaultError"
        "422":
          $ref: "#/components/responses/ValidationError"

  /auth/logout:
    post:
      tags:
        - "Auth"
      summary: Logout
      security:
        - bearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /auth/forgot-password:
    post:
      tags:
        - "Auth"
      summary: Forgot password
      description: Requests reset password code.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "john.doe@mail.dev"
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "422":
          $ref: "#/components/responses/ValidationError"

  /auth/validate-reset-password-code:
    post:
      tags:
        - "Auth"
      summary: Validate reset password code.
      description: Can be used on screed with reset password code validation.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "john.doe@mail.dev"
                otp:
                  type: string
                  example: "54367"
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "422":
          $ref: "#/components/responses/ValidationError"

  /auth/reset-password:
    post:
      tags:
        - "Auth"
      summary: Reset password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "john.doe@mail.dev"
                password:
                  type: string
                  minimum: 8
                  maximum: 50
                  example: "srgserge45g45grtg"
                otp:
                  type: string
                  example: "54367"
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "422":
          $ref: "#/components/responses/ValidationError"

  /auth/verify-account:
    post:
      tags:
        - "Auth"
      summary: Account verification.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                otp:
                  type: string
                  example: "54367"
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "422":
          $ref: "#/components/responses/ValidationError"

  /auth/is-verified:
    get:
      tags:
        - "Auth"
      summary: Account verification status.
      security:
        - bearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /auth/resend-otp:
    post:
      tags:
        - "Auth"
      summary: Resending OTP to email.
      security:
        - bearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /profile:
    get:
      tags:
        - "Profile"
      summary: Get user profile data
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Returns user profile data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  username:
                    type: string
                    example: "BigBoy13"
                  first_name:
                    type: string
                    example: "John"
                  last_name:
                    type: string
                    example: "Doe"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /wallet/balance:
    get:
      tags:
        - "Wallet"
      summary: Get total balance.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Get user total balance across all wallets.
          content:
            application/json:
              schema:
                type: object
                properties:
                  sao:
                    type: object
                    properties:
                      solana_account_address:
                        type: string
                        example: "B2KhBdBCcKWexFob3wrdcfbjaQ31kZ3r7mrQxaqNLVh9"
                      amount:
                        type: number
                        example: 302
                      currency:
                        type: string
                        example: "SAO"
                  usd:
                    type: object
                    properties:
                      amount:
                        type: number
                        example: 2541.39
                      currency:
                        type: string
                        example: "USD"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /wallet/transactions/{wallet_id}:
    get:
      tags:
        - "Wallet"
      summary: Get list of transactions of specific wallet.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: wallet_id
          in: path
          description: Wallet ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns list transcations of specific wallet.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    tx_hash:
                      type: string
                      example: "AD423JK12ASD14LKD"
                    amount:
                      type: number
                      example: 12000
                    created_at:
                      type: string
                      example: "2020-11-10"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /wallet:
    get:
      tags:
        - "Wallet"
      summary: Get wallets by user ID.
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: Get user total balances across all wallets without rewards section.
          content:
            application/json:
              schema:
                type: object
                properties:
                  sao:
                    type: object
                    properties:
                      solana_account_address:
                        type: string
                        example: "B2KhBdBCcKWexFob3wrdcfbjaQ31kZ3r7mrQxaqNLVh9"
                      amount:
                        type: number
                        example: 302
                      currency:
                        type: string
                        example: "SAO"
                  usd:
                    type: object
                    properties:
                      amount:
                        type: number
                        example: 2541.39
                      currency:
                        type: string
                        example: "USD"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /wallet/transfer:
    post:
      tags:
        - "Wallet"
      summary: Transfers amount of tokens from one wallet to another.
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sender_private_key:
                  type: string
                  example: "B2KhBdBCcKWexFob3wrdcfbjaQ31kZ3r7mrQxaqNLVh9"
                recipient_pk:
                  type: string
                  example: "B2KhBdBCcKWexFob3wrdcfbjaQ31kZ3r7mrQxaqNLVh9"
                amount:
                  type: number
                  example: 120

      responses:
        "200":
          description: Returns shows list with pagination.
          content:
            application/json:
              schema:
                type: string
                properties:
                  tx:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /shows:
    get:
      tags:
        - "Shows"
      summary: Get shows list.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: |
            Set needed page number.

            By default, it returns the first page with a set number of items.
          required: false
          schema:
            type: integer
        - name: items_per_page
          in: query
          description: |
            Set needed items per page.

            By default returns 20 items per page.
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: Returns shows list with pagination.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    title:
                      type: string
                      example: "Peaky Blinders"
                    cover:
                      type: string
                      example: "https://m.media-amazon.com/images/M/MV5BZDUwYWJkNTMtYWMzZC00NGE3LWEzYTYtYjAzZjk0M2MzMDQxXkEyXkFqcGdeQXVyNzk4MTAyOTA@._V1_FMjpg_UX1024_.jpg"
                    has_new_episode:
                      type: boolean
                      example: true
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /shows/{show_id}/challenges:
    get:
      tags:
        - "Shows"
      summary: Get challenges list by show id.
      security:
        - bearerAuth: []
      parameters:
        - name: show_id
          in: path
          description: Show ID.
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: |
            Set needed page number.

            By default, it returns the first page with a set number of items.
          required: false
          schema:
            type: integer
        - name: items_per_page
          in: query
          description: |
            Set needed items per page.

            By default returns 20 items per page.
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: Returns challenges list with pagination.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    title:
                      type: string
                      example: "Challenge name"
                    description:
                      type: string
                      example: "Fast Questions! More detailed description about this challenge here. We can use couple senteces."
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /challenges/{id}:
    get:
      tags:
        - "Challenges"
      summary: Get challenge details by id.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Сhallenge ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns challenge details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  title:
                    type: string
                    example: "Challenge name"
                  description:
                    type: string
                    example: "Fast Questions! More detailed description about this challenge here. We can use couple senteces."
                  prize_pool:
                    type: string
                    example: "250 SAO"
                  players:
                    type: integer
                    example: 10
                  winners:
                    type: string
                    example: "you + 7 more"
                  time_per_question:
                    type: string
                    example: "8 sec"
                  play:
                    type: string
                    description: "Absolute URL to start quiz. In the future it will be URL to connect websocket."
                    example: "http://localhost:8080/challenges/{challenge_id}/play"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /qrcodes/{id}:
    get:
      tags:
        - "QR code"
      summary: Get show id and episode id by qrcode id if qrcode isn't expired.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Returns qrcode data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  show_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  episode_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  reward_amount:
                    type: number
                    example: 123.56
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /quiz/{challenge_id}/play:
    get:
      tags:
        - "Quiz"
      summary: Get quiz connection URL with access token.
      security:
        - bearerAuth: []
      parameters:
        - name: challenge_id
          in: path
          description: Сhallenge ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns quiz connection URL with access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  play_url:
                    type: string
                    description: "Absolute URL to connect websocket."
                    example: "http://localhost:8080/challenges/{challenge_id}/play/{token}"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /rewards/claim:
    get:
      tags:
        - "Rewards"
      summary: Claim all collected rewards.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Returns claimed rewards amount and link to solana transaction.
          content:
            application/json:
              schema:
                type: object
                properties:
                  amount:
                    type: string
                    example: "83.55 SAO"
                  transaction_url:
                    type: string
                    example: "https://explorer.solana.com/address/CizSaMmnZymceaDTPcNdXgKEpLarCQDvtAkAZA2tSE2u?cluster=devnet"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"
