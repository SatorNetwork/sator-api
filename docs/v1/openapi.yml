openapi: "3.0.2"
info:
  title: Sator API
  version: "0.0.1"
servers:
  - url: http://localhost:8080/
    description: Local server
  - url: https://api.dev.sator.io/
    description: Development server
  - url: https://api.stage.sator.io/
    description: Staging server
components:
  schemas:
    NFT:
      type: object
      properties:
        id:
          type: string
        image_link:
          type: string
          description: NFT cover image
          example: "https://sator-dev-storage.nyc3.cdn.digitaloceanspaces.com/uploads/6e3500c8-df21-4279-a092-33c7a0d73e90.png"
        name:
          type: string
        description:
          type: string
        tags:
          type: object
          additionalProperties:
            type: string
        supply:
          type: number
          example: 1
        royalties:
          type: number
          example: 2
        blockchain:
          type: string
          example: Ethereum
        sell_type:
          type: string
          example: Auction
        buy_now_price:
          type: number
          example: 100
        token_uri:
          type: string
          example: "https://sator-dev-storage.nyc3.cdn.digitaloceanspaces.com/uploads/6e3500c8-df21-4279-a092-33c7a0d73e90.png"
          description: NFT payload, for example link to the original file
        minted:
          type: number
          example: 3
        auction_params:
          type: object
          properties:
            starting_bid:
              type: number
              example: 1
            start_timestamp:
              type: string
              example: "2006-01-02T15:04:05Z07:00"
            end_timestamp:
              type: string
              example: "2006-01-02T15:04:05Z07:00"
        relation_ids:
          type: array
          items:
            type: string

    ArweaveNFTMetadata:
      type: object
      properties:
        mint_addr:
          type: string
        name:
          type: string
        symbol:
          type: string
        description:
          type: string
        seller_fee_basis_points:
          type: number
        image:
          type: string

    Category:
      type: object
      properties:
        id:
          type: string
          example: "91692ed7-fc43-4f75-884b-9e1799180041"
        title:
          type: string
          example: "Popular"
    Categories:
      type: array
      items:
        $ref: "#/components/schemas/Category"

    TradingPlatformLink:
      type: object
      properties:
        id:
          type: string
          example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
        title:
          type: string
          example: "Coingecko"
        link:
          type: string
          example: "http://coingecko.com"
        logo:
          type: string
          example: "https://sator-dev-storage.nyc3.cdn.digitaloceanspaces.com/uploads/6e3500c8-df21-4279-a092-33c7a0d73e90.png"

    TradingPlatformLinks:
      type: array
      items:
        $ref: "#/components/schemas/TradingPlatformLink"

    InGameNFTInfo:
      type: object
      properties:
        id:
          type: string
        max_level:
          type: number
          description: "Max level of the NFT. Available values: 1 - easy, 2 - medium, 3 - hard"
          enum:
            - 1
            - 2
            - 3
        nft_type:
          type: string
          enum:
            - common
            - rare
            - super rare
            - epic
            - legend

    InGameNFTInfoArray:
      type: array
      items:
        $ref: "#/components/schemas/InGameNFTInfo"

  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    EmptyBody:
      description: Returns only HTTP status, without any payload.

    ResultSuccess:
      description: "Successful result"
      content:
        application/json:
          schema:
            type: object
            properties:
              result:
                type: boolean
                example: true

    AccessToken:
      description: Returns JWT token.
      content:
        application/json:
          schema:
            type: object
            properties:
              access_token:
                type: string
                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
              refresh_token:
                type: string
                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"

    DefaultError:
      description: Default error view.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "something went wrong"

    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access token is missing or invalid"

    ValidationError:
      description: Validation errors.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  field_name:
                    type: array
                    items:
                      type: string
                      example:
                        - "Field field_name cannot be empty"
                        - "Field field_name must be a valid email address"
                  another_field:
                    type: array
                    items:
                      type: string
                      example: "Field another_field must contain at least 8 chars"

    NFT:
      description: NFT.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NFT"

    NFTs:
      description: NFTs.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/NFT"

    ArweaveNFTMetadata:
      description: ArweaveNFTMetadata.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ArweaveNFTMetadata"

    ArweaveNFTMetadatas:
      description: ArweaveNFTMetadatas.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ArweaveNFTMetadata"

    Categories:
      description: Categories.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Categories"

    TradingPlatformLink:
      description: Trading platform link.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TradingPlatformLink"

    TradingPlatformLinks:
      description: Trading platform links.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TradingPlatformLinks"

    PuzzleGameAdmin:
      description: Puzzle game object
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
              episode_id:
                type: string
              prize_pool:
                type: number
                description: Game's prize pool amount
              parts_x:
                type: number
                description: Number of parts in x axis
              steps:
                type: number
                description: Number of steps in the puzzle game
              images:
                type: array
                description: All game images
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    file_url:
                      type: string

    PuzzleGame:
      description: Puzzle game object
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
              episode_id:
                type: string
              prize_pool:
                type: number
                description: Game's prize pool amount
              rewards:
                type: number
                description: User's rewards for this puzzle game
              bonus_rewards:
                type: number
                description: User's bonus rewards for locked tokens.
              parts_x:
                type: number
                description: Number of parts in x axis
              steps:
                type: number
                description: Number of steps in the puzzle game
              steps_taken:
                type: number
                description: Number of steps taken by the user
              status:
                type: number
                enum: [0, 1, 2]
                description: Game status. 0 - not started, 1 - in progress, 2 - finished
              result:
                type: number
                enum: [0, 1, 2]
                description: Game result. 0 - not finished, 1 - user won, 2 - user lost
              tiles:
                type: array
                items:
                  type: object
                  properties:
                    image:
                      type: object
                      properties:
                        id:
                          type: string
                        file_url:
                          type: string
                    value:
                      type: integer
                    current_position:
                      type: object
                      properties:
                        x:
                          type: integer
                        y:
                          type: integer
                    is_whitespace:
                      type: boolean
                description: Tiles of puzzle game
              image:
                type: string
                description: Current game image url

    UnlockOptions:
      description: Unlock options
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
                description: Unlock option id
              amount:
                type: number
                description: Unlock option price
              steps:
                type: number
                description: Number of steps in the puzzle game
              is_locked:
                type: boolean
                description: Is this option locked?

    PlayerStatus:
      description: Player status
      content:
        application/json:
          schema:
            type: object
            properties:
              energy_left:
                type: number
              user_currency:
                type: number
              user_in_game_currency:
                type: number
              min_amount_of_currency_to_convert:
                type: number
              min_version:
                type: string
              selected_nft_id:
                type: string
              user_owned_nft_list:
                type: array
                items:
                  $ref: "#/components/schemas/InGameNFTInfoArray"

    NFTPacks:
      description: NFT Packs.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InGameNFTInfoArray"

    UserOwnedNFTs:
      description: User owned NFTs.
      content:
        application/json:
          schema:
            type: object
            properties:
              user_owned_nft_list:
                $ref: "#/components/schemas/InGameNFTInfoArray"

    NewUserOwnedNFTs:
      description: User owned NFTs.
      content:
        application/json:
          schema:
            type: object
            properties:
              new_nft:
                $ref: "#/components/schemas/InGameNFTInfo"
              user_owned_nft_list:
                $ref: "#/components/schemas/InGameNFTInfoArray"

paths:
  /:
    get:
      tags:
        - "Common"
      summary: Get current build tag
      responses:
        "200":
          description: Returns current build tag, which contains build date and commit hash.
          content:
            application/json:
              schema:
                type: object
                properties:
                  build_tag:
                    type: string
                    example: "20210514.062552-e5cad484406f996a4da8674f8fbc9ef6e1b925d5"
  /health:
    get:
      tags:
        - "Common"
      summary: Health check
      responses:
        "204":
          description: Get current API running status.

  /auth:
    get:
      tags:
        - "Auth"
      summary: Validate access token (JWT).
      security:
        - bearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "403":
          $ref: "#/components/responses/UnauthorizedError"

  /auth/login:
    post:
      tags:
        - "Auth"
      summary: Log in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "john.doe@gmail.com"
                password:
                  type: string
                  example: "qwerty12345"
      responses:
        "200":
          $ref: "#/components/responses/AccessToken"
        "400":
          $ref: "#/components/responses/DefaultError"
        "422":
          $ref: "#/components/responses/ValidationError"

  /auth/refresh-token:
    get:
      tags:
        - "Auth"
      summary: Refresh access token (JWT).
      security:
        - bearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/AccessToken"
        "400":
          $ref: "#/components/responses/DefaultError"
        "403":
          $ref: "#/components/responses/UnauthorizedError"

  /auth/signup:
    post:
      tags:
        - "Auth"
      summary: Sign up
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "john.doe@mail.dev"
                username:
                  type: string
                  example: "johndoe"
                password:
                  type: string
                  example: "qwerty12345"
      responses:
        "200":
          $ref: "#/components/responses/AccessToken"
        "400":
          $ref: "#/components/responses/DefaultError"
        "422":
          $ref: "#/components/responses/ValidationError"

  /auth/logout:
    post:
      tags:
        - "Auth"
      summary: Logout
      security:
        - bearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /auth/forgot-password:
    post:
      tags:
        - "Auth"
      summary: Forgot password
      description: Requests reset password code.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "john.doe@mail.dev"
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "422":
          $ref: "#/components/responses/ValidationError"

  /auth/change-password:
    post:
      tags:
        - "Auth"
      summary: Change password.
      security:
        - bearerAuth: []
      description: Change password for authenticated user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                old_password:
                  type: string
                  minimum: 8
                  maximum: 50
                  example: "srgserge45g45grtg"
                new_password:
                  type: string
                  minimum: 8
                  maximum: 50
                  example: "srgserge99g45grtg"
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "422":
          $ref: "#/components/responses/ValidationError"

  /auth/validate-reset-password-code:
    post:
      tags:
        - "Auth"
      summary: Validate reset password code.
      description: Can be used on screed with reset password code validation.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "john.doe@mail.dev"
                otp:
                  type: string
                  example: "54367"
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "422":
          $ref: "#/components/responses/ValidationError"

  /auth/reset-password:
    post:
      tags:
        - "Auth"
      summary: Reset password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "john.doe@mail.dev"
                password:
                  type: string
                  minimum: 8
                  maximum: 50
                  example: "srgserge45g45grtg"
                otp:
                  type: string
                  example: "54367"
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "422":
          $ref: "#/components/responses/ValidationError"

  /auth/verify-account:
    post:
      tags:
        - "Auth"
      summary: Account verification.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                otp:
                  type: string
                  example: "54367"
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "422":
          $ref: "#/components/responses/ValidationError"

  /auth/is-verified:
    get:
      tags:
        - "Auth"
      summary: Account verification status.
      security:
        - bearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /auth/resend-otp:
    post:
      tags:
        - "Auth"
      summary: Resending OTP to email.
      security:
        - bearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /auth/request-update-email:
    post:
      tags:
        - "Auth"
      summary: request update email.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "john.doe@mail.dev"
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "422":
          $ref: "#/components/responses/ValidationError"

  /auth/update-email:
    post:
      tags:
        - "Auth"
      summary: Update email.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "john.doe@mail.dev"
                otp:
                  type: string
                  example: "54367"
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "422":
          $ref: "#/components/responses/ValidationError"

  /auth/update-username:
    post:
      tags:
        - "Auth"
      summary: Update username.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "JohnDoe1990"
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "422":
          $ref: "#/components/responses/ValidationError"

  /auth/whitelist:
    get:
      tags:
        - "Whitelist"
      summary: Get whitelist.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: |
            Set needed page number.

            By default, it returns the first page with a set number of items.
          required: false
          schema:
            type: integer
        - name: items_per_page
          in: query
          description: |
            Set needed items per page.

            By default returns 20 items per page.
          required: false
          schema:
            type: integer
        - name: allowed_value
          in: query
          description: allowed value will be filtered by this parameter.
          required: false
          schema:
            type: string

      responses:
        "200":
          description: Returns whitelist with pagination.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    allowed_type:
                      type: string
                      example: "email"
                    allowed_value:
                      type: string
                      example: "qwe@gmail.com"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

    post:
      tags:
        - "Whitelist"
      summary: Used for add allowed type and value to whitelist.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                allowed_type:
                  type: string
                  example: "email"
                allowed_value:
                  type: string
                  example: "qwe@gmail.com"
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "422":
          $ref: "#/components/responses/ValidationError"

    delete:
      tags:
        - "Whitelist"
      summary: Used for delete allowed type and value to whitelist.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                allowed_type:
                  type: string
                  example: "email"
                allowed_value:
                  type: string
                  example: "qwe@gmail.com"
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /auth/blacklist:
    get:
      tags:
        - "Blacklist"
      summary: Get blacklist.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: |
            Set needed page number.

            By default, it returns the first page with a set number of items.
          required: false
          schema:
            type: integer
        - name: items_per_page
          in: query
          description: |
            Set needed items per page.

            By default returns 20 items per page.
          required: false
          schema:
            type: integer
        - name: restricted_value
          in: query
          description: restricted value will be filtered by this parameter.
          required: false
          schema:
            type: string

      responses:
        "200":
          description: Returns blacklist with pagination.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    restricted_type:
                      type: string
                      example: "email"
                    restricted_value:
                      type: string
                      example: "qwe@gmail.com"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

    post:
      tags:
        - "Blacklist"
      summary: Used for add restricted type and value to blacklist.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                restricted_type:
                  type: string
                  example: "email"
                restricted_value:
                  type: string
                  example: "qwe@gmail.com"
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "422":
          $ref: "#/components/responses/ValidationError"

    delete:
      tags:
        - "Blacklist"
      summary: Used for delete restricted type and value to blacklist.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                restricted_type:
                  type: string
                  example: "email"
                restricted_value:
                  type: string
                  example: "qwe@gmail.com"
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /auth/kyc/access_token:
    get:
      tags:
        - "KYC"
      summary: Returns access token for web or mobile SDKs by user id.
      security:
        - bearerAuth: []

      responses:
        "200":
          description: Returns access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: "token"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /auth/user-status:
    get:
      tags:
        - "Users"
      summary: Returns user status information.
      security:
        - bearerAuth: []
      parameters:
        - name: email
          in: query
          description: User email
          required: true
          schema:
            type: string

      responses:
        "200":
          description: Returns user status information.
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    example: "user@gmail.com"
                  username:
                    type: string
                    example: "UserName123"
                  is_disabled:
                    type: boolean
                    example: true
                  block_reason:
                    type: string
                    example: "User has multiple accounts"
                  is_final:
                    type: boolean
                    example: true
                  kyc_status:
                    type: string
                    example: "Not verified"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /profile:
    get:
      tags:
        - "Profile"
      summary: Get user profile data
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Returns user profile data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  username:
                    type: string
                    example: "BigBoy13"
                  first_name:
                    type: string
                    example: "John"
                  last_name:
                    type: string
                    example: "Doe"
                  avatar:
                    type: string
                    example: "https://link@to.avatar"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /profile/avatar:
    put:
      tags:
        - "Profile"
      summary: Updates users avatar
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  example: "https://link@to.avatar"
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /balance:
    get:
      tags:
        - "Wallet"
      summary: Get total balance.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Get user total balance across all wallets.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    amount:
                      type: number
                      example: 123.45
                    currency:
                      type: string
                      example: "SAO"
                    sub_amount:
                      type: number
                      example: 50.65
                    sub_currency:
                      type: string
                      example: "Rewards"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /wallets:
    get:
      tags:
        - "Wallet"
      summary: Get wallets list.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Get user wallets list.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    type:
                      type: string
                      example: "sao"
                      enum:
                        - sol
                        - sao
                        - rewards
                        - eth
                    get_details_url:
                      type: string
                      example: "/wallets/f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    get_transactions_url:
                      type: string
                      example: "/wallets/f4f78cac-5db6-4ecc-ad13-5877705f3126/transactions"
                    order:
                      type: number
                      example: 1
                      description: "Wallet order in list"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /wallets/{wallet_id}:
    get:
      tags:
        - "Wallet"
      summary: Get wallet details.
      security:
        - bearerAuth: []
      parameters:
        - name: wallet_id
          in: path
          description: Wallet ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Get wallet details, including balance and available actions.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  type:
                    type: string
                    example: "sao"
                    enum:
                      - sol
                      - sao
                      - rewards
                      - eth
                  order:
                    type: number
                    example: 1
                    description: "Wallet order in list"
                  solana_account_address:
                    type: string
                    example: "B2KhBdBCcKWexFob3wrdcfbjaQ31kZ3r7mrQxaqNLVh9"
                  ethereum_account_address:
                    type: string
                    example: "B2KhBdBCcKWexFob3wrdcfbjaQ31kZ3r7mrQxaqNLVh9"
                  balance:
                    type: array
                    items:
                      type: object
                      properties:
                        amount:
                          type: number
                          example: 123.45
                        currency:
                          type: string
                          example: "SAO"
                  actions:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          example: "send_tokens"
                          description: "Available values: send_tokens, receive_tokens, claim_rewards"
                        name:
                          type: string
                          example: "Send"
                        url:
                          type: string
                          example: "/wallets/f4f78cac-5db6-4ecc-ad13-5877705f3126/send"
                          description: "Relative URL for the request to send tokens"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /wallets/{wallet_id}/transactions:
    get:
      tags:
        - "Wallet"
      summary: Get wallet transactions.
      security:
        - bearerAuth: []
      parameters:
        - name: wallet_id
          in: path
          description: Wallet ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Get wallet transactions list.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    wallet_id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3122"
                    tx_hash:
                      type: string
                      example: "B2KhBdBCcKWexFob3wrdcfbjaQ31kZ3r7mrQxaqNLVh9B2KhBdBCcKWexFob3wrdcfbjaQ31kZ3r7mrQxaqNLVh9"
                    amount:
                      type: number
                      example: 123.45
                    created_at:
                      type: string
                      example: "2006-01-02T15:04:05Z07:00"
                      description: "RFC3339"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /wallets/{wallet_id}/create-transfer:
    post:
      tags:
        - "Wallet"
      summary: Create transfer.
      security:
        - bearerAuth: []
      parameters:
        - name: wallet_id
          in: path
          description: Wallet ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recipient_address:
                  type: string
                  example: "B2KhBdBCcKWexFob3wrdcfbjaQ31kZ3r7mrQxaqNLVh9B2KhBdBCcKWexF"
                amount:
                  type: number
                  example: 123.45
      responses:
        "200":
          description: Prepared transaction data.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    asset_name:
                      type: string
                      example: "SAO"
                    amount:
                      type: number
                      example: 123.45
                    fee:
                      type: number
                      example: 3.15
                    recipient_address:
                      type: string
                      example: "B2KhBdBCcKWexFob3wrdcfbjaQ31kZ3r7mrQxaqNLVh9"
                    sender_wallet_id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3122"
                    tx_hash:
                      type: string
                      example: "B2KhBdBCcKWexFob3wrdcfbjaQ31kZ3r7mrQxaqNLVh9B2KhBdBCcKWexFob3wrdcfbjaQ31kZ3r7mrQxaqNLVh9"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /wallets/{wallet_id}/confirm-transfer:
    post:
      tags:
        - "Wallet"
      summary: Confirm transfer (sending of signed transaction).
      security:
        - bearerAuth: []
      parameters:
        - name: wallet_id
          in: path
          description: Wallet ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tx_hash:
                  type: string
                  example: "B2KhBdBCcKWexFob3wrdcfbjaQ31kZ3r7mrQxaqNLVh9B2KhBdBCcKWexFB2KhBdBCcKWexFob3wrdcfbjaQ31kZ3r7mrQxaqNLVh9B2KhBdBCcKWexF"
      responses:
        "200":
          description: Send signed transaction.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    result:
                      type: boolean
                      example: true
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /wallets/{wallet_id}/stake:
    post:
      tags:
        - "Wallet"
      summary: Set/update wallet's lock amount.
      security:
        - bearerAuth: []
      parameters:
        - name: wallet_id
          in: path
          description: Wallet ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  example: 1000
                duration:
                  type: number
                  example: 10
      responses:
        "200":
          description: staked successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    result:
                      type: boolean
                      example: true
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

    get:
      tags:
        - "Wallet"
      summary: Get wallet's locked amount.
      security:
        - bearerAuth: []
      parameters:
        - name: wallet_id
          in: path
          description: Wallet ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Get wallet transactions list.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    staking:
                      type: object
                      properties:
                        total_staked:
                          type: number
                          example: 12345
                        staked:
                          type: number
                          example: 100000
                    loyalty:
                      type: object
                      properties:
                        level_title:
                          type: string
                          example: "test title"
                        level_subtitle:
                          type: string
                          example: "test subtitle"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /wallets/{wallet_id}/unstake:
    post:
      tags:
        - "Wallet"
      summary: Unlock wallet's total locked.
      security:
        - bearerAuth: []
      parameters:
        - name: wallet_id
          in: path
          description: Wallet ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: staked successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    result:
                      type: boolean
                      example: true
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /wallets/{wallet_id}/possible-multiplier:
    post:
      tags:
        - "Wallet"
      summary: Returns possible multiplier after adding amount to lock.
      security:
        - bearerAuth: []
      parameters:
        - name: wallet_id
          in: path
          description: Wallet ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  example: 123.45
      responses:
        "200":
          description: amount of expected multiplier.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    data:
                      type: number
                      example: 15
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /wallets/stake-levels:
    get:
      tags:
        - "Wallet"
      summary: Returns available stake levels.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: amount of expected multiplier.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    min_amount:
                      type: number
                      example: 100
                      description: Min stake amount to reach this level
                    min_days_to_stake:
                      type: number
                      example: 30
                      description: Min stake days number to reach this level
                    title:
                      type: string
                      example: "Level title"
                    sub_title:
                      type: string
                      example: "Level subtitle"
                    is_current:
                      type: boolean
                      example: true
                      enum:
                        - true
                        - false
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /shows:
    get:
      tags:
        - "Shows"
      summary: Get shows list.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: |
            Set needed page number.

            By default, it returns the first page with a set number of items.
          required: false
          schema:
            type: integer
        - name: items_per_page
          in: query
          description: |
            Set needed items per page.

            By default returns 20 items per page.
          required: false
          schema:
            type: integer
        - name: with_nft
          in: query
          description: If with_nft=true it returns list only shows with nft.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Returns shows list with pagination.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    title:
                      type: string
                      example: "Peaky Blinders"
                    cover:
                      type: string
                      example: "https://m.media-amazon.com/images/M/MV5BZDUwYWJkNTMtYWMzZC00NGE3LWEzYTYtYjAzZjk0M2MzMDQxXkEyXkFqcGdeQXVyNzk4MTAyOTA@._V1_FMjpg_UX1024_.jpg"
                    has_new_episode:
                      type: boolean
                      example: true
                    claps:
                      type: integer
                      example: 234
                    realms_title:
                      type: string
                      example: "Realms"
                    realms_subtitle:
                      type: string
                      example: "Watch on Netflix. Then earn SAO. "
                    watch:
                      type: string
                      example: "https://youtube.com/ERGbevesrf"
                    has_nft:
                      type: boolean
        "401":
          $ref: "#/components/responses/UnauthorizedError"

    post:
      tags:
        - "Shows"
      summary: Used for create new show.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - "title"
                - "cover"
              properties:
                title:
                  type: string
                  example: "title"
                cover:
                  type: string
                  example: "cover"
                has_new_episode:
                  type: boolean
                  example: true
                description:
                  type: string
                  example: "description"
                realms_title:
                  type: string
                  example: "Realms"
                realms_subtitle:
                  type: string
                  example: "Watch on Netflix. Then earn SAO. "
                watch:
                  type: string
                  example: "https://youtube.com/ERGbevesrf"
                categories:
                  type: array
                  items:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
      responses:
        "200":
          description: Returns shows data.
          content:
            application/json:
              schema:
                type: object
                required:
                  - "title"
                  - "cover"
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  title:
                    type: string
                    example: "title"
                  cover:
                    type: string
                    example: "cover"
                  has_new_episode:
                    type: boolean
                    example: true
                  description:
                    type: string
                    example: "description"
                  realms_title:
                    type: string
                    example: "Realms"
                  realms_subtitle:
                    type: string
                    example: "Watch on Netflix. Then earn SAO. "
                  watch:
                    type: string
                    example: "https://youtube.com/ERGbevesrf"
                  categories:
                    type: array
                    items:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /shows/{show_id}/challenges:
    get:
      tags:
        - "Shows"
      summary: Get challenges list by show id.
      security:
        - bearerAuth: []
      parameters:
        - name: show_id
          in: path
          description: Show ID.
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: |
            Set needed page number.

            By default, it returns the first page with a set number of items.
          required: false
          schema:
            type: integer
        - name: items_per_page
          in: query
          description: |
            Set needed items per page.

            By default returns 20 items per page.
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: Returns challenges list with pagination.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    title:
                      type: string
                      example: "Challenge name"
                    description:
                      type: string
                      example: "Fast Questions! More detailed description about this challenge here. We can use couple senteces."
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /shows/{show_id}:
    get:
      tags:
        - "Shows"
      summary: Get show by id.
      security:
        - bearerAuth: []
      parameters:
        - name: show_id
          in: path
          description: Show ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns show details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  title:
                    type: string
                    example: "Peaky Blinders"
                  cover:
                    type: string
                    example: "https://m.media-amazon.com/images/M/MV5BZDUwYWJkNTMtYWMzZC00NGE3LWEzYTYtYjAzZjk0M2MzMDQxXkEyXkFqcGdeQXVyNzk4MTAyOTA@._V1_FMjpg_UX1024_.jpg"
                  has_new_episode:
                    type: boolean
                    example: true
                  claps:
                    type: integer
                    example: 234
                  realms_title:
                    type: string
                    example: "Realms"
                  realms_subtitle:
                    type: string
                    example: "Watch on Netflix. Then earn SAO. "
                  watch:
                    type: string
                    example: "https://youtube.com/ERGbevesrf"
                  has_nft:
                    type: boolean
                  categories:
                    type: array
                    items:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"

        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

    put:
      tags:
        - "Shows"
      summary: Used for update show by id.
      security:
        - bearerAuth: []
      parameters:
        - name: show_id
          in: path
          description: Show ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - "title"
                - "cover"
              properties:
                title:
                  type: string
                  example: "title"
                cover:
                  type: string
                  example: "cover"
                has_new_episode:
                  type: boolean
                  example: true
                categories:
                  type: array
                  items:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                description:
                  type: string
                  example: "description"
                realms_title:
                  type: string
                  example: "Realms"
                realms_subtitle:
                  type: string
                  example: "Watch on Netflix. Then earn SAO. "
                watch:
                  type: string
                  example: "https://youtube.com/ERGbevesrf"
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /shows/{show_id}/claps:
    post:
      tags:
        - "Shows"
        - "Claps"
      summary: Claps for show.
      security:
        - bearerAuth: []
      parameters:
        - name: show_id
          in: path
          description: Show ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /shows/categories:
    get:
      tags:
        - "Category"
      summary: Get categories list.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: |
            Set needed page number.

            By default, it returns the first page with a set number of items.
          required: false
          schema:
            type: integer
        - name: items_per_page
          in: query
          description: |
            Set needed items per page.

            By default returns 20 items per page.
          required: false
          schema:
            type: integer
        - name: with_disabled
          in: query
          description: Set true or 1 to get all categories with disabled ones. Skip to get only enabled categories.
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: Returns categories list with pagination.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    title:
                      type: string
                      example: "title"
                    disabled:
                      type: string
                      example: "false"
                    sort:
                      type: number
                      example: 123
        "401":
          $ref: "#/components/responses/UnauthorizedError"

    post:
      tags:
        - "Category"
      summary: Used for create new category.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - "title"
                - "disabled"
                - "sort"
              properties:
                title:
                  type: string
                  example: "title"
                disabled:
                  type: string
                  example: "false"
                sort:
                  type: number
                  example: 123
      responses:
        "200":
          description: Returns category data.
          content:
            application/json:
              schema:
                type: object
                required:
                  - "title"
                  - "disabled"
                  - "sort"
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  title:
                    type: string
                    example: "title"
                  disabled:
                    type: string
                    example: "false"
                  sort:
                    type: number
                    example: 123
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /shows/categories/{category_id}:
    get:
      tags:
        - "Category"
      summary: Get category by id.
      security:
        - bearerAuth: []
      parameters:
        - name: category_id
          in: path
          description: Category ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns show details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  title:
                    type: string
                    example: "title"
                  disabled:
                    type: string
                    example: "false"
                  sort:
                    type: number
                    example: 123
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

    put:
      tags:
        - "Category"
      summary: Used for update category by id.
      security:
        - bearerAuth: []
      parameters:
        - name: category_id
          in: path
          description: Category ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - "title"
                - "disabled"
                - "sort"
              properties:
                title:
                  type: string
                  example: "title"
                disabled:
                  type: string
                  example: "false"
                sort:
                  type: number
                  example: 123
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

    delete:
      tags:
        - "Category"
      summary: Used for delete category by id.
      security:
        - bearerAuth: []
      parameters:
        - name: category_id
          in: path
          description: Category ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /shows/filter/{category}:
    get:
      tags:
        - "Shows"
      summary: Get shows list by category.
      security:
        - bearerAuth: []
      parameters:
        - name: category
          in: path
          description: Category id.
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: |
            Set needed page number.

            By default, it returns the first page with a set number of items.
          required: false
          schema:
            type: integer
        - name: items_per_page
          in: query
          description: |
            Set needed items per page.

            By default returns 20 items per page.
          required: false
          schema:
            type: integer

      responses:
        "200":
          description: Returns shows list with pagination.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    title:
                      type: string
                      example: "Peaky Blinders"
                    cover:
                      type: string
                      example: "https://m.media-amazon.com/images/M/MV5BZDUwYWJkNTMtYWMzZC00NGE3LWEzYTYtYjAzZjk0M2MzMDQxXkEyXkFqcGdeQXVyNzk4MTAyOTA@._V1_FMjpg_UX1024_.jpg"
                    has_new_episode:
                      type: boolean
                      example: true
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /shows/{show_id}/episodes:
    get:
      tags:
        - "Shows"
        - "Episodes"
      summary: Get episodes by show id.
      security:
        - bearerAuth: []
      parameters:
        - name: show_id
          in: path
          description: Show ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns list episodes by show id.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    show_id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    episode_number:
                      type: number
                      example: 13
                    cover:
                      type: string
                      example: "https://m.media-amazon.com/images/M/MV5BZDUwYWJkNTMtYWMzZC00NGE3LWEzYTYtYjAzZjk0M2MzMDQxXkEyXkFqcGdeQXVyNzk4MTAyOTA@._V1_FMjpg_UX1024_.jpg"
                    title:
                      type: string
                      example: "Peaky Blinders"
                    description:
                      type: string
                      example: "description"
                    release_date:
                      type: string
                      example: "2006-01-02T15:04:05Z07:00"
                    rating:
                      type: number
                      example: 8.76
                      description: "Average episode rating. To get percents: rating * 10 = 87.6% people like it."
                    ratings_count:
                      type: number
                      example: 123
                      description: "How many times episode was rated"
                    active_users:
                      type: number
                      example: 12
                      description: "How  many users have access to episode"
                    user_rewards_amount:
                      type: number
                      example: 12
                      description: "episode received reward amount by user"
                    total_rewards_amount:
                      type: number
                      example: 12
                      description: "episode received reward amount by all users"
                    hint_text:
                      type: string
                      example: "hint text"
                    watch:
                      type: string
                      example: "www.watch.com/this_episode"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

    post:
      tags:
        - "Shows"
        - "Episodes"
      summary: Used for create new episode.
      security:
        - bearerAuth: []
      parameters:
        - name: show_id
          in: path
          description: Show ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - "title"
              properties:
                episode_number:
                  type: number
                  example: 13
                cover:
                  type: string
                  example: "https://m.media-amazon.com/images/M/MV5BZDUwYWJkNTMtYWMzZC00NGE3LWEzYTYtYjAzZjk0M2MzMDQxXkEyXkFqcGdeQXVyNzk4MTAyOTA@._V1_FMjpg_UX1024_.jpg"
                title:
                  type: string
                  example: "Peaky Blinders"
                description:
                  type: string
                  example: "description"
                release_date:
                  type: string
                  example: "2006-01-02T15:04:05Z"
                challenge_id:
                  type: string
                  example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                season_id:
                  type: string
                  example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                hint_text:
                  type: string
                  example: "hint text"
                watch:
                  type: string
                  example: "www.watch.com/this_episode"
      responses:
        "200":
          description: Returns episode data.
          content:
            application/json:
              schema:
                type: object
                required:
                  - "title"
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  show_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  season_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  season_number:
                    type: number
                    example: 13
                  episode_number:
                    type: number
                    example: 12
                  cover:
                    type: string
                    example: "https://m.media-amazon.com/images/M/MV5BZDUwYWJkNTMtYWMzZC00NGE3LWEzYTYtYjAzZjk0M2MzMDQxXkEyXkFqcGdeQXVyNzk4MTAyOTA@._V1_FMjpg_UX1024_.jpg"
                  title:
                    type: string
                    example: "Peaky Blinders"
                  description:
                    type: string
                    example: "description"
                  release_date:
                    type: string
                    example: "2006-01-02T15:04:05Z"
                  challenge_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"

        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /shows/episodes:
    get:
      tags:
        - "Shows"
        - "Episodes"
      summary: Get activated episodes for current user.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: |
            Set needed page number.

            By default, it returns the first page with a set number of items.
          required: false
          schema:
            type: integer
        - name: items_per_page
          in: query
          description: |
            Set needed items per page.

            By default returns 20 items per page.
          required: false
          schema:
            type: integer

      responses:
        "200":
          description: Returns list activated episodes for current user.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    show_id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    season_id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    episode_number:
                      type: number
                      example: 13
                    cover:
                      type: string
                      example: "https://m.media-amazon.com/images/M/MV5BZDUwYWJkNTMtYWMzZC00NGE3LWEzYTYtYjAzZjk0M2MzMDQxXkEyXkFqcGdeQXVyNzk4MTAyOTA@._V1_FMjpg_UX1024_.jpg"
                    title:
                      type: string
                      example: "Pilot episode"
                    show_title:
                      type: string
                      example: "Peaky Blinders"
                    description:
                      type: string
                      example: "description"
                    release_date:
                      type: string
                      example: "2006-01-02T15:04:05Z07:00"
                    challenge_id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    verification_challenge_id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /shows/reviews:
    get:
      tags:
        - "Shows"
        - "Reviews"
      summary: Get all reviews of current user.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: |
            Set needed page number.

            By default, it returns the first page with a set number of items.
          required: false
          schema:
            type: integer
        - name: items_per_page
          in: query
          description: |
            Set needed items per page.

            By default returns 20 items per page.
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: Returns reviews list.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    user_id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    username:
                      type: string
                      example: "johnDoe"
                    user_avatar:
                      type: string
                      example: "https://some.url/avatar.png"
                    rating:
                      type: integer
                      example: 7
                      description: it can be from 1 to 10
                    title:
                      type: string
                      example: "Review title"
                    review:
                      type: string
                      example: "Review text"
                    likes:
                      type: integer
                      example: 123
                      description: Number of review likes
                    dislikes:
                      type: integer
                      example: 75
                      description: Number of review dislikes
                    is_liked:
                      type: boolean
                      example: true
                      description: Is current user likes this review
                    is_disliked:
                      type: boolean
                      example: false
                      description: Is current user dislikes this review
                    created_at:
                      type: string
                      example: "2006-01-02T15:04:05Z07:00"
                      description: "RFC3339"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /shows/{show_id}/episodes/{episode_id}:
    get:
      tags:
        - "Shows"
        - "Episodes"
      summary: Get episode by id.
      security:
        - bearerAuth: []
      parameters:
        - name: show_id
          in: path
          description: Show ID.
          required: true
          schema:
            type: string
        - name: episode_id
          in: path
          description: Episode ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns episode by id.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  show_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  season_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  episode_number:
                    type: number
                    example: 13
                  cover:
                    type: string
                    example: "https://m.media-amazon.com/images/M/MV5BZDUwYWJkNTMtYWMzZC00NGE3LWEzYTYtYjAzZjk0M2MzMDQxXkEyXkFqcGdeQXVyNzk4MTAyOTA@._V1_FMjpg_UX1024_.jpg"
                  title:
                    type: string
                    example: "Peaky Blinders"
                  description:
                    type: string
                    example: "description"
                  release_date:
                    type: string
                    example: "2006-01-02T15:04:05Z07:00"
                  challenge_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  verification_challenge_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  rating:
                    type: number
                    example: 8.76
                    description: "Average episode rating. To get percents: rating * 10 = 87.6% people like it."
                  ratings_count:
                    type: number
                    example: 123
                    description: "How many times episode was rated"
                  users_episode_rating:
                    type: number
                    example: 7
                    description: "Rating set by the user"
                  active_users:
                    type: number
                    example: 12
                    description: "How  many users have access to episode"
                  user_rewards_amount:
                    type: number
                    example: 12
                    description: "episode received reward amount by user"
                  total_rewards_amount:
                    type: number
                    example: 12
                    description: "episode received reward amount by all users"
                  hint_text:
                    type: string
                    example: "hint text"
                  watch:
                    type: string
                    example: "www.watch.com/this_episode"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"
    put:
      tags:
        - "Shows"
        - "Episodes"
      summary: Used for update episode.
      security:
        - bearerAuth: []
      parameters:
        - name: show_id
          in: path
          description: Show ID.
          required: true
          schema:
            type: string
        - name: episode_id
          in: path
          description: Episode ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                season_id:
                  type: string
                  example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                episode_number:
                  type: number
                  example: 13
                cover:
                  type: string
                  example: "https://m.media-amazon.com/images/M/MV5BZDUwYWJkNTMtYWMzZC00NGE3LWEzYTYtYjAzZjk0M2MzMDQxXkEyXkFqcGdeQXVyNzk4MTAyOTA@._V1_FMjpg_UX1024_.jpg"
                title:
                  type: string
                  example: "Peaky Blinders"
                description:
                  type: string
                  example: "description"
                release_date:
                  type: string
                  example: "2006-01-02T15:04:05Z"
                challenge_id:
                  type: string
                  example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                hint_text:
                  type: string
                  example: "hint text"
                watch:
                  type: string
                  example: "www.watch.com/this_episode"
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

    delete:
      tags:
        - "Shows"
        - "Episodes"
      summary: Used for delete episode by id.
      security:
        - bearerAuth: []
      parameters:
        - name: show_id
          in: path
          description: Show ID.
          required: true
          schema:
            type: string
        - name: episode_id
          in: path
          description: Episode ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /shows/{show_id}/episodes/{episode_id}/rate:
    post:
      tags:
        - "Shows"
        - "Episodes"
      summary: Used to rate episode.
      security:
        - bearerAuth: []
      parameters:
        - name: show_id
          in: path
          description: Show ID.
          required: true
          schema:
            type: string
        - name: episode_id
          in: path
          description: Episode ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: number
                  example: 5
                  description: Episode rating from 1 to 10.
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /shows/{show_id}/episodes/{episode_id}/reviews:
    post:
      tags:
        - "Shows"
        - "Episodes"
        - "Reviews"
      summary: Used to store episode review.
      security:
        - bearerAuth: []
      parameters:
        - name: show_id
          in: path
          description: Show ID.
          required: true
          schema:
            type: string
        - name: episode_id
          in: path
          description: Episode ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: number
                  example: 5
                  description: Episode rating from 1 to 10.
                title:
                  type: string
                  example: My review title
                  description: Short title of review.
                review:
                  type: string
                  example: My full review text.
                  description: Full review text.
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

    get:
      tags:
        - "Shows"
        - "Episodes"
        - "Reviews"
      summary: Get the episode reviews list.
      security:
        - bearerAuth: []
      parameters:
        - name: show_id
          in: path
          description: Show ID.
          required: true
          schema:
            type: string
        - name: episode_id
          in: path
          description: Episode ID.
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: |
            Set needed page number.
            By default, it returns the first page with a set number of items.
          required: false
          schema:
            type: integer
        - name: items_per_page
          in: query
          description: |
            Set needed items per page.
            By default returns 20 items per page.
          schema:
            type: integer
        - name: by_user_id
          in: query
          description: |
            Set by_user_id=1 for get current user reviews list.
            If this query = 0 or empty it returns all reviews by episode id.
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: Returns reviews list.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    user_id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    username:
                      type: string
                      example: "johnDoe"
                    user_avatar:
                      type: string
                      example: "https://some.url/avatar.png"
                    rating:
                      type: integer
                      example: 7
                      description: it can be from 1 to 10
                    title:
                      type: string
                      example: "Review title"
                    review:
                      type: string
                      example: "Review text"
                    likes:
                      type: integer
                      example: 123
                      description: Number of review likes
                    dislikes:
                      type: integer
                      example: 75
                      description: Number of review dislikes
                    is_liked:
                      type: boolean
                      example: true
                      description: Is current user likes this review
                    is_disliked:
                      type: boolean
                      example: false
                      description: Is current user dislikes this review
                    created_at:
                      type: string
                      example: "2006-01-02T15:04:05Z07:00"
                      description: "RFC3339"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /shows/reviews/{review_id}/{rating_type}:
    post:
      tags:
        - "Shows"
        - "Episodes"
      summary: Used to store users review episode assessment (like/dislike).
      security:
        - bearerAuth: []
      parameters:
        - name: review_id
          in: path
          description: Review ID.
          required: true
          schema:
            type: string
        - name: rating_type
          in: path
          description: like, dislike.
          required: true
          schema:
            type: string
          example: like

      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /shows/reviews/{review_id}:
    delete:
      tags:
        - "Shows"
        - "Episodes"
        - "Reviews"
      summary: Used to delete episode review by id.
      security:
        - bearerAuth: []
      parameters:
        - name: review_id
          in: path
          description: Episode ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /shows/reviews/{review_id}/tips:
    post:
      tags:
        - "Shows"
        - "Episodes"
        - "Reviews"
      summary: Used to send tips to episode review author.
      security:
        - bearerAuth: []
      parameters:
        - name: review_id
          in: path
          description: Review ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  example: 5.223
                  description: Tips amount in SAO.
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /shows/{show_id}/seasons:
    post:
      tags:
        - "Shows"
        - "Seasons"
      summary: Used for create new season.
      security:
        - bearerAuth: []
      parameters:
        - name: show_id
          in: path
          description: Show ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                season_number:
                  type: number
                  example: 13
      responses:
        "200":
          description: Returns episode data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  show_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  season_number:
                    type: number
                    example: 13
                  title:
                    type: string
                    example: "Season 2"

        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /shows/{show_id}/seasons/{season_id}:
    delete:
      tags:
        - "Shows"
        - "Seasons"
      summary: Used for delete season by id.
      security:
        - bearerAuth: []
      parameters:
        - name: show_id
          in: path
          description: Show ID.
          required: true
          schema:
            type: string
        - name: season_id
          in: path
          description: Seasons ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /challenges/{challenge_id}:
    get:
      tags:
        - "Challenges"
      summary: Get challenge details by id.
      security:
        - bearerAuth: []
      parameters:
        - name: challenge_id
          in: path
          description: Сhallenge ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns challenge details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  show_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3123"
                  episode_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3124"
                  title:
                    type: string
                    example: "Challenge name"
                  description:
                    type: string
                    example: "Fast Questions! More detailed description about this challenge here. We can use couple senteces."
                  prize_pool:
                    type: string
                    example: "250 SAO"
                  players:
                    type: integer
                    example: 10
                  winners:
                    type: string
                    example: "you + 7 more"
                  time_per_question:
                    type: string
                    example: "8 sec"
                  play:
                    type: string
                    description: "Absolute URL to start quiz. In the future it will be URL to connect websocket."
                    example: "http://localhost:8080/challenges/{challenge_id}/play"
                  user_max_attempts:
                    type: integer
                    example: 3
                    default: 2
                  attempts_left:
                    type: integer
                    example: 1
                    default: 0
                  received_reward:
                    type: number
                    example: 123.456
                  is_realm_activated:
                    type: boolean
                    example: true
                  max_winners:
                    type: integer
                    example: 1
                  questions_per_game:
                    type: integer
                    example: 1
                  min_correct_answers:
                    type: integer
                    example: 1
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

    put:
      tags:
        - "Challenges"
      summary: Update challenge by id.
      security:
        - bearerAuth: []
      parameters:
        - name: challenge_id
          in: path
          description: Сhallenge ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                show_id:
                  type: string
                  example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                title:
                  type: string
                  example: "title"
                description:
                  type: string
                  example: "description"
                prize_pool_amount:
                  type: number
                  example: 123.456
                players_to_start:
                  type: integer
                  example: 3
                time_per_question_sec:
                  type: integer
                  example: 10
                episode_id:
                  type: string
                  example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                kind:
                  type: integer
                  example: 10
                user_max_attempts:
                  type: integer
                  example: 3
                  default: 2
                max_winners:
                  type: integer
                  example: 1
                questions_per_game:
                  type: integer
                  example: 1
                min_correct_answers:
                  type: integer
                  example: 1
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "422":
          $ref: "#/components/responses/ValidationError"
    delete:
      tags:
        - "Challenges"
      summary: Delete challenge by id.
      security:
        - bearerAuth: []
      parameters:
        - name: challenge_id
          in: path
          description: Сhallenge ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "422":
          $ref: "#/components/responses/ValidationError"

  /challenges:
    post:
      tags:
        - "Challenges"
      summary: Add new challenge.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                show_id:
                  type: string
                  example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                title:
                  type: string
                  example: "title"
                description:
                  type: string
                  example: "description"
                prize_pool_amount:
                  type: number
                  example: 123.456
                players_to_start:
                  type: integer
                  example: 3
                time_per_question_sec:
                  type: integer
                  example: 10
                episode_id:
                  type: string
                  example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                kind:
                  type: integer
                  example: 10
                user_max_attempts:
                  type: integer
                  example: 3
                  default: 2
                max_winners:
                  type: integer
                  example: 1
                questions_per_game:
                  type: integer
                  example: 1
                min_correct_answers:
                  type: integer
                  example: 1
      responses:
        "200":
          description: Returns challenge details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  show_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  title:
                    type: string
                    example: "title"
                  description:
                    type: string
                    example: "description"
                  prize_pool_amount:
                    type: number
                    example: 123.456
                  players_to_start:
                    type: integer
                    example: 3
                  time_per_question_sec:
                    type: integer
                    example: 10
                  episode_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  kind:
                    type: integer
                    example: 10
                  user_max_attempts:
                    type: integer
                    example: 3
                    default: 2
                  attempts_left:
                    type: integer
                    example: 1
                    default: 0
                  received_reward:
                    type: number
                    example: 123.456
                  max_winners:
                    type: integer
                    example: 1
                  questions_per_game:
                    type: integer
                    example: 1
                  min_correct_answers:
                    type: integer
                    example: 1
        "400":
          $ref: "#/components/responses/DefaultError"
        "422":
          $ref: "#/components/responses/ValidationError"

  /challenges/{episode_id}/validation-question:
    get:
      tags:
        - "Challenges"
      summary: Get validation question by episode id.
      security:
        - bearerAuth: []
      parameters:
        - name: episode_id
          in: path
          description: Episode ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns validation question with answer options.
          content:
            application/json:
              schema:
                type: object
                properties:
                  question_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  question_text:
                    type: string
                    example: "Question text"
                  time_for_answer:
                    type: number
                    example: 8
                  answer_options:
                    type: array
                    items:
                      type: object
                      properties:
                        answer_id:
                          type: string
                          example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                        answer_text:
                          type: string
                          example: "Answer text"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /challenges/{episode_id}/attempts-left:
    get:
      tags:
        - "Challenges"
      summary: Get number of attempts left to pass verification question for current user by episode id.
      security:
        - bearerAuth: []
      parameters:
        - name: episode_id
          in: path
          description: Episode ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns number of attempts left to pass verification question.
          content:
            application/json:
              schema:
                type: object
                properties:
                  attempts_left:
                    type: number
                    example: 3
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /challenges/{question_id}/check-answer/{answer_id}:
    get:
      tags:
        - "Challenges"
      summary: Check validation question`s answer.
      security:
        - bearerAuth: []
      parameters:
        - name: question_id
          in: path
          description: Question ID.
          required: true
          schema:
            type: string
        - name: answer_id
          in: path
          description: Answer ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns boolean result.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
                    example: true
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /challenges/{episode_id}/is-activated:
    get:
      tags:
        - "Challenges"
      summary: Check episode access.
      security:
        - bearerAuth: []
      parameters:
        - name: episode_id
          in: path
          description: Episode ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns true if a user have activated realm.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
                    example: true
                  activated_at:
                    type: string
                    example: "2006-01-02T15:04:05Z"
                    description: "RFC3339 timestamp when realm was activated"
                  activated_before:
                    type: string
                    example: "2006-01-02T15:04:05Z"
                    description: "RFC3339 timestamp when realm access ends"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /qrcodes/{id}:
    get:
      tags:
        - "QR code"
      summary: Get show id and episode id by qrcode id if qrcode isn't expired.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: QRcode ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns qrcode data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  show_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  episode_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  reward_amount:
                    type: number
                    example: 123.56
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"
    put:
      tags:
        - "QR code"
      summary: used for update qrcode by id.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: QRcode ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                show_id:
                  type: string
                  example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                episode_id:
                  type: string
                  example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                starts_at:
                  type: string
                  example: "2006-01-02T15:04:05Z"
                  description: "RFC3339"
                expires_at:
                  type: string
                  example: "2006-01-02T15:04:05Z"
                  description: "RFC3339"
                reward_amount:
                  type: number
                  example: 123.56
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

    delete:
      tags:
        - "QR code"
      summary: used for delete qrcode by id.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: QRcode ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /qrcodes:
    post:
      tags:
        - "QR code"
      summary: used for create new qrcode.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                show_id:
                  type: string
                  example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                episode_id:
                  type: string
                  example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                starts_at:
                  type: string
                  example: "2006-01-02T15:04:05Z"
                  description: "RFC3339"
                expires_at:
                  type: string
                  example: "2006-01-02T15:04:05Z"
                  description: "RFC3339"
                reward_amount:
                  type: number
                  example: 123.56
      responses:
        "200":
          description: Returns qrcode data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  show_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  episode_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  starts_at:
                    type: string
                    example: "2006-01-02T15:04:05Z07:00"
                    description: "RFC3339"
                  expires_at:
                    type: string
                    example: "2006-01-02T15:04:05Z07:00"
                    description: "RFC3339"
                  reward_amount:
                    type: number
                    example: 123.56
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /quiz/{challenge_id}/play:
    get:
      tags:
        - "Quiz"
      summary: Get quiz connection URL with access token.
      security:
        - bearerAuth: []
      parameters:
        - name: challenge_id
          in: path
          description: Сhallenge ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns quiz connection URL with access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  play_url:
                    type: string
                    description: "Absolute URL to connect websocket."
                    example: "http://localhost:8080/challenges/{challenge_id}/play/{token}"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /quiz_v2/{challenge_id}/play:
    get:
      tags:
        - "QuizV2"
      summary: Get quiz connection URL with access token.
      security:
        - bearerAuth: []
      parameters:
        - name: challenge_id
          in: path
          description: Сhallenge ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns quiz connection URL.
          content:
            application/json:
              schema:
                type: object
                properties:
                  base_quiz_url:
                    type: string
                    example: "nats://127.0.0.1:4222"
                  recv_message_subj:
                    type: string
                    example: "a4642d43-a391-412c-9279-671192da408d/recv"
                  send_message_subj:
                    type: string
                    example: "a4642d43-a391-412c-9279-671192da408d/send"
                  user_id:
                    type: string
                    example: "a4642d43-a391-412c-9279-671192da408d"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /quiz_v2/challenges/{challenge_id}:
    get:
      tags:
        - "QuizV2"
      summary: Get challenge details by id.
      security:
        - bearerAuth: []
      parameters:
        - name: challenge_id
          in: path
          description: Сhallenge ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns challenge details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  show_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3123"
                  episode_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3124"
                  title:
                    type: string
                    example: "Challenge name"
                  description:
                    type: string
                    example: "Fast Questions! More detailed description about this challenge here. We can use couple senteces."
                  prize_pool:
                    type: string
                    example: "250 SAO"
                  players:
                    type: integer
                    example: 10
                  winners:
                    type: string
                    example: "you + 7 more"
                  time_per_question:
                    type: string
                    example: "8 sec"
                  play:
                    type: string
                    description: "Absolute URL to start quiz. In the future it will be URL to connect websocket."
                    example: "http://localhost:8080/challenges/{challenge_id}/play"
                  user_max_attempts:
                    type: integer
                    example: 3
                    default: 2
                  attempts_left:
                    type: integer
                    example: 1
                    default: 0
                  received_reward:
                    type: number
                    example: 123.456
                  is_realm_activated:
                    type: boolean
                    example: true
                  max_winners:
                    type: integer
                    example: 1
                  questions_per_game:
                    type: integer
                    example: 1
                  min_correct_answers:
                    type: integer
                    example: 1
                  registered_players:
                    type: integer
                    example: 1
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /quiz_v2/challenges/sorted_by_players:
    get:
      tags:
        - "QuizV2"
      summary: Get get quizzes list.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: |
            Set needed page number.
            By default, it returns the first page with a set number of items.
          required: false
          schema:
            type: integer
        - name: items_per_page
          in: query
          description: |
            Set needed items per page.
            By default returns 20 items per page.
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: Get get quizzes list sorted by players number.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    title:
                      type: string
                      example: "Challenge name"
                    players_to_start:
                      type: number
                      example: 10
                    players_number:
                      type: number
                      example: 2
                      description: number of players who wait on a quiz lobby
                    prize_pool:
                      type: string
                      example: "250 SAO"
                    is_realm_activated:
                      type: boolean
                      example: true
                    cover:
                      type: string
                      example: "https://nyc3.digitaloceanspaces.com/sator-staging-storage/uploads/507621a0-ab34-4502-9273-778f965562ce.jpeg"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /rewards/claim:
    get:
      tags:
        - "Rewards"
      summary: Claim all collected rewards.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Returns claimed rewards amount and link to solana transaction.
          content:
            application/json:
              schema:
                type: object
                properties:
                  amount:
                    type: string
                    example: "83.55 SAO"
                  transaction_url:
                    type: string
                    example: "https://explorer.solana.com/address/CizSaMmnZymceaDTPcNdXgKEpLarCQDvtAkAZA2tSE2u?cluster=devnet"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /rewards/wallet/{wallet_id}:
    get:
      tags:
        - "Rewards"
      summary: returns wallet data by wallet ID.
      security:
        - bearerAuth: []
      parameters:
        - name: wallet_id
          in: path
          description: Wallet ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Get wallet details, including balance and available actions.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  solana_account_address:
                    type: string
                    example: "B2KhBdBCcKWexFob3wrdcfbjaQ31kZ3r7mrQxaqNLVh9"
                  balance:
                    type: array
                    items:
                      type: object
                      properties:
                        amount:
                          type: number
                          example: 123.45
                        currency:
                          type: string
                          example: "SAO"
                  actions:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          example: "send_tokens"
                          description: "Available values: send_tokens, receive_tokens, claim_rewards"
                        name:
                          type: string
                          example: "Send"
                        url:
                          type: string
                          example: "/wallets/f4f78cac-5db6-4ecc-ad13-5877705f3126/send"
                          description: "Relative URL for the request to send tokens"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /rewards/wallet/{wallet_id}/transactions:
    get:
      tags:
        - "Rewards"
      summary: Returns all transactions of specific rewards wallet.
      security:
        - bearerAuth: []
      parameters:
        - name: wallet_id
          in: path
          description: Wallet ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Get wallet transactions list.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    wallet_id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3122"
                    tx_hash:
                      type: string
                      example: "B2KhBdBCcKWexFob3wrdcfbjaQ31kZ3r7mrQxaqNLVh9B2KhBdBCcKWexFob3wrdcfbjaQ31kZ3r7mrQxaqNLVh9"
                    amount:
                      type: number
                      example: 123.45
                    created_at:
                      type: string
                      example: "2006-01-02T15:04:05Z07:00"
                      description: "RFC3339"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  # TODO(evg): add parameters section for NFT service API
  /nft:
    post:
      tags:
        - "NFT"
      summary: Create NFT
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NFT"
      responses:
        "200":
          description: Create NFT.
          content:
            application/json:
              schema:
                type: string
                example: "7d9939ab-e987-43de-9766-6d1b30490a59"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

    get:
      tags:
        - "NFT"
      summary: Get all NFTs by relation id if it's provided.
      security:
        - bearerAuth: []
      parameters:
        - name: relation_id
          in: query
          description: NFTs relation id.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: |
            Set needed page number.
            By default, it returns the first page with a set number of items.
          required: false
          schema:
            type: integer
        - name: items_per_page
          in: query
          description: |
            Set needed items per page.
            By default returns 20 items per page.
          required: false
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/NFTs"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /nft/by_wallet_address/{wallet_address}:
    get:
      tags:
        - "NFT"
      summary: Get all NFTs by wallet address.
      security:
        - bearerAuth: []
      parameters:
        - name: wallet_address
          in: path
          description: Solana wallet address.
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ArweaveNFTMetadatas"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /nft/filter/category/{category_id}:
    get:
      tags:
        - "NFT"
      summary: Get NFTs by category.
      security:
        - bearerAuth: []
      parameters:
        - name: category_id
          in: path
          description: Category ID.
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: |
            Set needed page number.
            By default, it returns the first page with a set number of items.
          required: false
          schema:
            type: integer
        - name: items_per_page
          in: query
          description: |
            Set needed items per page.
            By default returns 20 items per page.
          required: false
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/NFTs"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /nft/filter/show/{show_id}:
    get:
      tags:
        - "NFT"
      summary: Get NFTs by show ID.
      security:
        - bearerAuth: []
      parameters:
        - name: show_id
          in: path
          description: Show ID.
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: |
            Set needed page number.
            By default, it returns the first page with a set number of items.
          required: false
          schema:
            type: integer
        - name: items_per_page
          in: query
          description: |
            Set needed items per page.
            By default returns 20 items per page.
          required: false
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/NFTs"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /nft/filter/episode/{episode_id}:
    get:
      tags:
        - "NFT"
      summary: Get NFTs by show ID.
      security:
        - bearerAuth: []
      parameters:
        - name: episode_id
          in: path
          description: Episode ID.
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: |
            Set needed page number.
            By default, it returns the first page with a set number of items.
          required: false
          schema:
            type: integer
        - name: items_per_page
          in: query
          description: |
            Set needed items per page.
            By default returns 20 items per page.
          required: false
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/NFTs"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /nft/filter/user_id/{user_id}:
    get:
      tags:
        - "NFT"
      summary: Get NFTs by user ID.
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          description: User ID.
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: |
            Set needed page number.
            By default, it returns the first page with a set number of items.
          required: false
          schema:
            type: integer
        - name: items_per_page
          in: query
          description: |
            Set needed items per page.
            By default returns 20 items per page.
          required: false
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/NFTs"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /nft/{nft_id}:
    get:
      tags:
        - "NFT"
      summary: Get NFT by ID
      security:
        - bearerAuth: []
      parameters:
        - name: nft_id
          in: path
          description: NFT ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/NFT"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

    delete:
      tags:
        - "NFT"
      summary: Used for delete not minted NFT by id.
      security:
        - bearerAuth: []
      parameters:
        - name: nft_id
          in: path
          description: NFT ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

    put:
      tags:
        - "NFT"
      summary: Used for update not minted NFT by id.
      security:
        - bearerAuth: []
      parameters:
        - name: nft_id
          in: path
          description: NFT ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                image_link:
                  type: string
                  example: "www.link.to@nft.com"
                name:
                  type: string
                  example: "name"
                description:
                  type: string
                  example: "description"
                supply:
                  type: integer
                  example: 2
                buy_now_price:
                  type: number
                  example: 2
                token_uri:
                  type: string
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /nft/{nft_id}/buy:
    post:
      tags:
        - "NFT"
      summary: Buy NFT
      security:
        - bearerAuth: []
      parameters:
        - name: nft_id
          in: path
          description: NFT ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Buy NFT.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/EmptyBody"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /nft/categories:
    get:
      tags:
        - "NFT"
      summary: Get categories.
      security:
        - bearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/Categories"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /invitations:
    post:
      tags:
        - "Invitations"
      summary: Sends invitation if person doesn't exist in invitation table.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "qwerty@gmail.com"
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /questions/{question_id}:
    get:
      tags:
        - "Challenges"
        - "Questions"
      summary: Used for get question by id.
      security:
        - bearerAuth: []
      parameters:
        - name: question_id
          in: path
          description: Question ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns question details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  challenge_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  question:
                    type: string
                    example: "question"
                  order:
                    type: number
                    example: true
                  question_options:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                        question_id:
                          type: string
                          example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                        option:
                          type: string
                          example: "option"
                        is_correct:
                          type: boolean
                          example: true
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

    put:
      tags:
        - "Challenges"
        - "Questions"
      summary: Used for update question by id.
      security:
        - bearerAuth: []
      parameters:
        - name: question_id
          in: path
          description: Question ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                challenge_id:
                  type: string
                  example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                question:
                  type: string
                  example: "question"
                order:
                  type: integer
                  example: 2
                answer_options:
                  type: array
                  items:
                    type: object
                    properties:
                      option:
                        type: string
                        description: Answer option
                      is_correct:
                        type: boolean
                        example: true
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

    delete:
      tags:
        - "Challenges"
        - "Questions"
      summary: Used for delete question by id.
      security:
        - bearerAuth: []
      parameters:
        - name: question_id
          in: path
          description: Question ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /challenges/{challenge_id}/questions:
    get:
      tags:
        - "Challenges"
        - "Questions"
      summary: Used for get questions by challenge id.
      security:
        - bearerAuth: []
      parameters:
        - name: challenge_id
          in: path
          description: Challenge ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns array of questions details.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    challenge_id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    question:
                      type: string
                      example: "question"
                    order:
                      type: number
                      example: true
                    question_options:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: string
                            example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                          question_id:
                            type: string
                            example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                          option:
                            type: string
                            example: "option"
                          is_correct:
                            type: boolean
                            example: true
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"
    post:
      tags:
        - "Challenges"
        - "Questions"
      summary: Used for create new question.
      security:
        - bearerAuth: []
      parameters:
        - name: challenge_id
          in: path
          description: Challenge ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                challenge_id:
                  type: string
                  example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                question:
                  type: string
                  example: "question"
                order:
                  type: integer
                  example: 1
                answer_options:
                  type: array
                  items:
                    type: object
                    properties:
                      option:
                        type: string
                        description: Answer option
                      is_correct:
                        type: boolean
                        example: true
      responses:
        "200":
          description: Returns question details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  challenge_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  question:
                    type: string
                    example: "question"
                  order:
                    type: number
                    example: true
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /questions/{question_id}/answers:
    post:
      tags:
        - "Challenges"
        - "Questions"
        - "Answers"
      summary: Used for create new answer.
      security:
        - bearerAuth: []
      parameters:
        - name: question_id
          in: path
          description: Question ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                option:
                  type: string
                  example: "option"
                is_correct:
                  type: boolean
                  example: true
      responses:
        "200":
          description: Returns answer details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  question_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  option:
                    type: string
                    example: "option"
                  is_correct:
                    type: boolean
                    example: true
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /questions/{question_id}/answers/{answer_id}:
    put:
      tags:
        - "Challenges"
        - "Questions"
        - "Answers"
      summary: Used for update answer by id.
      security:
        - bearerAuth: []
      parameters:
        - name: question_id
          in: path
          description: Question ID.
          required: true
          schema:
            type: string
        - name: answer_id
          in: path
          description: Answer ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                option:
                  type: string
                  example: "option"
                is_correct:
                  type: boolean
                  example: true
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

    delete:
      tags:
        - "Challenges"
        - "Questions"
        - "Answers"
      summary: Used for delete answer by id.
      security:
        - bearerAuth: []
      parameters:
        - name: question_id
          in: path
          description: Question ID.
          required: true
          schema:
            type: string
        - name: answer_id
          in: path
          description: Answer ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /files/images/{id}:
    get:
      tags:
        - "File Storage / Images"
      summary: Get image by id.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Image ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns image data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  file_name:
                    type: string
                    example: "filename"
                  file_path:
                    type: string
                    example: "filepath"
                  file_url:
                    type: string
                    example: "file_url"
                  created_at:
                    type: string
                    example: "2006-01-02T15:04:05Z07:00"
                    description: "RFC3339"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

    delete:
      tags:
        - "File Storage / Images"
      summary: used for delete from storages image by id.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Image ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /files/images:
    post:
      tags:
        - "File Storage / Images"
      summary: used to store new image.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - height
                - width
                - image
              properties:
                height:
                  type: number
                  example: 35 (from 32 to 512)
                width:
                  type: number
                  example: 35 (from 32 to 512)
                image:
                  type: string
                  format: binary

      responses:
        "200":
          description: Returns qrcode data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  file_name:
                    type: string
                    example: "filename"
                  file_path:
                    type: string
                    example: "filepath"
                  file_url:
                    type: string
                    example: "file_url"
                  created_at:
                    type: string
                    example: "2006-01-02T15:04:05Z07:00"
                    description: "RFC3339"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

    get:
      tags:
        - "File Storage / Images"
      summary: Get images list.
      security:
        - bearerAuth: []

      responses:
        "200":
          description: Returns image data.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    file_name:
                      type: string
                      example: "filename"
                    file_path:
                      type: string
                      example: "filepath"
                    file_url:
                      type: string
                      example: "file_url"
                    created_at:
                      type: string
                      example: "2006-01-02T15:04:05Z07:00"
                      description: "RFC3339"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"
  /files:
    post:
      tags:
        - "File Storage / Images"
      summary: used to store new file.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary

      responses:
        "200":
          description: Returns qrcode data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  file_name:
                    type: string
                    example: "filename"
                  file_path:
                    type: string
                    example: "filepath"
                  file_url:
                    type: string
                    example: "file_url"
                  created_at:
                    type: string
                    example: "2006-01-02T15:04:05Z07:00"
                    description: "RFC3339"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /ref/codes/my:
    get:
      tags:
        - "Referral codes"
      summary: Get users referral code.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Returns referral code data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  title:
                    type: string
                    example: "title"
                  code:
                    type: string
                    example: "code"
                  referral_link:
                    type: string
                    example: https://link.to.download.app/RefCode
                  is_personal:
                    type: boolean
                    example: true
                  user_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  created_at:
                    type: string
                    example: "2006-01-02T15:04:05Z07:00"
                    description: "RFC3339"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /ref/codes/{id}:
    put:
      tags:
        - "Referral codes"
      summary: used to update referral code.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Referral code ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "title"
                code:
                  type: string
                  example: "code"
                is_personal:
                  type: boolean
                  example: true
      responses:
        "200":
          description: Returns qrcode data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  title:
                    type: string
                    example: "title"
                  code:
                    type: string
                    example: "code"
                  referral_link:
                    type: string
                    example: https://link.to.download.app/RefCode
                  is_personal:
                    type: boolean
                    example: true
                  user_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  created_at:
                    type: string
                    example: "2006-01-02T15:04:05Z07:00"
                    description: "RFC3339"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

    delete:
      tags:
        - "Referral codes"
      summary: used for delete referral code by id.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Referral code ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /ref/codes:
    post:
      tags:
        - "Referral codes"
      summary: used to store new referral code.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - code
                - is_personal
              properties:
                title:
                  type: string
                  example: "title"
                code:
                  type: string
                  example: "code"
                is_personal:
                  type: boolean
                  example: true
      responses:
        "200":
          description: Returns qrcode data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  title:
                    type: string
                    example: "title"
                  code:
                    type: string
                    example: "code"
                  referral_link:
                    type: string
                    example: https://link.to.download.app/RefCode
                  is_personal:
                    type: boolean
                    example: true
                  user_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  created_at:
                    type: string
                    example: "2006-01-02T15:04:05Z07:00"
                    description: "RFC3339"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

    get:
      tags:
        - "Referral codes"
      summary: Get referral codes list.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: |
            Set needed page number.
            By default, it returns the first page with a set number of items.
          required: false
          schema:
            type: integer
        - name: items_per_page
          in: query
          description: |
            Set needed items per page.
            By default returns 20 items per page.
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: Returns referral codes data.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    data:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                        title:
                          type: string
                          example: "title"
                        code:
                          type: string
                          example: "code"
                        referral_link:
                          type: string
                          example: https://link.to.download.app/RefCode
                        is_personal:
                          type: boolean
                          example: true
                        user_id:
                          type: string
                          example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                        created_at:
                          type: string
                          example: "2006-01-02T15:04:05Z07:00"
                          description: "RFC3339"
                    meta:
                      type: object
                      properties:
                        total_items:
                          type: number
                          example: 12
                        items_per_page:
                          type: number
                          example: 12
                        page:
                          type: number
                          example: 12
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /ref/codes/{id}/referrals:
    get:
      tags:
        - "Referral codes"
      summary: Get list of users who signed up via this referral code.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Referral code ID.
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: |
            Set needed page number.

            By default, it returns the first page with a set number of items.
          required: false
          schema:
            type: integer
        - name: items_per_page
          in: query
          description: |
            Set needed items per page.

            By default returns 20 items per page.
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: Returns paginated list of users who signed up via this referral code.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    referral_code_id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    user_id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    created_at:
                      type: string
                      example: "2006-01-02T15:04:05Z07:00"
                      description: "RFC3339"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /ref/confirm/{code}:
    post:
      tags:
        - "Referral codes"
      summary: used to store current user to the referrals table.
      security:
        - bearerAuth: []
      parameters:
        - name: code
          in: path
          description: Referral code.
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /trading_platforms:
    get:
      tags:
        - "Trading platform links"
      summary: Get trading platform links array with pagination.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: |
            Set needed page number.

            By default, it returns the first page with a set number of items.
          required: false
          schema:
            type: integer
        - name: items_per_page
          in: query
          description: |
            Set needed items per page.

            By default returns 20 items per page.
          required: false
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/TradingPlatformLinks"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

    post:
      tags:
        - "Trading platform links"
      summary: Create new item.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Coingecko"
                link:
                  type: string
                  example: "http://coingecko.com"
                logo:
                  type: string
                  example: "https://sator-dev-storage.nyc3.cdn.digitaloceanspaces.com/uploads/6e3500c8-df21-4279-a092-33c7a0d73e90.png"
                  description: "Item logo"
      responses:
        "200":
          $ref: "#/components/responses/TradingPlatformLink"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /trading_platforms/{id}:
    put:
      tags:
        - "Trading platform links"
      summary: Update item by id.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Item ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Coingecko"
                link:
                  type: string
                  example: "http://coingecko.com"
                logo:
                  type: string
                  example: "https://sator-dev-storage.nyc3.cdn.digitaloceanspaces.com/uploads/6e3500c8-df21-4279-a092-33c7a0d73e90.png"
                  description: "Item logo"
      responses:
        "200":
          $ref: "#/components/responses/TradingPlatformLink"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

    delete:
      tags:
        - "Trading platform links"
      summary: Delete item by id.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Item ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /puzzle-game/admin:
    post:
      tags:
        - "Puzzle game (admin part)"
      summary: Create new puzzle game.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                episode_id:
                  type: string
                  description: Episode ID.
                prize_pool:
                  type: number
                  description: Prize pool.
                parts_x:
                  type: number
                  description: Number of parts in X axis.
      responses:
        "200":
          $ref: "#/components/responses/PuzzleGameAdmin"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /puzzle-game/admin/{puzzle_game_id}:
    get:
      tags:
        - "Puzzle game (admin part)"
      summary: Get puzzle game by id.
      security:
        - bearerAuth: []
      parameters:
        - name: puzzle_game_id
          in: path
          description: Puzzle game ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/PuzzleGameAdmin"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"
    put:
      tags:
        - "Puzzle game (admin part)"
      summary: Update puzzle game.
      security:
        - bearerAuth: []
      parameters:
        - name: puzzle_game_id
          in: path
          description: Puzzle game ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                prize_pool:
                  type: number
                  description: Prize pool.
                parts_x:
                  type: number
                  description: Number of parts in X axis.
      responses:
        "200":
          $ref: "#/components/responses/PuzzleGameAdmin"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /puzzle-game/admin/episode/{episode_id}:
    get:
      tags:
        - "Puzzle game (admin part)"
      summary: Get puzzle game by episode id.
      security:
        - bearerAuth: []
      parameters:
        - name: episode_id
          in: path
          description: Episode ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/PuzzleGameAdmin"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /puzzle-game/admin/{puzzle_game_id}/images/{image_id}:
    post:
      tags:
        - "Puzzle game (admin part)"
      summary: Add puzzle game image.
      security:
        - bearerAuth: []
      parameters:
        - name: puzzle_game_id
          in: path
          description: Puzzle game ID.
          required: true
          schema:
            type: string
        - name: image_id
          in: path
          description: Image ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/PuzzleGame"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

    delete:
      tags:
        - "Puzzle game (admin part)"
      summary: Delete puzzle game image.
      security:
        - bearerAuth: []
      parameters:
        - name: puzzle_game_id
          in: path
          description: Puzzle game ID.
          required: true
          schema:
            type: string
        - name: image_id
          in: path
          description: Image ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/PuzzleGame"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /puzzle-game/unlock-options:
    get:
      tags:
        - "Puzzle game (client part)"
      summary: Get available unlock options.
      security:
        - bearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/UnlockOptions"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /puzzle-game/episode/{episode_id}:
    get:
      tags:
        - "Puzzle game (client part)"
      summary: Get puzzle game by episode id.
      security:
        - bearerAuth: []
      parameters:
        - name: episode_id
          in: path
          description: Episode ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/PuzzleGame"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /puzzle-game/{puzzle_game_id}/unlock:
    post:
      tags:
        - "Puzzle game (client part)"
      summary: Unlock puzzle game.
      security:
        - bearerAuth: []
      parameters:
        - name: puzzle_game_id
          in: path
          description: Puzzle game ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                unlock_option:
                  type: string
                  description: Unlock option.
      responses:
        "200":
          $ref: "#/components/responses/PuzzleGame"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /puzzle-game/{puzzle_game_id}/start:
    post:
      tags:
        - "Puzzle game (client part)"
      summary: Start puzzle game.
      security:
        - bearerAuth: []
      parameters:
        - name: puzzle_game_id
          in: path
          description: Puzzle game ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/PuzzleGame"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /puzzle-game/{puzzle_game_id}/finish:
    post:
      tags:
        - "Puzzle game (client part)"
      summary: Finish puzzle game.
      security:
        - bearerAuth: []
      parameters:
        - name: puzzle_game_id
          in: path
          description: Puzzle game ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                result:
                  type: number
                  description: "Result game. Available values: 1 - win, 2 - lose."
                steps_taken:
                  type: number
                  description: "Number of steps taken."
      responses:
        "200":
          $ref: "#/components/responses/PuzzleGame"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /puzzle-game/{puzzle_game_id}/tap-tile:
    post:
      tags:
        - "Puzzle game (client part)"
      summary: Tapping on tile in puzzle game
      security:
        - bearerAuth: []
      parameters:
        - name: puzzle_game_id
          in: path
          description: Puzzle game ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                x:
                  type: integer
                  description: "x position"
                y:
                  type: integer
                  description: "y position"
      responses:
        "200":
          $ref: "#/components/responses/PuzzleGame"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /firebase/register_token:
    post:
      tags:
        - "Firebase"
      summary: Register new firebase token.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                device_id:
                  type: string
                token:
                  type: string
      responses:
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /gapi/get-status:
    get:
      tags:
        - "Unity Game API"
      summary: Get player status.
      security:
        - bearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/PlayerStatus"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /gapi/get-nft-packs:
    get:
      tags:
        - "Unity Game API"
      summary: Get NFT packs.
      security:
        - bearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/NFTPacks"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /gapi/buy-nft-pack:
    post:
      tags:
        - "Unity Game API"
      summary: Buy NFT Pack.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pack_id:
                  type: string
      responses:
        "200":
          $ref: "#/components/responses/NewUserOwnedNFTs"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /gapi/craft-nft:
    post:
      tags:
        - "Unity Game API"
      summary: Craft NFT.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nfts_to_craft:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          $ref: "#/components/responses/NewUserOwnedNFTs"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /gapi/select-nft:
    post:
      tags:
        - "Unity Game API"
      summary: Select NFT.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nft_id:
                  type: string
      responses:
        "200":
          $ref: "#/components/responses/UserOwnedNFTs"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /gapi/start-game:
    post:
      tags:
        - "Unity Game API"
      summary: Start game.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                selected_complexity:
                  type: number
                  description: "Complexity of the game. Available values: 1 - easy, 2 - medium, 3 - hard."
                  enum:
                    - 1
                    - 2
                    - 3
                is_training:
                  type: boolean
      responses:
        "200":
          description: Start game config.
          content:
            application/json:
              schema:
                type: object
                properties:
                  game_config_json:
                    type: string
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /gapi/finish-game:
    post:
      tags:
        - "Unity Game API"
      summary: Finish game.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                blocks_done:
                  type: number
      responses:
        "200":
          description: Finish game result.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_in_game_currency:
                    type: number
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /gapi/claim-rewards:
    post:
      tags:
        - "Unity Game API"
      summary: Claim rewards. Convert in-game currency to SAO.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"
