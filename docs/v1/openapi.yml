openapi: "3.0.2"
info:
  title: Sator API
  version: "0.0.1"
servers:
  - url: http://localhost:8080/
    description: Local server
  - url: https://api.dev.sator.io/
    description: Development server
  - url: https://api.stage.sator.io/
    description: Staging server
components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    EmptyBody:
      description: Returns only HTTP status, without any payload.
    ResultSuccess:
      description: "Successful result"
      content:
        application/json:
          schema:
            type: object
            properties:
              result:
                type: boolean
                example: true
    AccessToken:
      description: Returns JWT token.
      content:
        application/json:
          schema:
            type: object
            properties:
              access_token:
                type: string
                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
    DefaultError:
      description: Default error view.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "something went wrong"
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Access token is missing or invalid"
    ValidationError:
      description: Validation errors.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  field_name:
                    type: array
                    items:
                      type: string
                      example:
                        - "Field field_name cannot be empty"
                        - "Field field_name must be a valid email address"
                  another_field:
                    type: array
                    items:
                      type: string
                      example: "Field another_field must contain at least 8 chars"
paths:
  /:
    get:
      tags:
        - "Common"
      summary: Get current build tag
      responses:
        "200":
          description: Returns current build tag, which contains build date and commit hash.
          content:
            application/json:
              schema:
                type: object
                properties:
                  build_tag:
                    type: string
                    example: "20210514.062552-e5cad484406f996a4da8674f8fbc9ef6e1b925d5"
  /health:
    get:
      tags:
        - "Common"
      summary: Health check
      responses:
        "204":
          description: Get current API running status.

  /auth/login:
    post:
      tags:
        - "Auth"
      summary: Log in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "john.doe@mail.dev"
                password:
                  type: string
                  example: "qwerty12345"
      responses:
        "200":
          $ref: "#/components/responses/AccessToken"
        "400":
          $ref: "#/components/responses/DefaultError"
        "422":
          $ref: "#/components/responses/ValidationError"

  /auth/refresh-token:
    get:
      tags:
        - "Auth"
      summary: Refresh access token (JWT).
      security:
        - bearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/AccessToken"
        "400":
          $ref: "#/components/responses/DefaultError"
        "403":
          $ref: "#/components/responses/UnauthorizedError"

  /auth/signup:
    post:
      tags:
        - "Auth"
      summary: Sign up
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "john.doe@mail.dev"
                username:
                  type: string
                  example: "johndoe"
                password:
                  type: string
                  example: "qwerty12345"
      responses:
        "200":
          $ref: "#/components/responses/AccessToken"
        "400":
          $ref: "#/components/responses/DefaultError"
        "422":
          $ref: "#/components/responses/ValidationError"

  /auth/logout:
    post:
      tags:
        - "Auth"
      summary: Logout
      security:
        - bearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /auth/forgot-password:
    post:
      tags:
        - "Auth"
      summary: Forgot password
      description: Requests reset password code.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "john.doe@mail.dev"
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "422":
          $ref: "#/components/responses/ValidationError"

  /auth/validate-reset-password-code:
    post:
      tags:
        - "Auth"
      summary: Validate reset password code.
      description: Can be used on screed with reset password code validation.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "john.doe@mail.dev"
                otp:
                  type: string
                  example: "54367"
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "422":
          $ref: "#/components/responses/ValidationError"

  /auth/reset-password:
    post:
      tags:
        - "Auth"
      summary: Reset password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "john.doe@mail.dev"
                password:
                  type: string
                  minimum: 8
                  maximum: 50
                  example: "srgserge45g45grtg"
                otp:
                  type: string
                  example: "54367"
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "422":
          $ref: "#/components/responses/ValidationError"

  /auth/verify-account:
    post:
      tags:
        - "Auth"
      summary: Account verification.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                otp:
                  type: string
                  example: "54367"
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "422":
          $ref: "#/components/responses/ValidationError"

  /auth/is-verified:
    get:
      tags:
        - "Auth"
      summary: Account verification status.
      security:
        - bearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /auth/resend-otp:
    post:
      tags:
        - "Auth"
      summary: Resending OTP to email.
      security:
        - bearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /profile:
    get:
      tags:
        - "Profile"
      summary: Get user profile data
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Returns user profile data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  username:
                    type: string
                    example: "BigBoy13"
                  first_name:
                    type: string
                    example: "John"
                  last_name:
                    type: string
                    example: "Doe"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /balance:
    get:
      tags:
        - "Wallet"
      summary: Get total balance.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Get user total balance across all wallets.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    amount:
                      type: number
                      example: 123.45
                    currency:
                      type: string
                      example: "SAO"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /wallets:
    get:
      tags:
        - "Wallet"
      summary: Get wallets list.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Get user wallets list.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    get_details_url:
                      type: string
                      example: "/wallets/f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    get_transactions_url:
                      type: string
                      example: "/wallets/f4f78cac-5db6-4ecc-ad13-5877705f3126/transactions"
                    order:
                      type: number
                      example: 1
                      description: "Wallet order in list"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /wallets/{wallet_id}:
    get:
      tags:
        - "Wallet"
      summary: Get wallet details.
      security:
        - bearerAuth: []
      parameters:
        - name: wallet_id
          in: path
          description: Wallet ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Get wallet details, including balance and available actions.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  order:
                    type: number
                    example: 1
                    description: "Wallet order in list"
                  solana_account_address:
                    type: string
                    example: "B2KhBdBCcKWexFob3wrdcfbjaQ31kZ3r7mrQxaqNLVh9"
                  ethereum_account_address:
                    type: string
                    example: "B2KhBdBCcKWexFob3wrdcfbjaQ31kZ3r7mrQxaqNLVh9"
                  balance:
                    type: array
                    items:
                      type: object
                      properties:
                        amount:
                          type: number
                          example: 123.45
                        currency:
                          type: string
                          example: "SAO"
                  actions:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          example: "send_tokens"
                          description: "Available values: send_tokens, receive_tokens, claim_rewards"
                        name:
                          type: string
                          example: "Send"
                        url:
                          type: string
                          example: "/wallets/f4f78cac-5db6-4ecc-ad13-5877705f3126/send"
                          description: "Relative URL for the request to send tokens"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /wallets/{wallet_id}/transactions:
    get:
      tags:
        - "Wallet"
      summary: Get wallet transactions.
      security:
        - bearerAuth: []
      parameters:
        - name: wallet_id
          in: path
          description: Wallet ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Get wallet transactions list.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    wallet_id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3122"
                    tx_hash:
                      type: string
                      example: "B2KhBdBCcKWexFob3wrdcfbjaQ31kZ3r7mrQxaqNLVh9B2KhBdBCcKWexFob3wrdcfbjaQ31kZ3r7mrQxaqNLVh9"
                    amount:
                      type: number
                      example: 123.45
                    created_at:
                      type: string
                      example: "2006-01-02T15:04:05Z07:00"
                      description: "RFC3339"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"


  /wallets/{wallet_id}/create-transfer:
    post:
      tags:
        - "Wallet"
      summary: Create transfer.
      security:
        - bearerAuth: []
      parameters:
        - name: wallet_id
          in: path
          description: Wallet ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recipient_address:
                  type: string
                  example: "B2KhBdBCcKWexFob3wrdcfbjaQ31kZ3r7mrQxaqNLVh9B2KhBdBCcKWexF"
                amount:
                  type: number
                  example: 123.45
      responses:
        "200":
          description: Prepared transaction data.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    asset_name:
                      type: string
                      example: "SAO"
                    amount:
                      type: number
                      example: 123.45
                    fee:
                      type: number
                      example: 3.15
                    recipient_address:
                      type: string
                      example: "B2KhBdBCcKWexFob3wrdcfbjaQ31kZ3r7mrQxaqNLVh9"
                    sender_wallet_id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3122"
                    tx_hash:
                      type: string
                      example: "B2KhBdBCcKWexFob3wrdcfbjaQ31kZ3r7mrQxaqNLVh9B2KhBdBCcKWexFob3wrdcfbjaQ31kZ3r7mrQxaqNLVh9"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"


  /wallets/{wallet_id}/confirm-transfer:
    post:
      tags:
        - "Wallet"
      summary: Confirm transfer (sending of signed transaction).
      security:
        - bearerAuth: []
      parameters:
        - name: wallet_id
          in: path
          description: Wallet ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tx_hash:
                  type: string
                  example: "B2KhBdBCcKWexFob3wrdcfbjaQ31kZ3r7mrQxaqNLVh9B2KhBdBCcKWexFB2KhBdBCcKWexFob3wrdcfbjaQ31kZ3r7mrQxaqNLVh9B2KhBdBCcKWexF"
      responses:
        "200":
          description: Send signed transaction.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    result:
                      type: boolean
                      example: true
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /wallets/{wallet_id}/stake:
    post:
      tags:
        - "Wallet"
      summary: set stake.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: wallet_id
          in: path
          description: Wallet ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  example: 1000
      responses:
        "200":
          description: staked successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    result:
                      type: boolean
                      example: true
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

    get:
      tags:
        - "Wallet"
      summary: Get wallet transactions.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: wallet_id
          in: path
          description: Wallet ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Get wallet transactions list.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    staking:
                      type: object
                      properties:
                        asset_name:
                          type: string
                          example: "SAO"
                        apy:
                          type: number
                          example: 123
                        total_staked:
                          type: number
                          example: 12345
                        staked:
                          type: number
                          example: 100000
                        your_share:
                          type: number
                          example: 1000
                    loyalty:
                      type: object
                      properties:
                        level_title:
                          type: string
                          example: "test title"
                        level_subtitle:
                          type: string
                          example: "test subtitle"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"


  /wallets/{wallet_id}/unstake:
    post:
      tags:
        - "Wallet"
      summary: set stake.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: wallet_id
          in: path
          description: Wallet ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  example: 1000
      responses:
        "200":
          description: staked successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    result:
                      type: boolean
                      example: true
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /shows:
    get:
      tags:
        - "Shows"
      summary: Get shows list.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: |
            Set needed page number.

            By default, it returns the first page with a set number of items.
          required: false
          schema:
            type: integer
        - name: items_per_page
          in: query
          description: |
            Set needed items per page.

            By default returns 20 items per page.
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: Returns shows list with pagination.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    title:
                      type: string
                      example: "Peaky Blinders"
                    cover:
                      type: string
                      example: "https://m.media-amazon.com/images/M/MV5BZDUwYWJkNTMtYWMzZC00NGE3LWEzYTYtYjAzZjk0M2MzMDQxXkEyXkFqcGdeQXVyNzk4MTAyOTA@._V1_FMjpg_UX1024_.jpg"
                    has_new_episode:
                      type: boolean
                      example: true
        "401":
          $ref: "#/components/responses/UnauthorizedError"

    post:
      tags:
        - "Shows"
      summary: Used for create new show.
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "title"
                  required: true
                cover:
                  type: string
                  example: "cover"
                  required: true
                has_new_episode:
                  type: boolean
                  example: true
                category:
                  type: string
                  example: "category"
                description:
                  type: string
                  example: "description"
      responses:
        "200":
          description: Returns shows data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  title:
                    type: string
                    example: "title"
                    required: true
                  cover:
                    type: string
                    example: "cover"
                    required: true
                  has_new_episode:
                    type: boolean
                    example: true
                  category:
                    type: string
                    example: "category"
                  description:
                    type: string
                    example: "description"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /shows/{show_id}/challenges:
    get:
      tags:
        - "Shows"
      summary: Get challenges list by show id.
      security:
        - bearerAuth: []
      parameters:
        - name: show_id
          in: path
          description: Show ID.
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: |
            Set needed page number.

            By default, it returns the first page with a set number of items.
          required: false
          schema:
            type: integer
        - name: items_per_page
          in: query
          description: |
            Set needed items per page.

            By default returns 20 items per page.
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: Returns challenges list with pagination.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    title:
                      type: string
                      example: "Challenge name"
                    description:
                      type: string
                      example: "Fast Questions! More detailed description about this challenge here. We can use couple senteces."
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /shows/{show_id}:
    get:
      tags:
        - "Shows"
      summary: Get show by id.
      security:
        - bearerAuth: []
      parameters:
        - name: show_id
          in: path
          description: Show ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns show details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  title:
                    type: string
                    example: "Peaky Blinders"
                  cover:
                    type: string
                    example: "https://m.media-amazon.com/images/M/MV5BZDUwYWJkNTMtYWMzZC00NGE3LWEzYTYtYjAzZjk0M2MzMDQxXkEyXkFqcGdeQXVyNzk4MTAyOTA@._V1_FMjpg_UX1024_.jpg"
                  has_new_episode:
                    type: boolean
                    example: true
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /shows/filter/{category}:
    get:
      tags:
        - "Shows"
      summary: Get shows list by category.
      security:
        - bearerAuth: []
      parameters:
        - name: category
          in: path
          description: Category.
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: |
            Set needed page number.

            By default, it returns the first page with a set number of items.
          required: false
          schema:
            type: integer
        - name: items_per_page
          in: query
          description: |
            Set needed items per page.

            By default returns 20 items per page.
          required: false
          schema:
            type: integer

      responses:
        "200":
          description: Returns shows list with pagination.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    title:
                      type: string
                      example: "Peaky Blinders"
                    cover:
                      type: string
                      example: "https://m.media-amazon.com/images/M/MV5BZDUwYWJkNTMtYWMzZC00NGE3LWEzYTYtYjAzZjk0M2MzMDQxXkEyXkFqcGdeQXVyNzk4MTAyOTA@._V1_FMjpg_UX1024_.jpg"
                    has_new_episode:
                      type: boolean
                      example: true
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /shows/{show_id}/episodes:
    get:
      tags:
        - "Shows"
        - "Episodes"
      summary: Get episodes by show id.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: show_id
          in: path
          description: Show ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns list episodes by show id.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    show_id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    episode_number:
                      type: number
                      example: 13
                    cover:
                      type: string
                      example: "https://m.media-amazon.com/images/M/MV5BZDUwYWJkNTMtYWMzZC00NGE3LWEzYTYtYjAzZjk0M2MzMDQxXkEyXkFqcGdeQXVyNzk4MTAyOTA@._V1_FMjpg_UX1024_.jpg"
                    title:
                      type: string
                      example: "Peaky Blinders"
                    description:
                      type: string
                      example: "description"
                    release_date:
                      type: string
                      example: "2006-01-02T15:04:05Z07:00"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

    post:
      tags:
        - "Shows"
        - "Episodes"
      summary: Used for create new episode.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: show_id
          in: path
          description: Show ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                episode_number:
                  type: number
                  example: 13
                cover:
                  type: string
                  example: "https://m.media-amazon.com/images/M/MV5BZDUwYWJkNTMtYWMzZC00NGE3LWEzYTYtYjAzZjk0M2MzMDQxXkEyXkFqcGdeQXVyNzk4MTAyOTA@._V1_FMjpg_UX1024_.jpg"
                title:
                  type: string
                  example: "Peaky Blinders"
                  required: true
                description:
                  type: string
                  example: "description"
                release_date:
                  type: string
                  example: "2006-01-02T15:04:05Z"
                challenge_id:
                  type: string
                  example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                verification_challenge_id:
                  type: string
                  example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                season_id:
                  type: string
                  example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
      responses:
        "200":
          description: Returns episode data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  show_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  season_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  season_number:
                    type: number
                    example: 13
                  episode_number:
                    type: number
                    example: 12
                  cover:
                    type: string
                    example: "https://m.media-amazon.com/images/M/MV5BZDUwYWJkNTMtYWMzZC00NGE3LWEzYTYtYjAzZjk0M2MzMDQxXkEyXkFqcGdeQXVyNzk4MTAyOTA@._V1_FMjpg_UX1024_.jpg"
                  title:
                    type: string
                    example: "Peaky Blinders"
                    required: true
                  description:
                    type: string
                    example: "description"
                  release_date:
                    type: string
                    example: "2006-01-02T15:04:05Z"
                  challenge_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"

        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /shows/{show_id}/episodes/{episode_id}:
    get:
      tags:
        - "Shows"
        - "Episodes"
      summary: Get episode by id.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: show_id
          in: path
          description: Show ID.
          required: true
          schema:
            type: string
        - name: episode_id
          in: path
          description: Episode ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns episode by id.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  show_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  season_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  episode_number:
                    type: number
                    example: 13
                  cover:
                    type: string
                    example: "https://m.media-amazon.com/images/M/MV5BZDUwYWJkNTMtYWMzZC00NGE3LWEzYTYtYjAzZjk0M2MzMDQxXkEyXkFqcGdeQXVyNzk4MTAyOTA@._V1_FMjpg_UX1024_.jpg"
                  title:
                    type: string
                    example: "Peaky Blinders"
                  description:
                    type: string
                    example: "description"
                  release_date:
                    type: string
                    example: "2006-01-02T15:04:05Z07:00"
                  challenge_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  verification_challenge_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"
    put:
      tags:
        - "Shows"
        - "Episodes"
      summary: Used for update episode.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: show_id
          in: path
          description: Show ID.
          required: true
          schema:
            type: string
        - name: episode_id
          in: path
          description: Episode ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                season_id:
                  type: string
                  example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                episode_number:
                  type: number
                  example: 13
                cover:
                  type: string
                  example: "https://m.media-amazon.com/images/M/MV5BZDUwYWJkNTMtYWMzZC00NGE3LWEzYTYtYjAzZjk0M2MzMDQxXkEyXkFqcGdeQXVyNzk4MTAyOTA@._V1_FMjpg_UX1024_.jpg"
                title:
                  type: string
                  example: "Peaky Blinders"
                description:
                  type: string
                  example: "description"
                release_date:
                  type: string
                  example: "2006-01-02T15:04:05Z"
                challenge_id:
                  type: string
                  example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

    delete:
      tags:
        - "Shows"
        - "Episodes"
      summary: Used for delete episode by id.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: show_id
          in: path
          description: Show ID.
          required: true
          schema:
            type: string
        - name: episode_id
          in: path
          description: Episode ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"


  /shows/{show_id}/episodes/{episode_id}/rate:
    post:
      tags:
        - "Shows"
        - "Episodes"
      summary: Used to rate episode.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: show_id
          in: path
          description: Show ID.
          required: true
          schema:
            type: string
        - name: episode_id
          in: path
          description: Episode ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: number
                  example: 5
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /shows/{show_id}/seasons:
    post:
      tags:
        - "Shows"
        - "Seasons"
      summary: Used for create new season.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: show_id
          in: path
          description: Show ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                season_number:
                  type: number
                  example: 13
      responses:
        "200":
          description: Returns episode data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  show_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  season_number:
                    type: number
                    example: 13
                  title:
                    type: string
                    example: "Season 2"

        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /shows/{show_id}/seasons/{season_id}:
    delete:
      tags:
        - "Shows"
        - "Seasons"
      summary: Used for delete season by id.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: show_id
          in: path
          description: Show ID.
          required: true
          schema:
            type: string
        - name: season_id
          in: path
          description: Seasons ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"


  /challenges/{challenge_id}:
    get:
      tags:
        - "Challenges"
      summary: Get challenge details by id.
      security:
        - bearerAuth: []
      parameters:
        - name: challenge_id
          in: path
          description: Сhallenge ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns challenge details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  title:
                    type: string
                    example: "Challenge name"
                  description:
                    type: string
                    example: "Fast Questions! More detailed description about this challenge here. We can use couple senteces."
                  prize_pool:
                    type: string
                    example: "250 SAO"
                  players:
                    type: integer
                    example: 10
                  winners:
                    type: string
                    example: "you + 7 more"
                  time_per_question:
                    type: string
                    example: "8 sec"
                  play:
                    type: string
                    description: "Absolute URL to start quiz. In the future it will be URL to connect websocket."
                    example: "http://localhost:8080/challenges/{challenge_id}/play"
                  user_max_attempts:
                    type: integer
                    example: 3
                    default: 2
                  attempts_left:
                    type: integer
                    example: 1
                    default: 0
                  received_reward:
                    type: number
                    example: 123.456
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

    put:
      tags:
        - "Challenges"
      summary: Update challenge by id.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: challenge_id
          in: path
          description: Сhallenge ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                show_id:
                  type: string
                  example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                title:
                  type: string
                  example: "title"
                description:
                  type: string
                  example: "description"
                prize_pool_amount:
                  type: number
                  example: 123.456
                players_to_start:
                  type: integer
                  example: 3
                time_per_question_sec:
                  type: integer
                  example: 10
                episode_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                kind:
                  type: integer
                  example: 10
                user_max_attempts:
                  type: integer
                  example: 3
                  default: 2
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "422":
          $ref: "#/components/responses/ValidationError"
    delete:
      tags:
        - "Challenges"
      summary: Delete challenge by id.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: challenge_id
          in: path
          description: Сhallenge ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "422":
          $ref: "#/components/responses/ValidationError"

  /challenges:
    post:
      tags:
        - "Challenges"
      summary: Add new challenge.
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                show_id:
                  type: string
                  example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                title:
                  type: string
                  example: "title"
                description:
                  type: string
                  example: "description"
                prize_pool_amount:
                  type: number
                  example: 123.456
                players_to_start:
                  type: integer
                  example: 3
                time_per_question_sec:
                  type: integer
                  example: 10
                episode_id:
                  type: string
                  example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                kind:
                  type: integer
                  example: 10
                user_max_attempts:
                  type: integer
                  example: 3
                  default: 2
      responses:
        "200":
          description: Returns challenge details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  show_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  title:
                    type: string
                    example: "title"
                  description:
                    type: string
                    example: "description"
                  prize_pool_amount:
                    type: number
                    example: 123.456
                  players_to_start:
                    type: integer
                    example: 3
                  time_per_question_sec:
                    type: integer
                    example: 10
                  episode_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  kind:
                    type: integer
                    example: 10
                  user_max_attempts:
                    type: integer
                    example: 3
                    default: 2
                  attempts_left:
                    type: integer
                    example: 1
                    default: 0
                  received_reward:
                    type: number
                    example: 123.456
        "400":
          $ref: "#/components/responses/DefaultError"
        "422":
          $ref: "#/components/responses/ValidationError"

  /challenges/{episode_id}/validation-question:
    get:
      tags:
        - "Challenges"
      summary: Get validation question by episode id.
      security:
        - bearerAuth: []
      parameters:
        - name: episode_id
          in: path
          description: Episode ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns validation question with answer options.
          content:
            application/json:
              schema:
                type: object
                properties:
                  question_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  question_text:
                    type: string
                    example: "Question text"
                  time_for_answer:
                    type: number
                    example: 8
                  answer_options:
                    type: array
                    items:
                      type: object
                      properties:
                        answer_id:
                          type: string
                          example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                        answer_text:
                          type: string
                          example: "Answer text"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /challenges/{question_id}/check-answer/{answer_id}:
    get:
      tags:
        - "Challenges"
      summary: Check validation question`s answer.
      security:
        - bearerAuth: []
      parameters:
        - name: question_id
          in: path
          description: Question ID.
          required: true
          schema:
            type: string
        - name: answer_id
          in: path
          description: Answer ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns boolean result.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
                    example: true
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /challenges/{episode_id}/is-activated:
    get:
      tags:
        - "Challenges"
      summary: Check episode access.
      security:
        - bearerAuth: []
      parameters:
        - name: episode_id
          in: path
          description: Episode ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns true if a user have activated realm.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
                    example: true
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /qrcodes/{id}:
    get:
      tags:
        - "QR code"
      summary: Get show id and episode id by qrcode id if qrcode isn't expired.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: QRcode ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns qrcode data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  show_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  episode_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  reward_amount:
                    type: number
                    example: 123.56
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"
    put:
      tags:
        - "QR code"
      summary: used for update qrcode by id.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          description: QRcode ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                show_id:
                  type: string
                  example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                episode_id:
                  type: string
                  example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                starts_at:
                  type: string
                  example: "2006-01-02T15:04:05Z"
                  description: "RFC3339"
                expires_at:
                  type: string
                  example: "2006-01-02T15:04:05Z"
                  description: "RFC3339"
                reward_amount:
                  type: number
                  example: 123.56
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

    delete:
      tags:
        - "QR code"
      summary: used for delete qrcode by id.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          description: QRcode ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /qrcodes:
    post:
      tags:
        - "QR code"
      summary: used for create new qrcode.
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                show_id:
                  type: string
                  example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                episode_id:
                  type: string
                  example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                starts_at:
                  type: string
                  example: "2006-01-02T15:04:05Z"
                  description: "RFC3339"
                expires_at:
                  type: string
                  example: "2006-01-02T15:04:05Z"
                  description: "RFC3339"
                reward_amount:
                  type: number
                  example: 123.56
      responses:
        "200":
          description: Returns qrcode data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  show_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  episode_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  starts_at:
                    type: string
                    example: "2006-01-02T15:04:05Z07:00"
                    description: "RFC3339"
                  expires_at:
                    type: string
                    example: "2006-01-02T15:04:05Z07:00"
                    description: "RFC3339"
                  reward_amount:
                    type: number
                    example: 123.56
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /quiz/{challenge_id}/play:
    get:
      tags:
        - "Quiz"
      summary: Get quiz connection URL with access token.
      security:
        - bearerAuth: []
      parameters:
        - name: challenge_id
          in: path
          description: Сhallenge ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns quiz connection URL with access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  play_url:
                    type: string
                    description: "Absolute URL to connect websocket."
                    example: "http://localhost:8080/challenges/{challenge_id}/play/{token}"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /rewards/claim:
    get:
      tags:
        - "Rewards"
      summary: Claim all collected rewards.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Returns claimed rewards amount and link to solana transaction.
          content:
            application/json:
              schema:
                type: object
                properties:
                  amount:
                    type: string
                    example: "83.55 SAO"
                  transaction_url:
                    type: string
                    example: "https://explorer.solana.com/address/CizSaMmnZymceaDTPcNdXgKEpLarCQDvtAkAZA2tSE2u?cluster=devnet"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /rewards/wallet/{wallet_id}:
    get:
      tags:
        - "Rewards"
      summary: returns wallet data by wallet ID.
      security:
        - bearerAuth: []
      parameters:
        - name: wallet_id
          in: path
          description: Wallet ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Get wallet details, including balance and available actions.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  solana_account_address:
                    type: string
                    example: "B2KhBdBCcKWexFob3wrdcfbjaQ31kZ3r7mrQxaqNLVh9"
                  balance:
                    type: array
                    items:
                      type: object
                      properties:
                        amount:
                          type: number
                          example: 123.45
                        currency:
                          type: string
                          example: "SAO"
                  actions:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          example: "send_tokens"
                          description: "Available values: send_tokens, receive_tokens, claim_rewards"
                        name:
                          type: string
                          example: "Send"
                        url:
                          type: string
                          example: "/wallets/f4f78cac-5db6-4ecc-ad13-5877705f3126/send"
                          description: "Relative URL for the request to send tokens"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /rewards/wallet/{wallet_id}/transactions:
    get:
      tags:
        - "Rewards"
      summary: Returns all transactions of specific rewards wallet.
      security:
        - bearerAuth: []
      parameters:
        - name: wallet_id
          in: path
          description: Wallet ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Get wallet transactions list.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    wallet_id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3122"
                    tx_hash:
                      type: string
                      example: "B2KhBdBCcKWexFob3wrdcfbjaQ31kZ3r7mrQxaqNLVh9B2KhBdBCcKWexFob3wrdcfbjaQ31kZ3r7mrQxaqNLVh9"
                    amount:
                      type: number
                      example: 123.45
                    created_at:
                      type: string
                      example: "2006-01-02T15:04:05Z07:00"
                      description: "RFC3339"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /invitations:
    post:
      tags:
        - "Invitations"
      summary: Sends invitation if person doesn't exist in invitation table.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "qwerty@gmail.com"
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /questions/{question_id}:
    get:
      tags:
        - "Challenges"
        - "Questions"
      summary: Used for get question by id.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: question_id
          in: path
          description: Question ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns question details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  challenge_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  question:
                    type: string
                    example: "question"
                  order:
                    type: number
                    example: true
                  question_options:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                        question_id:
                          type: string
                          example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                        option:
                          type: string
                          example: "option"
                        is_correct:
                          type: boolean
                          example: true
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

    put:
      tags:
        - "Challenges"
        - "Questions"
      summary: Used for update question by id.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: question_id
          in: path
          description: Question ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                challenge_id:
                  type: string
                  example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                question:
                  type: string
                  example: "question"
                order:
                  type: integer
                  example: 2
                answer_options:
                  type: array
                  items:
                    type: object
                    properties:
                      option: 
                        type: string
                        description: Answer option
                      is_correct:
                        type: boolean
                        example: true
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

    delete:
      tags:
        - "Challenges"
        - "Questions"
      summary: Used for delete question by id.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: question_id
          in: path
          description: Question ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /challenges/{challenge_id}/questions:
    get:
      tags:
        - "Challenges"
        - "Questions"
      summary: Used for get questions by challenge id.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: challenge_id
          in: path
          description: Challenge ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns array of questions details.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    challenge_id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    question:
                      type: string
                      example: "question"
                    order:
                      type: number
                      example: true
                    question_options:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: string
                            example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                          question_id:
                            type: string
                            example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                          option:
                            type: string
                            example: "option"
                          is_correct:
                            type: boolean
                            example: true
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"
    post:
      tags:
        - "Challenges"
        - "Questions"
      summary: Used for create new question.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: challenge_id
          in: path
          description: Challenge ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                challenge_id:
                  type: string
                  example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                question:
                  type: string
                  example: "question"
                order:
                  type: integer
                  example: 1
                answer_options:
                  type: array
                  items:
                    type: object
                    properties:
                      option: 
                        type: string
                        description: Answer option
                      is_correct:
                        type: boolean
                        example: true
      responses:
        "200":
          description: Returns question details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  challenge_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  question:
                    type: string
                    example: "question"
                  order:
                    type: number
                    example: true
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"


  /questions/{question_id}/answers:
    post:
      tags:
        - "Challenges"
        - "Questions"
        - "Answers"
      summary: Used for create new answer.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: question_id
          in: path
          description: Question ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                option:
                  type: string
                  example: "option"
                is_correct:
                  type: boolean
                  example: true
      responses:
        "200":
          description: Returns answer details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  question_id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  option:
                    type: string
                    example: "option"
                  is_correct:
                    type: boolean
                    example: true
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /questions/{question_id}/answers/{answer_id}:
    put:
      tags:
        - "Challenges"
        - "Questions"
        - "Answers"
      summary: Used for update answer by id.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: question_id
          in: path
          description: Question ID.
          required: true
          schema:
            type: string
        - name: answer_id
          in: path
          description: Answer ID.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                option:
                  type: string
                  example: "option"
                is_correct:
                  type: boolean
                  example: true
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

    delete:
      tags:
        - "Challenges"
        - "Questions"
        - "Answers"
      summary: Used for delete answer by id.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: question_id
          in: path
          description: Question ID.
          required: true
          schema:
            type: string
        - name: answer_id
          in: path
          description: Answer ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"


  /files/images/{id}:
    get:
      tags:
        - "File Storage / Images"
      summary: Get image by id.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          description: Image ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns image data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  file_name:
                    type: string
                    example: "filename"
                  file_path:
                    type: string
                    example: "filepath"
                  file_url:
                    type: string
                    example: "file_url"
                  created_at:
                    type: string
                    example: "2006-01-02T15:04:05Z07:00"
                    description: "RFC3339"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

    delete:
      tags:
        - "File Storage / Images"
      summary: used for delete from storages image by id.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          description: Image ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ResultSuccess"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

  /files/images:
    post:
      tags:
        - "File Storage / Images"
      summary: used to store new image.
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          image/png:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: Returns qrcode data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                  file_name:
                    type: string
                    example: "filename"
                  file_path:
                    type: string
                    example: "filepath"
                  file_url:
                    type: string
                    example: "file_url"
                  created_at:
                    type: string
                    example: "2006-01-02T15:04:05Z07:00"
                    description: "RFC3339"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"

    get:
      tags:
        - "File Storage / Images"
      summary: Get images list.
      security:
        - bearerAuth: [ ]

      responses:
        "200":
          description: Returns image data.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "f4f78cac-5db6-4ecc-ad13-5877705f3126"
                    file_name:
                      type: string
                      example: "filename"
                    file_path:
                      type: string
                      example: "filepath"
                    file_url:
                      type: string
                      example: "file_url"
                    created_at:
                      type: string
                      example: "2006-01-02T15:04:05Z07:00"
                      description: "RFC3339"
        "400":
          $ref: "#/components/responses/DefaultError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/DefaultError"
