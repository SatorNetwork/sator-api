// Code generated by sqlc. DO NOT EDIT.
// source: user_verifications.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createUserVerification = `-- name: CreateUserVerification :exec
INSERT INTO user_verifications (user_id, email, verification_code)
VALUES ($1, $2, $3) ON CONFLICT (user_id, email) DO
UPDATE
SET verification_code = $3
`

type CreateUserVerificationParams struct {
	UserID           uuid.UUID `json:"user_id"`
	Email            string    `json:"email"`
	VerificationCode int32     `json:"verification_code"`
}

func (q *Queries) CreateUserVerification(ctx context.Context, arg CreateUserVerificationParams) error {
	_, err := q.exec(ctx, q.createUserVerificationStmt, createUserVerification, arg.UserID, arg.Email, arg.VerificationCode)
	return err
}

const deleteUserVerificationsByEmail = `-- name: DeleteUserVerificationsByEmail :exec
DELETE FROM user_verifications
WHERE email = $1
`

func (q *Queries) DeleteUserVerificationsByEmail(ctx context.Context, email string) error {
	_, err := q.exec(ctx, q.deleteUserVerificationsByEmailStmt, deleteUserVerificationsByEmail, email)
	return err
}

const deleteUserVerificationsByUserID = `-- name: DeleteUserVerificationsByUserID :exec
DELETE FROM user_verifications
WHERE user_id = $1
`

func (q *Queries) DeleteUserVerificationsByUserID(ctx context.Context, userID uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteUserVerificationsByUserIDStmt, deleteUserVerificationsByUserID, userID)
	return err
}

const getUserVerificationByUserID = `-- name: GetUserVerificationByUserID :one
SELECT user_id, email, verification_code, created_at
FROM user_verifications
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetUserVerificationByUserID(ctx context.Context, userID uuid.UUID) (UserVerification, error) {
	row := q.queryRow(ctx, q.getUserVerificationByUserIDStmt, getUserVerificationByUserID, userID)
	var i UserVerification
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.VerificationCode,
		&i.CreatedAt,
	)
	return i, err
}
