// Code generated by sqlc. DO NOT EDIT.
// source: user_devices.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const blockUsersOnTheSameDevice = `-- name: BlockUsersOnTheSameDevice :exec
UPDATE users SET disabled = TRUE, block_reason = 'suspicion of fraud: created multiple accounts'
WHERE device_id IN (
    SELECT device_id 
    FROM users_devices 
    GROUP BY device_id
    HAVING count(user_id) > 1 
)
`

func (q *Queries) BlockUsersOnTheSameDevice(ctx context.Context) error {
	_, err := q.exec(ctx, q.blockUsersOnTheSameDeviceStmt, blockUsersOnTheSameDevice)
	return err
}

const getUserIDsOnTheSameDevice = `-- name: GetUserIDsOnTheSameDevice :many
SELECT user_id FROM users_devices
WHERE device_id IN (
    SELECT device_id 
    FROM users_devices 
    GROUP BY device_id
    HAVING count(user_id) > 1 
)
`

func (q *Queries) GetUserIDsOnTheSameDevice(ctx context.Context) ([]uuid.UUID, error) {
	rows, err := q.query(ctx, q.getUserIDsOnTheSameDeviceStmt, getUserIDsOnTheSameDevice)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var user_id uuid.UUID
		if err := rows.Scan(&user_id); err != nil {
			return nil, err
		}
		items = append(items, user_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const linkDeviceToUser = `-- name: LinkDeviceToUser :exec
INSERT INTO users_devices (user_id, device_id) 
VALUES ($1, $2) 
ON CONFLICT (user_id, device_id) DO NOTHING
`

type LinkDeviceToUserParams struct {
	UserID   uuid.UUID `json:"user_id"`
	DeviceID string    `json:"device_id"`
}

func (q *Queries) LinkDeviceToUser(ctx context.Context, arg LinkDeviceToUserParams) error {
	_, err := q.exec(ctx, q.linkDeviceToUserStmt, linkDeviceToUser, arg.UserID, arg.DeviceID)
	return err
}
