// Code generated by sqlc. DO NOT EDIT.
// source: password_resets.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createPasswordReset = `-- name: CreatePasswordReset :exec
INSERT INTO password_resets (user_id, email, token)
VALUES ($1, $2, $3) ON CONFLICT (user_id, email) DO
UPDATE
SET token = $3
`

type CreatePasswordResetParams struct {
	UserID uuid.UUID `json:"user_id"`
	Email  string    `json:"email"`
	Token  []byte    `json:"token"`
}

func (q *Queries) CreatePasswordReset(ctx context.Context, arg CreatePasswordResetParams) error {
	_, err := q.exec(ctx, q.createPasswordResetStmt, createPasswordReset, arg.UserID, arg.Email, arg.Token)
	return err
}

const deletePasswordResetsByEmail = `-- name: DeletePasswordResetsByEmail :exec
DELETE FROM password_resets
WHERE email = $1
`

func (q *Queries) DeletePasswordResetsByEmail(ctx context.Context, email string) error {
	_, err := q.exec(ctx, q.deletePasswordResetsByEmailStmt, deletePasswordResetsByEmail, email)
	return err
}

const deletePasswordResetsByUserID = `-- name: DeletePasswordResetsByUserID :exec
DELETE FROM password_resets
WHERE user_id = $1
`

func (q *Queries) DeletePasswordResetsByUserID(ctx context.Context, userID uuid.UUID) error {
	_, err := q.exec(ctx, q.deletePasswordResetsByUserIDStmt, deletePasswordResetsByUserID, userID)
	return err
}

const getPasswordResetByEmail = `-- name: GetPasswordResetByEmail :one
SELECT user_id, email, token, created_at
FROM password_resets
WHERE email = $1
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetPasswordResetByEmail(ctx context.Context, email string) (PasswordReset, error) {
	row := q.queryRow(ctx, q.getPasswordResetByEmailStmt, getPasswordResetByEmail, email)
	var i PasswordReset
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Token,
		&i.CreatedAt,
	)
	return i, err
}
