// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: show_claps.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const addClapForShow = `-- name: AddClapForShow :exec
INSERT INTO show_claps (show_id, user_id)
VALUES ($1, $2)
`

type AddClapForShowParams struct {
	ShowID uuid.UUID `json:"show_id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) AddClapForShow(ctx context.Context, arg AddClapForShowParams) error {
	_, err := q.exec(ctx, q.addClapForShowStmt, addClapForShow, arg.ShowID, arg.UserID)
	return err
}

const countUserClaps = `-- name: CountUserClaps :one
SELECT COUNT(*) FROM show_claps
WHERE show_id = $1
AND user_id = $2
GROUP BY show_id
`

type CountUserClapsParams struct {
	ShowID uuid.UUID `json:"show_id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) CountUserClaps(ctx context.Context, arg CountUserClapsParams) (int64, error) {
	row := q.queryRow(ctx, q.countUserClapsStmt, countUserClaps, arg.ShowID, arg.UserID)
	var count int64
	err := row.Scan(&count)
	return count, err
}
