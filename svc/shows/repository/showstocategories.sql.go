// Code generated by sqlc. DO NOT EDIT.
// source: showstocategories.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const addShowToCategory = `-- name: AddShowToCategory :exec
INSERT INTO shows_to_category (
    category_id,
    show_id
)
VALUES (
           $1,
           $2
       )
`

type AddShowToCategoryParams struct {
	CategoryID uuid.UUID `json:"category_id"`
	ShowID     uuid.UUID `json:"show_id"`
}

func (q *Queries) AddShowToCategory(ctx context.Context, arg AddShowToCategoryParams) error {
	_, err := q.exec(ctx, q.addShowToCategoryStmt, addShowToCategory, arg.CategoryID, arg.ShowID)
	return err
}

const deleteShowToCategory = `-- name: DeleteShowToCategory :exec
DELETE FROM shows_to_category
WHERE category_id = $1 AND show_id = $2
`

type DeleteShowToCategoryParams struct {
	CategoryID uuid.UUID `json:"category_id"`
	ShowID     uuid.UUID `json:"show_id"`
}

func (q *Queries) DeleteShowToCategory(ctx context.Context, arg DeleteShowToCategoryParams) error {
	_, err := q.exec(ctx, q.deleteShowToCategoryStmt, deleteShowToCategory, arg.CategoryID, arg.ShowID)
	return err
}

const getShowToCategoryByCategoryID = `-- name: GetShowToCategoryByCategoryID :many
SELECT category_id, show_id
FROM shows_to_category
WHERE category_id = $1
`

func (q *Queries) GetShowToCategoryByCategoryID(ctx context.Context, categoryID uuid.UUID) ([]ShowsToCategory, error) {
	rows, err := q.query(ctx, q.getShowToCategoryByCategoryIDStmt, getShowToCategoryByCategoryID, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ShowsToCategory
	for rows.Next() {
		var i ShowsToCategory
		if err := rows.Scan(&i.CategoryID, &i.ShowID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getShowToCategoryByShowID = `-- name: GetShowToCategoryByShowID :many
SELECT category_id, show_id
FROM shows_to_category
WHERE show_id = $1
`

func (q *Queries) GetShowToCategoryByShowID(ctx context.Context, showID uuid.UUID) ([]ShowsToCategory, error) {
	rows, err := q.query(ctx, q.getShowToCategoryByShowIDStmt, getShowToCategoryByShowID, showID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ShowsToCategory
	for rows.Next() {
		var i ShowsToCategory
		if err := rows.Scan(&i.CategoryID, &i.ShowID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateShowToCategory = `-- name: UpdateShowToCategory :exec
UPDATE shows_to_category
SET category_id = $1,
    show_id = $2
WHERE category_id = $1 AND show_id = $2
`

type UpdateShowToCategoryParams struct {
	CategoryID uuid.UUID `json:"category_id"`
	ShowID     uuid.UUID `json:"show_id"`
}

func (q *Queries) UpdateShowToCategory(ctx context.Context, arg UpdateShowToCategoryParams) error {
	_, err := q.exec(ctx, q.updateShowToCategoryStmt, updateShowToCategory, arg.CategoryID, arg.ShowID)
	return err
}
