// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: shows_categories.sql

package repository

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addShowCategory = `-- name: AddShowCategory :one
INSERT INTO show_categories (
    sort,
    title,
    disabled
)
VALUES (
           $1,
           $2,
           $3
       ) RETURNING id, title, disabled, sort
`

type AddShowCategoryParams struct {
	Sort     int32        `json:"sort"`
	Title    string       `json:"title"`
	Disabled sql.NullBool `json:"disabled"`
}

func (q *Queries) AddShowCategory(ctx context.Context, arg AddShowCategoryParams) (ShowCategory, error) {
	row := q.queryRow(ctx, q.addShowCategoryStmt, addShowCategory, arg.Sort, arg.Title, arg.Disabled)
	var i ShowCategory
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Disabled,
		&i.Sort,
	)
	return i, err
}

const addShowToCategory = `-- name: AddShowToCategory :one
INSERT INTO shows_to_categories (
    category_id,
    show_id
    )
VALUES (
           $1,
           $2
       ) RETURNING category_id, show_id
`

type AddShowToCategoryParams struct {
	CategoryID uuid.UUID `json:"category_id"`
	ShowID     uuid.UUID `json:"show_id"`
}

func (q *Queries) AddShowToCategory(ctx context.Context, arg AddShowToCategoryParams) (ShowsToCategory, error) {
	row := q.queryRow(ctx, q.addShowToCategoryStmt, addShowToCategory, arg.CategoryID, arg.ShowID)
	var i ShowsToCategory
	err := row.Scan(&i.CategoryID, &i.ShowID)
	return i, err
}

const deleteShowCategoryByID = `-- name: DeleteShowCategoryByID :exec
DELETE FROM show_categories
WHERE id = $1
`

func (q *Queries) DeleteShowCategoryByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteShowCategoryByIDStmt, deleteShowCategoryByID, id)
	return err
}

const deleteShowToCategoryByShowID = `-- name: DeleteShowToCategoryByShowID :exec
DELETE FROM shows_to_categories
WHERE show_id = $1
`

func (q *Queries) DeleteShowToCategoryByShowID(ctx context.Context, showID uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteShowToCategoryByShowIDStmt, deleteShowToCategoryByShowID, showID)
	return err
}

const getCategoriesByShowID = `-- name: GetCategoriesByShowID :many
SELECT category_id
FROM shows_to_categories
WHERE show_id = $1
`

func (q *Queries) GetCategoriesByShowID(ctx context.Context, showID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.query(ctx, q.getCategoriesByShowIDStmt, getCategoriesByShowID, showID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var category_id uuid.UUID
		if err := rows.Scan(&category_id); err != nil {
			return nil, err
		}
		items = append(items, category_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getShowCategories = `-- name: GetShowCategories :many
SELECT id, title, disabled, sort
FROM show_categories
WHERE disabled = FALSE
ORDER BY sort ASC
LIMIT $1 OFFSET $2
`

type GetShowCategoriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetShowCategories(ctx context.Context, arg GetShowCategoriesParams) ([]ShowCategory, error) {
	rows, err := q.query(ctx, q.getShowCategoriesStmt, getShowCategories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ShowCategory
	for rows.Next() {
		var i ShowCategory
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Disabled,
			&i.Sort,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getShowCategoriesWithDisabled = `-- name: GetShowCategoriesWithDisabled :many
SELECT id, title, disabled, sort
FROM show_categories
ORDER BY sort ASC
LIMIT $1 OFFSET $2
`

type GetShowCategoriesWithDisabledParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetShowCategoriesWithDisabled(ctx context.Context, arg GetShowCategoriesWithDisabledParams) ([]ShowCategory, error) {
	rows, err := q.query(ctx, q.getShowCategoriesWithDisabledStmt, getShowCategoriesWithDisabled, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ShowCategory
	for rows.Next() {
		var i ShowCategory
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Disabled,
			&i.Sort,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getShowCategoryByID = `-- name: GetShowCategoryByID :one
SELECT id, title, disabled, sort
FROM show_categories
WHERE id = $1
`

func (q *Queries) GetShowCategoryByID(ctx context.Context, id uuid.UUID) (ShowCategory, error) {
	row := q.queryRow(ctx, q.getShowCategoryByIDStmt, getShowCategoryByID, id)
	var i ShowCategory
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Disabled,
		&i.Sort,
	)
	return i, err
}

const updateShowCategory = `-- name: UpdateShowCategory :exec
UPDATE show_categories
SET sort = $1,
    title = $2,
    disabled = $3
WHERE id = $4
`

type UpdateShowCategoryParams struct {
	Sort     int32        `json:"sort"`
	Title    string       `json:"title"`
	Disabled sql.NullBool `json:"disabled"`
	ID       uuid.UUID    `json:"id"`
}

func (q *Queries) UpdateShowCategory(ctx context.Context, arg UpdateShowCategoryParams) error {
	_, err := q.exec(ctx, q.updateShowCategoryStmt, updateShowCategory,
		arg.Sort,
		arg.Title,
		arg.Disabled,
		arg.ID,
	)
	return err
}
