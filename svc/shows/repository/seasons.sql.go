// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: seasons.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const addSeason = `-- name: AddSeason :one
INSERT INTO seasons (
    show_id,
    season_number
) VALUES (
    $1,
    $2
) RETURNING id, show_id, season_number, deleted_at
`

type AddSeasonParams struct {
	ShowID       uuid.UUID `json:"show_id"`
	SeasonNumber int32     `json:"season_number"`
}

func (q *Queries) AddSeason(ctx context.Context, arg AddSeasonParams) (Season, error) {
	row := q.queryRow(ctx, q.addSeasonStmt, addSeason, arg.ShowID, arg.SeasonNumber)
	var i Season
	err := row.Scan(
		&i.ID,
		&i.ShowID,
		&i.SeasonNumber,
		&i.DeletedAt,
	)
	return i, err
}

const deleteSeasonByID = `-- name: DeleteSeasonByID :exec
UPDATE seasons
SET deleted_at = NOW()
WHERE id = $1 AND seasons.deleted_at IS NULL
`

func (q *Queries) DeleteSeasonByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteSeasonByIDStmt, deleteSeasonByID, id)
	return err
}

const deleteSeasonByShowID = `-- name: DeleteSeasonByShowID :exec
UPDATE seasons
SET deleted_at = NOW()
WHERE show_id = $1 AND seasons.deleted_at IS NULL
`

func (q *Queries) DeleteSeasonByShowID(ctx context.Context, showID uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteSeasonByShowIDStmt, deleteSeasonByShowID, showID)
	return err
}

const getSeasonByID = `-- name: GetSeasonByID :one
SELECT id, show_id, season_number, deleted_at
FROM seasons
WHERE id = $1 AND seasons.deleted_at IS NULL
`

func (q *Queries) GetSeasonByID(ctx context.Context, id uuid.UUID) (Season, error) {
	row := q.queryRow(ctx, q.getSeasonByIDStmt, getSeasonByID, id)
	var i Season
	err := row.Scan(
		&i.ID,
		&i.ShowID,
		&i.SeasonNumber,
		&i.DeletedAt,
	)
	return i, err
}

const getSeasonsByShowID = `-- name: GetSeasonsByShowID :many
SELECT id, show_id, season_number, deleted_at
FROM seasons
WHERE show_id = $1 AND seasons.deleted_at IS NULL
ORDER BY season_number DESC
LIMIT $2 OFFSET $3
`

type GetSeasonsByShowIDParams struct {
	ShowID uuid.UUID `json:"show_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) GetSeasonsByShowID(ctx context.Context, arg GetSeasonsByShowIDParams) ([]Season, error) {
	rows, err := q.query(ctx, q.getSeasonsByShowIDStmt, getSeasonsByShowID, arg.ShowID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Season
	for rows.Next() {
		var i Season
		if err := rows.Scan(
			&i.ID,
			&i.ShowID,
			&i.SeasonNumber,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
