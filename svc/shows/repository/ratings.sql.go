// Code generated by sqlc. DO NOT EDIT.
// source: ratings.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const getEpisodeRatingByID = `-- name: GetEpisodeRatingByID :one
SELECT AVG(rating)::FLOAT as avg_rating
FROM ratings
WHERE episode_id = $1 group by episode_id
`

func (q *Queries) GetEpisodeRatingByID(ctx context.Context, episodeID uuid.UUID) (float64, error) {
	row := q.queryRow(ctx, q.getEpisodeRatingByIDStmt, getEpisodeRatingByID, episodeID)
	var avg_rating float64
	err := row.Scan(&avg_rating)
	return avg_rating, err
}

const rateEpisode = `-- name: RateEpisode :exec
INSERT INTO ratings (
    episode_id,
    user_id,
    rating
) VALUES (
    $1,
    $2,
    $3
    )
`

type RateEpisodeParams struct {
	EpisodeID uuid.UUID `json:"episode_id"`
	UserID    uuid.UUID `json:"user_id"`
	Rating    int32     `json:"rating"`
}

func (q *Queries) RateEpisode(ctx context.Context, arg RateEpisodeParams) error {
	_, err := q.exec(ctx, q.rateEpisodeStmt, rateEpisode, arg.EpisodeID, arg.UserID, arg.Rating)
	return err
}
