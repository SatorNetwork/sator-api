// Code generated by sqlc. DO NOT EDIT.
// source: showscategories.sql

package repository

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addShowCategory = `-- name: AddShowCategory :one
INSERT INTO shows_categories (
    category_name,
    title,
    disabled
)
VALUES (
           $1,
           $2,
           $3
       ) RETURNING id, category_name, title, disabled
`

type AddShowCategoryParams struct {
	CategoryName string       `json:"category_name"`
	Title        string       `json:"title"`
	Disabled     sql.NullBool `json:"disabled"`
}

func (q *Queries) AddShowCategory(ctx context.Context, arg AddShowCategoryParams) (ShowsCategory, error) {
	row := q.queryRow(ctx, q.addShowCategoryStmt, addShowCategory, arg.CategoryName, arg.Title, arg.Disabled)
	var i ShowsCategory
	err := row.Scan(
		&i.ID,
		&i.CategoryName,
		&i.Title,
		&i.Disabled,
	)
	return i, err
}

const deleteShowCategoryByID = `-- name: DeleteShowCategoryByID :exec
DELETE FROM shows_categories
WHERE id = $1
`

func (q *Queries) DeleteShowCategoryByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteShowCategoryByIDStmt, deleteShowCategoryByID, id)
	return err
}

const getShowCategories = `-- name: GetShowCategories :many
SELECT id, category_name, title, disabled
FROM shows_categories
`

func (q *Queries) GetShowCategories(ctx context.Context) ([]ShowsCategory, error) {
	rows, err := q.query(ctx, q.getShowCategoriesStmt, getShowCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ShowsCategory
	for rows.Next() {
		var i ShowsCategory
		if err := rows.Scan(
			&i.ID,
			&i.CategoryName,
			&i.Title,
			&i.Disabled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getShowCategoryByID = `-- name: GetShowCategoryByID :one
SELECT id, category_name, title, disabled
FROM shows_categories
WHERE id = $1
`

func (q *Queries) GetShowCategoryByID(ctx context.Context, id uuid.UUID) (ShowsCategory, error) {
	row := q.queryRow(ctx, q.getShowCategoryByIDStmt, getShowCategoryByID, id)
	var i ShowsCategory
	err := row.Scan(
		&i.ID,
		&i.CategoryName,
		&i.Title,
		&i.Disabled,
	)
	return i, err
}

const updateShowCategory = `-- name: UpdateShowCategory :exec
UPDATE shows_categories
SET category_name = $1,
    title = $2,
    disabled = $3
WHERE id = $4
`

type UpdateShowCategoryParams struct {
	CategoryName string       `json:"category_name"`
	Title        string       `json:"title"`
	Disabled     sql.NullBool `json:"disabled"`
	ID           uuid.UUID    `json:"id"`
}

func (q *Queries) UpdateShowCategory(ctx context.Context, arg UpdateShowCategoryParams) error {
	_, err := q.exec(ctx, q.updateShowCategoryStmt, updateShowCategory,
		arg.CategoryName,
		arg.Title,
		arg.Disabled,
		arg.ID,
	)
	return err
}
