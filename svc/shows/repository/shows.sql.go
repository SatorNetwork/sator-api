// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: shows.sql

package repository

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const addShow = `-- name: AddShow :one
INSERT INTO shows (
    title,
    cover,
    has_new_episode,
    category,
    description,
    realms_title,
    realms_subtitle,
    watch,
    status
  )
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9::shows_status_type
) RETURNING id, title, cover, has_new_episode, updated_at, created_at, category, description, realms_title, realms_subtitle, watch, status
`

type AddShowParams struct {
	Title          string          `json:"title"`
	Cover          string          `json:"cover"`
	HasNewEpisode  bool            `json:"has_new_episode"`
	Category       sql.NullString  `json:"category"`
	Description    sql.NullString  `json:"description"`
	RealmsTitle    sql.NullString  `json:"realms_title"`
	RealmsSubtitle sql.NullString  `json:"realms_subtitle"`
	Watch          sql.NullString  `json:"watch"`
	Status         ShowsStatusType `json:"status"`
}

func (q *Queries) AddShow(ctx context.Context, arg AddShowParams) (Show, error) {
	row := q.queryRow(ctx, q.addShowStmt, addShow,
		arg.Title,
		arg.Cover,
		arg.HasNewEpisode,
		arg.Category,
		arg.Description,
		arg.RealmsTitle,
		arg.RealmsSubtitle,
		arg.Watch,
		arg.Status,
	)
	var i Show
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Cover,
		&i.HasNewEpisode,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.Category,
		&i.Description,
		&i.RealmsTitle,
		&i.RealmsSubtitle,
		&i.Watch,
		&i.Status,
	)
	return i, err
}

const deleteShowByID = `-- name: DeleteShowByID :exec
UPDATE shows
SET status = 'archived'::shows_status_type
WHERE id = $1
`

func (q *Queries) DeleteShowByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteShowByIDStmt, deleteShowByID, id)
	return err
}

const getAllShows = `-- name: GetAllShows :many
SELECT id, title, cover, has_new_episode, updated_at, created_at, category, description, realms_title, realms_subtitle, watch, status
FROM shows
ORDER BY has_new_episode DESC,
    updated_at DESC,
    created_at DESC
LIMIT $1 OFFSET $2
`

type GetAllShowsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllShows(ctx context.Context, arg GetAllShowsParams) ([]Show, error) {
	rows, err := q.query(ctx, q.getAllShowsStmt, getAllShows, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Show
	for rows.Next() {
		var i Show
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Cover,
			&i.HasNewEpisode,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.Category,
			&i.Description,
			&i.RealmsTitle,
			&i.RealmsSubtitle,
			&i.Watch,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPublishedShowByID = `-- name: GetPublishedShowByID :one
WITH show_claps_sum AS (
    SELECT 
        COUNT(*) AS claps,
        show_id
    FROM show_claps
    WHERE show_id = $1
    GROUP BY show_id  
)
SELECT 
    shows.id, shows.title, shows.cover, shows.has_new_episode, shows.updated_at, shows.created_at, shows.category, shows.description, shows.realms_title, shows.realms_subtitle, shows.watch, shows.status,
    COALESCE(show_claps_sum.claps, 0) as claps
FROM shows
LEFT JOIN show_claps_sum ON show_claps_sum.show_id = shows.id
WHERE shows.id = $1 AND shows.status = 'published'::shows_status_type
`

type GetPublishedShowByIDRow struct {
	ID             uuid.UUID       `json:"id"`
	Title          string          `json:"title"`
	Cover          string          `json:"cover"`
	HasNewEpisode  bool            `json:"has_new_episode"`
	UpdatedAt      sql.NullTime    `json:"updated_at"`
	CreatedAt      time.Time       `json:"created_at"`
	Category       sql.NullString  `json:"category"`
	Description    sql.NullString  `json:"description"`
	RealmsTitle    sql.NullString  `json:"realms_title"`
	RealmsSubtitle sql.NullString  `json:"realms_subtitle"`
	Watch          sql.NullString  `json:"watch"`
	Status         ShowsStatusType `json:"status"`
	Claps          int64           `json:"claps"`
}

func (q *Queries) GetPublishedShowByID(ctx context.Context, id uuid.UUID) (GetPublishedShowByIDRow, error) {
	row := q.queryRow(ctx, q.getPublishedShowByIDStmt, getPublishedShowByID, id)
	var i GetPublishedShowByIDRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Cover,
		&i.HasNewEpisode,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.Category,
		&i.Description,
		&i.RealmsTitle,
		&i.RealmsSubtitle,
		&i.Watch,
		&i.Status,
		&i.Claps,
	)
	return i, err
}

const getPublishedShows = `-- name: GetPublishedShows :many
SELECT id, title, cover, has_new_episode, updated_at, created_at, category, description, realms_title, realms_subtitle, watch, status
FROM shows
WHERE status = 'published'::shows_status_type
ORDER BY has_new_episode DESC,
    updated_at DESC,
    created_at DESC
LIMIT $1 OFFSET $2
`

type GetPublishedShowsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetPublishedShows(ctx context.Context, arg GetPublishedShowsParams) ([]Show, error) {
	rows, err := q.query(ctx, q.getPublishedShowsStmt, getPublishedShows, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Show
	for rows.Next() {
		var i Show
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Cover,
			&i.HasNewEpisode,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.Category,
			&i.Description,
			&i.RealmsTitle,
			&i.RealmsSubtitle,
			&i.Watch,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getShowByID = `-- name: GetShowByID :one
SELECT id, title, cover, has_new_episode, updated_at, created_at, category, description, realms_title, realms_subtitle, watch, status
FROM shows
WHERE shows.id = $1
`

func (q *Queries) GetShowByID(ctx context.Context, id uuid.UUID) (Show, error) {
	row := q.queryRow(ctx, q.getShowByIDStmt, getShowByID, id)
	var i Show
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Cover,
		&i.HasNewEpisode,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.Category,
		&i.Description,
		&i.RealmsTitle,
		&i.RealmsSubtitle,
		&i.Watch,
		&i.Status,
	)
	return i, err
}

const getShowsByCategory = `-- name: GetShowsByCategory :many
SELECT id, title, cover, has_new_episode, updated_at, created_at, category, description, realms_title, realms_subtitle, watch, status FROM shows
WHERE id IN(
        SELECT DISTINCT show_id FROM shows_to_categories
              JOIN show_categories ON show_categories.id = shows_to_categories.category_id
        WHERE show_categories.disabled = FALSE
          AND show_categories.id = $1)
AND status = 'published'::shows_status_type
ORDER BY has_new_episode DESC,
         updated_at DESC,
         created_at DESC
    LIMIT $3 OFFSET $2
`

type GetShowsByCategoryParams struct {
	CategoryID uuid.UUID `json:"category_id"`
	Offset     int32     `json:"offset_val"`
	Limit      int32     `json:"limit_val"`
}

func (q *Queries) GetShowsByCategory(ctx context.Context, arg GetShowsByCategoryParams) ([]Show, error) {
	rows, err := q.query(ctx, q.getShowsByCategoryStmt, getShowsByCategory, arg.CategoryID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Show
	for rows.Next() {
		var i Show
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Cover,
			&i.HasNewEpisode,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.Category,
			&i.Description,
			&i.RealmsTitle,
			&i.RealmsSubtitle,
			&i.Watch,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getShowsByOldCategory = `-- name: GetShowsByOldCategory :many
SELECT id, title, cover, has_new_episode, updated_at, created_at, category, description, realms_title, realms_subtitle, watch, status
FROM shows
WHERE status = 'published'::shows_status_type
AND category = $1::varchar
ORDER BY has_new_episode DESC,
    updated_at DESC,
    created_at DESC
LIMIT $3 OFFSET $2
`

type GetShowsByOldCategoryParams struct {
	Category string `json:"category"`
	Offset   int32  `json:"offset_val"`
	Limit    int32  `json:"limit_val"`
}

func (q *Queries) GetShowsByOldCategory(ctx context.Context, arg GetShowsByOldCategoryParams) ([]Show, error) {
	rows, err := q.query(ctx, q.getShowsByOldCategoryStmt, getShowsByOldCategory, arg.Category, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Show
	for rows.Next() {
		var i Show
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Cover,
			&i.HasNewEpisode,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.Category,
			&i.Description,
			&i.RealmsTitle,
			&i.RealmsSubtitle,
			&i.Watch,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getShowsByStatus = `-- name: GetShowsByStatus :many
SELECT id, title, cover, has_new_episode, updated_at, created_at, category, description, realms_title, realms_subtitle, watch, status
FROM shows
WHERE status = $1::shows_status_type
LIMIT $3 OFFSET $2
`

type GetShowsByStatusParams struct {
	Status ShowsStatusType `json:"status"`
	Offset int32           `json:"offset_val"`
	Limit  int32           `json:"limit_val"`
}

func (q *Queries) GetShowsByStatus(ctx context.Context, arg GetShowsByStatusParams) ([]Show, error) {
	rows, err := q.query(ctx, q.getShowsByStatusStmt, getShowsByStatus, arg.Status, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Show
	for rows.Next() {
		var i Show
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Cover,
			&i.HasNewEpisode,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.Category,
			&i.Description,
			&i.RealmsTitle,
			&i.RealmsSubtitle,
			&i.Watch,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getShowsByTitle = `-- name: GetShowsByTitle :many
SELECT id, title, cover, has_new_episode, updated_at, created_at, category, description, realms_title, realms_subtitle, watch, status FROM shows
WHERE title = $1
`

func (q *Queries) GetShowsByTitle(ctx context.Context, title string) ([]Show, error) {
	rows, err := q.query(ctx, q.getShowsByTitleStmt, getShowsByTitle, title)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Show
	for rows.Next() {
		var i Show
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Cover,
			&i.HasNewEpisode,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.Category,
			&i.Description,
			&i.RealmsTitle,
			&i.RealmsSubtitle,
			&i.Watch,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateShow = `-- name: UpdateShow :exec
UPDATE shows
SET title = $1,
    cover = $2,
    has_new_episode = $3,
    category = $4,
    description = $5,
    realms_title = $6,
    realms_subtitle = $7,
    watch = $8,
    status = $9::shows_status_type
WHERE id = $10
`

type UpdateShowParams struct {
	Title          string          `json:"title"`
	Cover          string          `json:"cover"`
	HasNewEpisode  bool            `json:"has_new_episode"`
	Category       sql.NullString  `json:"category"`
	Description    sql.NullString  `json:"description"`
	RealmsTitle    sql.NullString  `json:"realms_title"`
	RealmsSubtitle sql.NullString  `json:"realms_subtitle"`
	Watch          sql.NullString  `json:"watch"`
	Status         ShowsStatusType `json:"status"`
	ID             uuid.UUID       `json:"id"`
}

func (q *Queries) UpdateShow(ctx context.Context, arg UpdateShowParams) error {
	_, err := q.exec(ctx, q.updateShowStmt, updateShow,
		arg.Title,
		arg.Cover,
		arg.HasNewEpisode,
		arg.Category,
		arg.Description,
		arg.RealmsTitle,
		arg.RealmsSubtitle,
		arg.Watch,
		arg.Status,
		arg.ID,
	)
	return err
}
