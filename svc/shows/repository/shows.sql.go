// Code generated by sqlc. DO NOT EDIT.
// source: shows.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const getShowByID = `-- name: GetShowByID :one
SELECT id, title, cover, has_new_episode, updated_at, created_at
FROM shows
WHERE id = $1
`

func (q *Queries) GetShowByID(ctx context.Context, id uuid.UUID) (Show, error) {
	row := q.queryRow(ctx, q.getShowByIDStmt, getShowByID, id)
	var i Show
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Cover,
		&i.HasNewEpisode,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getShows = `-- name: GetShows :many
SELECT id, title, cover, has_new_episode, updated_at, created_at
FROM shows
ORDER BY has_new_episode DESC,
    updated_at DESC,
    created_at DESC
LIMIT $1 OFFSET $2
`

type GetShowsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetShows(ctx context.Context, arg GetShowsParams) ([]Show, error) {
	rows, err := q.query(ctx, q.getShowsStmt, getShows, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Show
	for rows.Next() {
		var i Show
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Cover,
			&i.HasNewEpisode,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
