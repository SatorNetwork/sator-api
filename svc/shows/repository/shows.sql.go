// Code generated by sqlc. DO NOT EDIT.
// source: shows.sql

package repository

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const addShow = `-- name: AddShow :one
INSERT INTO shows (
    title,
    cover,
    has_new_episode,
    category,
    description
  )
VALUES (
           $1,
           $2,
           $3,
           $4,
           $5
) RETURNING id, title, cover, has_new_episode, updated_at, created_at, category, description
`

type AddShowParams struct {
	Title         string         `json:"title"`
	Cover         string         `json:"cover"`
	HasNewEpisode bool           `json:"has_new_episode"`
	Category      sql.NullString `json:"category"`
	Description   sql.NullString `json:"description"`
}

func (q *Queries) AddShow(ctx context.Context, arg AddShowParams) (Show, error) {
	row := q.queryRow(ctx, q.addShowStmt, addShow,
		arg.Title,
		arg.Cover,
		arg.HasNewEpisode,
		arg.Category,
		arg.Description,
	)
	var i Show
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Cover,
		&i.HasNewEpisode,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.Category,
		&i.Description,
	)
	return i, err
}

const deleteShowByID = `-- name: DeleteShowByID :exec
DELETE FROM shows
WHERE id = $1
`

func (q *Queries) DeleteShowByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteShowByIDStmt, deleteShowByID, id)
	return err
}

const getShowByID = `-- name: GetShowByID :one
WITH show_claps_sum AS (
    SELECT 
        COUNT(*) AS claps,
        show_id
    FROM show_claps
    WHERE show_id = $1
    GROUP BY show_id  
)
SELECT 
    shows.id, shows.title, shows.cover, shows.has_new_episode, shows.updated_at, shows.created_at, shows.category, shows.description,
    show_claps_sum.claps as claps
FROM shows
LEFT JOIN show_claps_sum ON show_claps_sum.show_id = shows.id
WHERE shows.id = $1
`

type GetShowByIDRow struct {
	ID            uuid.UUID      `json:"id"`
	Title         string         `json:"title"`
	Cover         string         `json:"cover"`
	HasNewEpisode bool           `json:"has_new_episode"`
	UpdatedAt     sql.NullTime   `json:"updated_at"`
	CreatedAt     time.Time      `json:"created_at"`
	Category      sql.NullString `json:"category"`
	Description   sql.NullString `json:"description"`
	Claps         int64          `json:"claps"`
}

func (q *Queries) GetShowByID(ctx context.Context, id uuid.UUID) (GetShowByIDRow, error) {
	row := q.queryRow(ctx, q.getShowByIDStmt, getShowByID, id)
	var i GetShowByIDRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Cover,
		&i.HasNewEpisode,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.Category,
		&i.Description,
		&i.Claps,
	)
	return i, err
}

const getShows = `-- name: GetShows :many
WITH show_claps_sum AS (
    SELECT 
        COUNT(*) AS claps,
        show_id
    FROM show_claps
    GROUP BY show_id  
)
SELECT shows.id, shows.title, shows.cover, shows.has_new_episode, shows.updated_at, shows.created_at, shows.category, shows.description, show_claps_sum.claps AS claps
FROM shows
LEFT JOIN show_claps_sum ON show_claps_sum.show_id = shows.id
ORDER BY has_new_episode DESC,
    updated_at DESC,
    created_at DESC
LIMIT $1 OFFSET $2
`

type GetShowsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetShowsRow struct {
	ID            uuid.UUID      `json:"id"`
	Title         string         `json:"title"`
	Cover         string         `json:"cover"`
	HasNewEpisode bool           `json:"has_new_episode"`
	UpdatedAt     sql.NullTime   `json:"updated_at"`
	CreatedAt     time.Time      `json:"created_at"`
	Category      sql.NullString `json:"category"`
	Description   sql.NullString `json:"description"`
	Claps         int64          `json:"claps"`
}

func (q *Queries) GetShows(ctx context.Context, arg GetShowsParams) ([]GetShowsRow, error) {
	rows, err := q.query(ctx, q.getShowsStmt, getShows, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetShowsRow
	for rows.Next() {
		var i GetShowsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Cover,
			&i.HasNewEpisode,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.Category,
			&i.Description,
			&i.Claps,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getShowsByCategory = `-- name: GetShowsByCategory :many
SELECT id, title, cover, has_new_episode, updated_at, created_at, category, description
FROM shows
WHERE category = $1
ORDER BY has_new_episode DESC,
         updated_at DESC,
         created_at DESC
    LIMIT $2 OFFSET $3
`

type GetShowsByCategoryParams struct {
	Category sql.NullString `json:"category"`
	Limit    int32          `json:"limit"`
	Offset   int32          `json:"offset"`
}

func (q *Queries) GetShowsByCategory(ctx context.Context, arg GetShowsByCategoryParams) ([]Show, error) {
	rows, err := q.query(ctx, q.getShowsByCategoryStmt, getShowsByCategory, arg.Category, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Show
	for rows.Next() {
		var i Show
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Cover,
			&i.HasNewEpisode,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.Category,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateShow = `-- name: UpdateShow :exec
UPDATE shows
SET title = $1,
    cover = $2,
    has_new_episode = $3,
    category = $4,
    description = $5
WHERE id = $6
`

type UpdateShowParams struct {
	Title         string         `json:"title"`
	Cover         string         `json:"cover"`
	HasNewEpisode bool           `json:"has_new_episode"`
	Category      sql.NullString `json:"category"`
	Description   sql.NullString `json:"description"`
	ID            uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateShow(ctx context.Context, arg UpdateShowParams) error {
	_, err := q.exec(ctx, q.updateShowStmt, updateShow,
		arg.Title,
		arg.Cover,
		arg.HasNewEpisode,
		arg.Category,
		arg.Description,
		arg.ID,
	)
	return err
}
