// Code generated by sqlc. DO NOT EDIT.
// source: profile.sql

package repository

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createProfile = `-- name: CreateProfile :one
INSERT INTO profiles (user_id, first_name, last_name)
VALUES ($1, $2, $3) RETURNING id, user_id, first_name, last_name, updated_at, created_at, avatar
`

type CreateProfileParams struct {
	UserID    uuid.UUID      `json:"user_id"`
	FirstName sql.NullString `json:"first_name"`
	LastName  sql.NullString `json:"last_name"`
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (Profile, error) {
	row := q.queryRow(ctx, q.createProfileStmt, createProfile, arg.UserID, arg.FirstName, arg.LastName)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.Avatar,
	)
	return i, err
}

const getProfileByUserID = `-- name: GetProfileByUserID :one
SELECT id, user_id, first_name, last_name, updated_at, created_at, avatar
FROM profiles
WHERE user_id = $1
LIMIT 1
`

func (q *Queries) GetProfileByUserID(ctx context.Context, userID uuid.UUID) (Profile, error) {
	row := q.queryRow(ctx, q.getProfileByUserIDStmt, getProfileByUserID, userID)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.Avatar,
	)
	return i, err
}

const updateAvatar = `-- name: UpdateAvatar :exec
UPDATE profiles
SET avatar = $1
WHERE user_id = $2
`

type UpdateAvatarParams struct {
	Avatar sql.NullString `json:"avatar"`
	UserID uuid.UUID      `json:"user_id"`
}

func (q *Queries) UpdateAvatar(ctx context.Context, arg UpdateAvatarParams) error {
	_, err := q.exec(ctx, q.updateAvatarStmt, updateAvatar, arg.Avatar, arg.UserID)
	return err
}

const updateProfileByID = `-- name: UpdateProfileByID :exec
UPDATE profiles
SET first_name = $1,
    last_name = $2
WHERE id = $3
`

type UpdateProfileByIDParams struct {
	FirstName sql.NullString `json:"first_name"`
	LastName  sql.NullString `json:"last_name"`
	ID        uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateProfileByID(ctx context.Context, arg UpdateProfileByIDParams) error {
	_, err := q.exec(ctx, q.updateProfileByIDStmt, updateProfileByID, arg.FirstName, arg.LastName, arg.ID)
	return err
}

const updateProfileByUserID = `-- name: UpdateProfileByUserID :exec
UPDATE profiles
SET first_name = $1,
    last_name = $2
WHERE user_id = $3
`

type UpdateProfileByUserIDParams struct {
	FirstName sql.NullString `json:"first_name"`
	LastName  sql.NullString `json:"last_name"`
	UserID    uuid.UUID      `json:"user_id"`
}

func (q *Queries) UpdateProfileByUserID(ctx context.Context, arg UpdateProfileByUserIDParams) error {
	_, err := q.exec(ctx, q.updateProfileByUserIDStmt, updateProfileByUserID, arg.FirstName, arg.LastName, arg.UserID)
	return err
}
