// Code generated by sqlc. DO NOT EDIT.
// source: quizzes.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const cleanUp = `-- name: CleanUp :exec
DELETE FROM quizzes_v2
`

func (q *Queries) CleanUp(ctx context.Context) error {
	_, err := q.exec(ctx, q.cleanUpStmt, cleanUp)
	return err
}

const getDistributedRewardsByChallengeID = `-- name: GetDistributedRewardsByChallengeID :one
SELECT SUM(distributed_rewards)::DOUBLE PRECISION
FROM quizzes_v2
WHERE challenge_id = $1
`

func (q *Queries) GetDistributedRewardsByChallengeID(ctx context.Context, challengeID uuid.UUID) (float64, error) {
	row := q.queryRow(ctx, q.getDistributedRewardsByChallengeIDStmt, getDistributedRewardsByChallengeID, challengeID)
	var column_1 float64
	err := row.Scan(&column_1)
	return column_1, err
}

const registerNewQuiz = `-- name: RegisterNewQuiz :one
INSERT INTO quizzes_v2 (
    challenge_id,
    distributed_rewards
)
VALUES (
    $1,
    $2
) RETURNING id, challenge_id, distributed_rewards, updated_at, created_at
`

type RegisterNewQuizParams struct {
	ChallengeID        uuid.UUID `json:"challenge_id"`
	DistributedRewards float64   `json:"distributed_rewards"`
}

func (q *Queries) RegisterNewQuiz(ctx context.Context, arg RegisterNewQuizParams) (QuizzesV2, error) {
	row := q.queryRow(ctx, q.registerNewQuizStmt, registerNewQuiz, arg.ChallengeID, arg.DistributedRewards)
	var i QuizzesV2
	err := row.Scan(
		&i.ID,
		&i.ChallengeID,
		&i.DistributedRewards,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
