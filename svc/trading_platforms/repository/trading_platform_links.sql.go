// Code generated by sqlc. DO NOT EDIT.
// source: trading_platform_links.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createTradingPlatformLink = `-- name: CreateTradingPlatformLink :one
INSERT INTO trading_platform_links (
   title,
   link,
   logo
)
VALUES (
   $1,
   $2,
   $3
) RETURNING id, title, link, logo, updated_at, created_at
`

type CreateTradingPlatformLinkParams struct {
	Title string `json:"title"`
	Link  string `json:"link"`
	Logo  string `json:"logo"`
}

func (q *Queries) CreateTradingPlatformLink(ctx context.Context, arg CreateTradingPlatformLinkParams) (TradingPlatformLink, error) {
	row := q.queryRow(ctx, q.createTradingPlatformLinkStmt, createTradingPlatformLink, arg.Title, arg.Link, arg.Logo)
	var i TradingPlatformLink
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Link,
		&i.Logo,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTradingPlatformLink = `-- name: DeleteTradingPlatformLink :exec
DELETE FROM trading_platform_links
WHERE id = $1
`

func (q *Queries) DeleteTradingPlatformLink(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteTradingPlatformLinkStmt, deleteTradingPlatformLink, id)
	return err
}

const getTradingPlatformLinks = `-- name: GetTradingPlatformLinks :many
SELECT id, title, link, logo, updated_at, created_at
FROM trading_platform_links
LIMIT $1 OFFSET $2
`

type GetTradingPlatformLinksParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetTradingPlatformLinks(ctx context.Context, arg GetTradingPlatformLinksParams) ([]TradingPlatformLink, error) {
	rows, err := q.query(ctx, q.getTradingPlatformLinksStmt, getTradingPlatformLinks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TradingPlatformLink
	for rows.Next() {
		var i TradingPlatformLink
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Link,
			&i.Logo,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTradingPlatformLink = `-- name: UpdateTradingPlatformLink :exec
UPDATE trading_platform_links
SET
   title = $1,
   link = $2,
   logo = $3
WHERE id = $4
`

type UpdateTradingPlatformLinkParams struct {
	Title string    `json:"title"`
	Link  string    `json:"link"`
	Logo  string    `json:"logo"`
	ID    uuid.UUID `json:"id"`
}

func (q *Queries) UpdateTradingPlatformLink(ctx context.Context, arg UpdateTradingPlatformLinkParams) error {
	_, err := q.exec(ctx, q.updateTradingPlatformLinkStmt, updateTradingPlatformLink,
		arg.Title,
		arg.Link,
		arg.Logo,
		arg.ID,
	)
	return err
}
