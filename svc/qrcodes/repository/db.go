// Code generated by sqlc. DO NOT EDIT.

package repository

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addQRCodeStmt, err = db.PrepareContext(ctx, addQRCode); err != nil {
		return nil, fmt.Errorf("error preparing query AddQRCode: %w", err)
	}
	if q.deleteQRCodeByIDStmt, err = db.PrepareContext(ctx, deleteQRCodeByID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteQRCodeByID: %w", err)
	}
	if q.getDataByQRCodeIDStmt, err = db.PrepareContext(ctx, getDataByQRCodeID); err != nil {
		return nil, fmt.Errorf("error preparing query GetDataByQRCodeID: %w", err)
	}
	if q.updateQRCodeStmt, err = db.PrepareContext(ctx, updateQRCode); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateQRCode: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addQRCodeStmt != nil {
		if cerr := q.addQRCodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addQRCodeStmt: %w", cerr)
		}
	}
	if q.deleteQRCodeByIDStmt != nil {
		if cerr := q.deleteQRCodeByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteQRCodeByIDStmt: %w", cerr)
		}
	}
	if q.getDataByQRCodeIDStmt != nil {
		if cerr := q.getDataByQRCodeIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDataByQRCodeIDStmt: %w", cerr)
		}
	}
	if q.updateQRCodeStmt != nil {
		if cerr := q.updateQRCodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateQRCodeStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                    DBTX
	tx                    *sql.Tx
	addQRCodeStmt         *sql.Stmt
	deleteQRCodeByIDStmt  *sql.Stmt
	getDataByQRCodeIDStmt *sql.Stmt
	updateQRCodeStmt      *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                    tx,
		tx:                    tx,
		addQRCodeStmt:         q.addQRCodeStmt,
		deleteQRCodeByIDStmt:  q.deleteQRCodeByIDStmt,
		getDataByQRCodeIDStmt: q.getDataByQRCodeIDStmt,
		updateQRCodeStmt:      q.updateQRCodeStmt,
	}
}
