// Code generated by sqlc. DO NOT EDIT.
// source: scanned_qrcodes.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const addScannedQRCode = `-- name: AddScannedQRCode :one
INSERT INTO scanned_qrcodes (
    user_id,
    qrcode_id
)
VALUES (
           $1,
           $2
       ) RETURNING user_id, qrcode_id, updated_at, created_at
`

type AddScannedQRCodeParams struct {
	UserID   uuid.UUID `json:"user_id"`
	QrcodeID uuid.UUID `json:"qrcode_id"`
}

func (q *Queries) AddScannedQRCode(ctx context.Context, arg AddScannedQRCodeParams) (ScannedQrcode, error) {
	row := q.queryRow(ctx, q.addScannedQRCodeStmt, addScannedQRCode, arg.UserID, arg.QrcodeID)
	var i ScannedQrcode
	err := row.Scan(
		&i.UserID,
		&i.QrcodeID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteScannedQRCode = `-- name: DeleteScannedQRCode :exec
DELETE FROM scanned_qrcodes
WHERE user_id = $1 AND qrcode_id = $2
`

type DeleteScannedQRCodeParams struct {
	UserID   uuid.UUID `json:"user_id"`
	QrcodeID uuid.UUID `json:"qrcode_id"`
}

func (q *Queries) DeleteScannedQRCode(ctx context.Context, arg DeleteScannedQRCodeParams) error {
	_, err := q.exec(ctx, q.deleteScannedQRCodeStmt, deleteScannedQRCode, arg.UserID, arg.QrcodeID)
	return err
}

const getScannedQRCodeByUserID = `-- name: GetScannedQRCodeByUserID :one
SELECT user_id, qrcode_id, updated_at, created_at
FROM scanned_qrcodes
WHERE user_id = $1 AND qrcode_id = $2
    LIMIT 1
`

type GetScannedQRCodeByUserIDParams struct {
	UserID   uuid.UUID `json:"user_id"`
	QrcodeID uuid.UUID `json:"qrcode_id"`
}

func (q *Queries) GetScannedQRCodeByUserID(ctx context.Context, arg GetScannedQRCodeByUserIDParams) (ScannedQrcode, error) {
	row := q.queryRow(ctx, q.getScannedQRCodeByUserIDStmt, getScannedQRCodeByUserID, arg.UserID, arg.QrcodeID)
	var i ScannedQrcode
	err := row.Scan(
		&i.UserID,
		&i.QrcodeID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
