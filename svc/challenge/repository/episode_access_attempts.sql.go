// Code generated by sqlc. DO NOT EDIT.
// source: episode_access_attempts.sql

package repository

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addAttempt = `-- name: AddAttempt :one
INSERT INTO attempts (user_id, episode_id, question_id, answer_id, valid)
VALUES ($1, $2, $3, $4, $5) RETURNING user_id, episode_id, question_id, answer_id, valid, created_at
`

type AddAttemptParams struct {
	UserID     uuid.UUID    `json:"user_id"`
	EpisodeID  uuid.UUID    `json:"episode_id"`
	QuestionID uuid.UUID    `json:"question_id"`
	AnswerID   uuid.UUID    `json:"answer_id"`
	Valid      sql.NullBool `json:"valid"`
}

func (q *Queries) AddAttempt(ctx context.Context, arg AddAttemptParams) (Attempt, error) {
	row := q.queryRow(ctx, q.addAttemptStmt, addAttempt,
		arg.UserID,
		arg.EpisodeID,
		arg.QuestionID,
		arg.AnswerID,
		arg.Valid,
	)
	var i Attempt
	err := row.Scan(
		&i.UserID,
		&i.EpisodeID,
		&i.QuestionID,
		&i.AnswerID,
		&i.Valid,
		&i.CreatedAt,
	)
	return i, err
}

const countAttempts = `-- name: CountAttempts :one
SELECT COUNT (*)
FROM attempts
WHERE user_id = $1 AND episode_id = $2 AND created_at > $3 AND answer_id IS NOT NULL
`

type CountAttemptsParams struct {
	UserID    uuid.UUID    `json:"user_id"`
	EpisodeID uuid.UUID    `json:"episode_id"`
	CreatedAt sql.NullTime `json:"created_at"`
}

func (q *Queries) CountAttempts(ctx context.Context, arg CountAttemptsParams) (int64, error) {
	row := q.queryRow(ctx, q.countAttemptsStmt, countAttempts, arg.UserID, arg.EpisodeID, arg.CreatedAt)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAskedQuestionsByEpisodeID = `-- name: GetAskedQuestionsByEpisodeID :many
SELECT question_id
FROM attempts
WHERE user_id = $1 AND episode_id = $2
`

type GetAskedQuestionsByEpisodeIDParams struct {
	UserID    uuid.UUID `json:"user_id"`
	EpisodeID uuid.UUID `json:"episode_id"`
}

func (q *Queries) GetAskedQuestionsByEpisodeID(ctx context.Context, arg GetAskedQuestionsByEpisodeIDParams) ([]uuid.UUID, error) {
	rows, err := q.query(ctx, q.getAskedQuestionsByEpisodeIDStmt, getAskedQuestionsByEpisodeID, arg.UserID, arg.EpisodeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var question_id uuid.UUID
		if err := rows.Scan(&question_id); err != nil {
			return nil, err
		}
		items = append(items, question_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEpisodeIDByQuestionID = `-- name: GetEpisodeIDByQuestionID :one
SELECT episode_id
FROM attempts
WHERE user_id = $1 AND question_id = $2
ORDER BY created_at DESC
LIMIT 1
`

type GetEpisodeIDByQuestionIDParams struct {
	UserID     uuid.UUID `json:"user_id"`
	QuestionID uuid.UUID `json:"question_id"`
}

func (q *Queries) GetEpisodeIDByQuestionID(ctx context.Context, arg GetEpisodeIDByQuestionIDParams) (uuid.UUID, error) {
	row := q.queryRow(ctx, q.getEpisodeIDByQuestionIDStmt, getEpisodeIDByQuestionID, arg.UserID, arg.QuestionID)
	var episode_id uuid.UUID
	err := row.Scan(&episode_id)
	return episode_id, err
}

const updateAttempt = `-- name: UpdateAttempt :exec
UPDATE attempts
SET answer_id = $1, valid = $2
WHERE user_id = $3 AND question_id = $4 AND answer_id IS NULL
`

type UpdateAttemptParams struct {
	AnswerID   uuid.UUID    `json:"answer_id"`
	Valid      sql.NullBool `json:"valid"`
	UserID     uuid.UUID    `json:"user_id"`
	QuestionID uuid.UUID    `json:"question_id"`
}

func (q *Queries) UpdateAttempt(ctx context.Context, arg UpdateAttemptParams) error {
	_, err := q.exec(ctx, q.updateAttemptStmt, updateAttempt,
		arg.AnswerID,
		arg.Valid,
		arg.UserID,
		arg.QuestionID,
	)
	return err
}
