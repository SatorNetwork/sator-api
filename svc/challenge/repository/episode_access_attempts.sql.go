// Code generated by sqlc. DO NOT EDIT.
// source: episode_access_attempts.sql

package repository

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addAttempt = `-- name: AddAttempt :one
INSERT INTO attempts (user_id, episode_id, question_id, answer_id, valid)
VALUES ($1, $2, $3, $4, $5) RETURNING user_id, episode_id, question_id, answer_id, valid, created_at
`

type AddAttemptParams struct {
	UserID     uuid.UUID    `json:"user_id"`
	EpisodeID  uuid.UUID    `json:"episode_id"`
	QuestionID uuid.UUID    `json:"question_id"`
	AnswerID   uuid.UUID    `json:"answer_id"`
	Valid      sql.NullBool `json:"valid"`
}

func (q *Queries) AddAttempt(ctx context.Context, arg AddAttemptParams) (Attempt, error) {
	row := q.queryRow(ctx, q.addAttemptStmt, addAttempt,
		arg.UserID,
		arg.EpisodeID,
		arg.QuestionID,
		arg.AnswerID,
		arg.Valid,
	)
	var i Attempt
	err := row.Scan(
		&i.UserID,
		&i.EpisodeID,
		&i.QuestionID,
		&i.AnswerID,
		&i.Valid,
		&i.CreatedAt,
	)
	return i, err
}

const countAttempts = `-- name: CountAttempts :one
SELECT COUNT (*)
FROM attempts
WHERE user_id = $1 AND episode_id = $2 AND created_at > $3
`

type CountAttemptsParams struct {
	UserID    uuid.UUID    `json:"user_id"`
	EpisodeID uuid.UUID    `json:"episode_id"`
	CreatedAt sql.NullTime `json:"created_at"`
}

func (q *Queries) CountAttempts(ctx context.Context, arg CountAttemptsParams) (int64, error) {
	row := q.queryRow(ctx, q.countAttemptsStmt, countAttempts, arg.UserID, arg.EpisodeID, arg.CreatedAt)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteAttempt = `-- name: DeleteAttempt :exec
DELETE FROM attempts
WHERE user_id = $1 AND episode_id = $2
`

type DeleteAttemptParams struct {
	UserID    uuid.UUID `json:"user_id"`
	EpisodeID uuid.UUID `json:"episode_id"`
}

func (q *Queries) DeleteAttempt(ctx context.Context, arg DeleteAttemptParams) error {
	_, err := q.exec(ctx, q.deleteAttemptStmt, deleteAttempt, arg.UserID, arg.EpisodeID)
	return err
}

const getAttemptByEpisodeID = `-- name: GetAttemptByEpisodeID :one
SELECT user_id, episode_id, question_id, answer_id, valid, created_at
FROM attempts
WHERE user_id = $1 AND episode_id = $2
    LIMIT 1
`

type GetAttemptByEpisodeIDParams struct {
	UserID    uuid.UUID `json:"user_id"`
	EpisodeID uuid.UUID `json:"episode_id"`
}

func (q *Queries) GetAttemptByEpisodeID(ctx context.Context, arg GetAttemptByEpisodeIDParams) (Attempt, error) {
	row := q.queryRow(ctx, q.getAttemptByEpisodeIDStmt, getAttemptByEpisodeID, arg.UserID, arg.EpisodeID)
	var i Attempt
	err := row.Scan(
		&i.UserID,
		&i.EpisodeID,
		&i.QuestionID,
		&i.AnswerID,
		&i.Valid,
		&i.CreatedAt,
	)
	return i, err
}

const getAttemptByQuestionID = `-- name: GetAttemptByQuestionID :one
SELECT user_id, episode_id, question_id, answer_id, valid, created_at
FROM attempts
WHERE user_id = $1 AND question_id = $2
    LIMIT 1
`

type GetAttemptByQuestionIDParams struct {
	UserID     uuid.UUID `json:"user_id"`
	QuestionID uuid.UUID `json:"question_id"`
}

func (q *Queries) GetAttemptByQuestionID(ctx context.Context, arg GetAttemptByQuestionIDParams) (Attempt, error) {
	row := q.queryRow(ctx, q.getAttemptByQuestionIDStmt, getAttemptByQuestionID, arg.UserID, arg.QuestionID)
	var i Attempt
	err := row.Scan(
		&i.UserID,
		&i.EpisodeID,
		&i.QuestionID,
		&i.AnswerID,
		&i.Valid,
		&i.CreatedAt,
	)
	return i, err
}

const updateAttempt = `-- name: UpdateAttempt :exec
UPDATE attempts
SET question_id = $1,
    answer_id = $2,
    valid = $3
WHERE user_id = $4 AND episode_id = $5
`

type UpdateAttemptParams struct {
	QuestionID uuid.UUID    `json:"question_id"`
	AnswerID   uuid.UUID    `json:"answer_id"`
	Valid      sql.NullBool `json:"valid"`
	UserID     uuid.UUID    `json:"user_id"`
	EpisodeID  uuid.UUID    `json:"episode_id"`
}

func (q *Queries) UpdateAttempt(ctx context.Context, arg UpdateAttemptParams) error {
	_, err := q.exec(ctx, q.updateAttemptStmt, updateAttempt,
		arg.QuestionID,
		arg.AnswerID,
		arg.Valid,
		arg.UserID,
		arg.EpisodeID,
	)
	return err
}
