// Code generated by sqlc. DO NOT EDIT.
// source: challenge.sql

package repository

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addChallenge = `-- name: AddChallenge :exec
INSERT INTO challenges (
    show_id,
    title,
    description,
    prize_pool,
    players_to_start,
    time_per_question,
    updated_at
)
VALUES (
           $1,
           $2,
           $3,
           $4,
           $5,
           $6,
           $7
       )
`

type AddChallengeParams struct {
	ShowID          uuid.UUID      `json:"show_id"`
	Title           string         `json:"title"`
	Description     sql.NullString `json:"description"`
	PrizePool       float64        `json:"prize_pool"`
	PlayersToStart  int32          `json:"players_to_start"`
	TimePerQuestion sql.NullInt32  `json:"time_per_question"`
	UpdatedAt       sql.NullTime   `json:"updated_at"`
}

func (q *Queries) AddChallenge(ctx context.Context, arg AddChallengeParams) error {
	_, err := q.exec(ctx, q.addChallengeStmt, addChallenge,
		arg.ShowID,
		arg.Title,
		arg.Description,
		arg.PrizePool,
		arg.PlayersToStart,
		arg.TimePerQuestion,
		arg.UpdatedAt,
	)
	return err
}

const deleteChallengeByID = `-- name: DeleteChallengeByID :exec
DELETE FROM challenges
WHERE id = $1
`

func (q *Queries) DeleteChallengeByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteChallengeByIDStmt, deleteChallengeByID, id)
	return err
}

const getChallengeByID = `-- name: GetChallengeByID :one
SELECT id, show_id, title, description, prize_pool, players_to_start, time_per_question, updated_at, created_at
FROM challenges
WHERE id = $1
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetChallengeByID(ctx context.Context, id uuid.UUID) (Challenge, error) {
	row := q.queryRow(ctx, q.getChallengeByIDStmt, getChallengeByID, id)
	var i Challenge
	err := row.Scan(
		&i.ID,
		&i.ShowID,
		&i.Title,
		&i.Description,
		&i.PrizePool,
		&i.PlayersToStart,
		&i.TimePerQuestion,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getChallenges = `-- name: GetChallenges :many
SELECT id, show_id, title, description, prize_pool, players_to_start, time_per_question, updated_at, created_at
FROM challenges
WHERE show_id = $1
ORDER BY updated_at DESC,
    created_at DESC
LIMIT $2 OFFSET $3
`

type GetChallengesParams struct {
	ShowID uuid.UUID `json:"show_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) GetChallenges(ctx context.Context, arg GetChallengesParams) ([]Challenge, error) {
	rows, err := q.query(ctx, q.getChallengesStmt, getChallenges, arg.ShowID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Challenge
	for rows.Next() {
		var i Challenge
		if err := rows.Scan(
			&i.ID,
			&i.ShowID,
			&i.Title,
			&i.Description,
			&i.PrizePool,
			&i.PlayersToStart,
			&i.TimePerQuestion,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChallenge = `-- name: UpdateChallenge :exec
UPDATE challenges
SET show_id = $1,
    title = $2,
    description = $3,
    prize_pool = $4,
    players_to_start = $5,
    time_per_question = $6,
    updated_at = $7
WHERE id = $8
`

type UpdateChallengeParams struct {
	ShowID          uuid.UUID      `json:"show_id"`
	Title           string         `json:"title"`
	Description     sql.NullString `json:"description"`
	PrizePool       float64        `json:"prize_pool"`
	PlayersToStart  int32          `json:"players_to_start"`
	TimePerQuestion sql.NullInt32  `json:"time_per_question"`
	UpdatedAt       sql.NullTime   `json:"updated_at"`
	ID              uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateChallenge(ctx context.Context, arg UpdateChallengeParams) error {
	_, err := q.exec(ctx, q.updateChallengeStmt, updateChallenge,
		arg.ShowID,
		arg.Title,
		arg.Description,
		arg.PrizePool,
		arg.PlayersToStart,
		arg.TimePerQuestion,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
