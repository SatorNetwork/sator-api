// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: read_announcements.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const isNotRead = `-- name: IsNotRead :one
SELECT (NOT EXISTS(
   SELECT announcement_id, user_id, updated_at, created_at FROM read_announcements
   WHERE announcement_id = $1 AND
         user_id = $2
))::BOOL
`

type IsNotReadParams struct {
	AnnouncementID uuid.UUID `json:"announcement_id"`
	UserID         uuid.UUID `json:"user_id"`
}

func (q *Queries) IsNotRead(ctx context.Context, arg IsNotReadParams) (bool, error) {
	row := q.queryRow(ctx, q.isNotReadStmt, isNotRead, arg.AnnouncementID, arg.UserID)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const isRead = `-- name: IsRead :one
SELECT EXISTS(
    SELECT announcement_id, user_id, updated_at, created_at FROM read_announcements
    WHERE announcement_id = $1 AND
          user_id = $2
)
`

type IsReadParams struct {
	AnnouncementID uuid.UUID `json:"announcement_id"`
	UserID         uuid.UUID `json:"user_id"`
}

func (q *Queries) IsRead(ctx context.Context, arg IsReadParams) (bool, error) {
	row := q.queryRow(ctx, q.isReadStmt, isRead, arg.AnnouncementID, arg.UserID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const markAsRead = `-- name: MarkAsRead :exec
INSERT INTO read_announcements (
    announcement_id,
    user_id
)
VALUES (
    $1,
    $2
) RETURNING announcement_id, user_id, updated_at, created_at
`

type MarkAsReadParams struct {
	AnnouncementID uuid.UUID `json:"announcement_id"`
	UserID         uuid.UUID `json:"user_id"`
}

func (q *Queries) MarkAsRead(ctx context.Context, arg MarkAsReadParams) error {
	_, err := q.exec(ctx, q.markAsReadStmt, markAsRead, arg.AnnouncementID, arg.UserID)
	return err
}
