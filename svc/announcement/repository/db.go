// Code generated by sqlc. DO NOT EDIT.

package repository

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.cleanUpAnnouncementsStmt, err = db.PrepareContext(ctx, cleanUpAnnouncements); err != nil {
		return nil, fmt.Errorf("error preparing query CleanUpAnnouncements: %w", err)
	}
	if q.cleanUpReadAnnouncementsStmt, err = db.PrepareContext(ctx, cleanUpReadAnnouncements); err != nil {
		return nil, fmt.Errorf("error preparing query CleanUpReadAnnouncements: %w", err)
	}
	if q.createAnnouncementStmt, err = db.PrepareContext(ctx, createAnnouncement); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAnnouncement: %w", err)
	}
	if q.getAnnouncementByIDStmt, err = db.PrepareContext(ctx, getAnnouncementByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetAnnouncementByID: %w", err)
	}
	if q.isNotReadStmt, err = db.PrepareContext(ctx, isNotRead); err != nil {
		return nil, fmt.Errorf("error preparing query IsNotRead: %w", err)
	}
	if q.isReadStmt, err = db.PrepareContext(ctx, isRead); err != nil {
		return nil, fmt.Errorf("error preparing query IsRead: %w", err)
	}
	if q.listAnnouncementsStmt, err = db.PrepareContext(ctx, listAnnouncements); err != nil {
		return nil, fmt.Errorf("error preparing query ListAnnouncements: %w", err)
	}
	if q.listUnreadAnnouncementsStmt, err = db.PrepareContext(ctx, listUnreadAnnouncements); err != nil {
		return nil, fmt.Errorf("error preparing query ListUnreadAnnouncements: %w", err)
	}
	if q.markAsReadStmt, err = db.PrepareContext(ctx, markAsRead); err != nil {
		return nil, fmt.Errorf("error preparing query MarkAsRead: %w", err)
	}
	if q.updateAnnouncementByIDStmt, err = db.PrepareContext(ctx, updateAnnouncementByID); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAnnouncementByID: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.cleanUpAnnouncementsStmt != nil {
		if cerr := q.cleanUpAnnouncementsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing cleanUpAnnouncementsStmt: %w", cerr)
		}
	}
	if q.cleanUpReadAnnouncementsStmt != nil {
		if cerr := q.cleanUpReadAnnouncementsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing cleanUpReadAnnouncementsStmt: %w", cerr)
		}
	}
	if q.createAnnouncementStmt != nil {
		if cerr := q.createAnnouncementStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAnnouncementStmt: %w", cerr)
		}
	}
	if q.getAnnouncementByIDStmt != nil {
		if cerr := q.getAnnouncementByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAnnouncementByIDStmt: %w", cerr)
		}
	}
	if q.isNotReadStmt != nil {
		if cerr := q.isNotReadStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing isNotReadStmt: %w", cerr)
		}
	}
	if q.isReadStmt != nil {
		if cerr := q.isReadStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing isReadStmt: %w", cerr)
		}
	}
	if q.listAnnouncementsStmt != nil {
		if cerr := q.listAnnouncementsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAnnouncementsStmt: %w", cerr)
		}
	}
	if q.listUnreadAnnouncementsStmt != nil {
		if cerr := q.listUnreadAnnouncementsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUnreadAnnouncementsStmt: %w", cerr)
		}
	}
	if q.markAsReadStmt != nil {
		if cerr := q.markAsReadStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing markAsReadStmt: %w", cerr)
		}
	}
	if q.updateAnnouncementByIDStmt != nil {
		if cerr := q.updateAnnouncementByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAnnouncementByIDStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                           DBTX
	tx                           *sql.Tx
	cleanUpAnnouncementsStmt     *sql.Stmt
	cleanUpReadAnnouncementsStmt *sql.Stmt
	createAnnouncementStmt       *sql.Stmt
	getAnnouncementByIDStmt      *sql.Stmt
	isNotReadStmt                *sql.Stmt
	isReadStmt                   *sql.Stmt
	listAnnouncementsStmt        *sql.Stmt
	listUnreadAnnouncementsStmt  *sql.Stmt
	markAsReadStmt               *sql.Stmt
	updateAnnouncementByIDStmt   *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                           tx,
		tx:                           tx,
		cleanUpAnnouncementsStmt:     q.cleanUpAnnouncementsStmt,
		cleanUpReadAnnouncementsStmt: q.cleanUpReadAnnouncementsStmt,
		createAnnouncementStmt:       q.createAnnouncementStmt,
		getAnnouncementByIDStmt:      q.getAnnouncementByIDStmt,
		isNotReadStmt:                q.isNotReadStmt,
		isReadStmt:                   q.isReadStmt,
		listAnnouncementsStmt:        q.listAnnouncementsStmt,
		listUnreadAnnouncementsStmt:  q.listUnreadAnnouncementsStmt,
		markAsReadStmt:               q.markAsReadStmt,
		updateAnnouncementByIDStmt:   q.updateAnnouncementByIDStmt,
	}
}
