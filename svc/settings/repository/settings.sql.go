// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: settings.sql

package repository

import (
	"context"
	"database/sql"
)

const addSetting = `-- name: AddSetting :one
INSERT INTO settings (key, name, value_type, value, description)
VALUES ($1, $2, $3, $4, $5) RETURNING key, name, value_type, value, description
`

type AddSettingParams struct {
	Key         string            `json:"key"`
	Name        string            `json:"name"`
	ValueType   SettingsValueType `json:"value_type"`
	Value       string            `json:"value"`
	Description sql.NullString    `json:"description"`
}

func (q *Queries) AddSetting(ctx context.Context, arg AddSettingParams) (Setting, error) {
	row := q.queryRow(ctx, q.addSettingStmt, addSetting,
		arg.Key,
		arg.Name,
		arg.ValueType,
		arg.Value,
		arg.Description,
	)
	var i Setting
	err := row.Scan(
		&i.Key,
		&i.Name,
		&i.ValueType,
		&i.Value,
		&i.Description,
	)
	return i, err
}

const deleteSetting = `-- name: DeleteSetting :exec
DELETE FROM settings WHERE key = $1
`

func (q *Queries) DeleteSetting(ctx context.Context, key string) error {
	_, err := q.exec(ctx, q.deleteSettingStmt, deleteSetting, key)
	return err
}

const getSettingByKey = `-- name: GetSettingByKey :one
SELECT key, name, value_type, value, description
FROM settings
WHERE key = $1
`

func (q *Queries) GetSettingByKey(ctx context.Context, key string) (Setting, error) {
	row := q.queryRow(ctx, q.getSettingByKeyStmt, getSettingByKey, key)
	var i Setting
	err := row.Scan(
		&i.Key,
		&i.Name,
		&i.ValueType,
		&i.Value,
		&i.Description,
	)
	return i, err
}

const getSettings = `-- name: GetSettings :many
SELECT key, name, value_type, value, description FROM settings ORDER BY key
`

func (q *Queries) GetSettings(ctx context.Context) ([]Setting, error) {
	rows, err := q.query(ctx, q.getSettingsStmt, getSettings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Setting
	for rows.Next() {
		var i Setting
		if err := rows.Scan(
			&i.Key,
			&i.Name,
			&i.ValueType,
			&i.Value,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSetting = `-- name: UpdateSetting :one
UPDATE settings SET value = $1
WHERE key = $2
RETURNING key, name, value_type, value, description
`

type UpdateSettingParams struct {
	Value string `json:"value"`
	Key   string `json:"key"`
}

func (q *Queries) UpdateSetting(ctx context.Context, arg UpdateSettingParams) (Setting, error) {
	row := q.queryRow(ctx, q.updateSettingStmt, updateSetting, arg.Value, arg.Key)
	var i Setting
	err := row.Scan(
		&i.Key,
		&i.Name,
		&i.ValueType,
		&i.Value,
		&i.Description,
	)
	return i, err
}
