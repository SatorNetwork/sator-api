// Code generated by sqlc. DO NOT EDIT.
// source: disabled_notifications.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const disableNotification = `-- name: DisableNotification :exec
INSERT INTO disabled_notifications (
    user_id,
    topic
)
VALUES (
    $1,
    $2
)
`

type DisableNotificationParams struct {
	UserID uuid.UUID `json:"user_id"`
	Topic  string    `json:"topic"`
}

func (q *Queries) DisableNotification(ctx context.Context, arg DisableNotificationParams) error {
	_, err := q.exec(ctx, q.disableNotificationStmt, disableNotification, arg.UserID, arg.Topic)
	return err
}

const enableNotification = `-- name: EnableNotification :exec
DELETE FROM disabled_notifications
WHERE user_id = $1 AND topic = $2
`

type EnableNotificationParams struct {
	UserID uuid.UUID `json:"user_id"`
	Topic  string    `json:"topic"`
}

func (q *Queries) EnableNotification(ctx context.Context, arg EnableNotificationParams) error {
	_, err := q.exec(ctx, q.enableNotificationStmt, enableNotification, arg.UserID, arg.Topic)
	return err
}

const isNotificationDisabled = `-- name: IsNotificationDisabled :one
SELECT EXISTS(
    SELECT user_id, topic, updated_at, created_at FROM disabled_notifications
    WHERE user_id = $1 AND topic = $2
)
`

type IsNotificationDisabledParams struct {
	UserID uuid.UUID `json:"user_id"`
	Topic  string    `json:"topic"`
}

func (q *Queries) IsNotificationDisabled(ctx context.Context, arg IsNotificationDisabledParams) (bool, error) {
	row := q.queryRow(ctx, q.isNotificationDisabledStmt, isNotificationDisabled, arg.UserID, arg.Topic)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const isNotificationEnabled = `-- name: IsNotificationEnabled :one
SELECT (NOT EXISTS(
    SELECT user_id, topic, updated_at, created_at FROM disabled_notifications
    WHERE user_id = $1 AND topic = $2
))::BOOL
`

type IsNotificationEnabledParams struct {
	UserID uuid.UUID `json:"user_id"`
	Topic  string    `json:"topic"`
}

func (q *Queries) IsNotificationEnabled(ctx context.Context, arg IsNotificationEnabledParams) (bool, error) {
	row := q.queryRow(ctx, q.isNotificationEnabledStmt, isNotificationEnabled, arg.UserID, arg.Topic)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}
