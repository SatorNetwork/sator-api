// Code generated by sqlc. DO NOT EDIT.
// source: firebase_registration_tokens.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const deleteRegistrationToken = `-- name: DeleteRegistrationToken :exec
DELETE FROM firebase_registration_tokens
WHERE device_id = $1 AND user_id = $2
`

type DeleteRegistrationTokenParams struct {
	DeviceID string    `json:"device_id"`
	UserID   uuid.UUID `json:"user_id"`
}

func (q *Queries) DeleteRegistrationToken(ctx context.Context, arg DeleteRegistrationTokenParams) error {
	_, err := q.exec(ctx, q.deleteRegistrationTokenStmt, deleteRegistrationToken, arg.DeviceID, arg.UserID)
	return err
}

const getRegistrationToken = `-- name: GetRegistrationToken :one
SELECT device_id, user_id, registration_token, updated_at, created_at FROM firebase_registration_tokens
WHERE device_id = $1 AND user_id = $2
`

type GetRegistrationTokenParams struct {
	DeviceID string    `json:"device_id"`
	UserID   uuid.UUID `json:"user_id"`
}

func (q *Queries) GetRegistrationToken(ctx context.Context, arg GetRegistrationTokenParams) (FirebaseRegistrationToken, error) {
	row := q.queryRow(ctx, q.getRegistrationTokenStmt, getRegistrationToken, arg.DeviceID, arg.UserID)
	var i FirebaseRegistrationToken
	err := row.Scan(
		&i.DeviceID,
		&i.UserID,
		&i.RegistrationToken,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const upsertRegistrationToken = `-- name: UpsertRegistrationToken :exec
INSERT INTO firebase_registration_tokens (
    device_id,
    user_id,
    registration_token
)
VALUES (
    $1,
    $2,
    $3
) ON CONFLICT (device_id) DO UPDATE
SET
    user_id = $2,
    registration_token = $3
`

type UpsertRegistrationTokenParams struct {
	DeviceID          string    `json:"device_id"`
	UserID            uuid.UUID `json:"user_id"`
	RegistrationToken string    `json:"registration_token"`
}

func (q *Queries) UpsertRegistrationToken(ctx context.Context, arg UpsertRegistrationTokenParams) error {
	_, err := q.exec(ctx, q.upsertRegistrationTokenStmt, upsertRegistrationToken, arg.DeviceID, arg.UserID, arg.RegistrationToken)
	return err
}
