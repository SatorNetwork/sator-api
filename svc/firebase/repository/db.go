// Code generated by sqlc. DO NOT EDIT.

package repository

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.deleteRegistrationTokenStmt, err = db.PrepareContext(ctx, deleteRegistrationToken); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteRegistrationToken: %w", err)
	}
	if q.disableNotificationStmt, err = db.PrepareContext(ctx, disableNotification); err != nil {
		return nil, fmt.Errorf("error preparing query DisableNotification: %w", err)
	}
	if q.enableNotificationStmt, err = db.PrepareContext(ctx, enableNotification); err != nil {
		return nil, fmt.Errorf("error preparing query EnableNotification: %w", err)
	}
	if q.getRegistrationTokenStmt, err = db.PrepareContext(ctx, getRegistrationToken); err != nil {
		return nil, fmt.Errorf("error preparing query GetRegistrationToken: %w", err)
	}
	if q.isNotificationDisabledStmt, err = db.PrepareContext(ctx, isNotificationDisabled); err != nil {
		return nil, fmt.Errorf("error preparing query IsNotificationDisabled: %w", err)
	}
	if q.isNotificationEnabledStmt, err = db.PrepareContext(ctx, isNotificationEnabled); err != nil {
		return nil, fmt.Errorf("error preparing query IsNotificationEnabled: %w", err)
	}
	if q.upsertRegistrationTokenStmt, err = db.PrepareContext(ctx, upsertRegistrationToken); err != nil {
		return nil, fmt.Errorf("error preparing query UpsertRegistrationToken: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.deleteRegistrationTokenStmt != nil {
		if cerr := q.deleteRegistrationTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteRegistrationTokenStmt: %w", cerr)
		}
	}
	if q.disableNotificationStmt != nil {
		if cerr := q.disableNotificationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing disableNotificationStmt: %w", cerr)
		}
	}
	if q.enableNotificationStmt != nil {
		if cerr := q.enableNotificationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing enableNotificationStmt: %w", cerr)
		}
	}
	if q.getRegistrationTokenStmt != nil {
		if cerr := q.getRegistrationTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRegistrationTokenStmt: %w", cerr)
		}
	}
	if q.isNotificationDisabledStmt != nil {
		if cerr := q.isNotificationDisabledStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing isNotificationDisabledStmt: %w", cerr)
		}
	}
	if q.isNotificationEnabledStmt != nil {
		if cerr := q.isNotificationEnabledStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing isNotificationEnabledStmt: %w", cerr)
		}
	}
	if q.upsertRegistrationTokenStmt != nil {
		if cerr := q.upsertRegistrationTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing upsertRegistrationTokenStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                          DBTX
	tx                          *sql.Tx
	deleteRegistrationTokenStmt *sql.Stmt
	disableNotificationStmt     *sql.Stmt
	enableNotificationStmt      *sql.Stmt
	getRegistrationTokenStmt    *sql.Stmt
	isNotificationDisabledStmt  *sql.Stmt
	isNotificationEnabledStmt   *sql.Stmt
	upsertRegistrationTokenStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                          tx,
		tx:                          tx,
		deleteRegistrationTokenStmt: q.deleteRegistrationTokenStmt,
		disableNotificationStmt:     q.disableNotificationStmt,
		enableNotificationStmt:      q.enableNotificationStmt,
		getRegistrationTokenStmt:    q.getRegistrationTokenStmt,
		isNotificationDisabledStmt:  q.isNotificationDisabledStmt,
		isNotificationEnabledStmt:   q.isNotificationEnabledStmt,
		upsertRegistrationTokenStmt: q.upsertRegistrationTokenStmt,
	}
}
