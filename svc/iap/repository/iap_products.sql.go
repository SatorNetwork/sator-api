// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: iap_products.sql

package repository

import (
	"context"
)

const createIapProduct = `-- name: CreateIapProduct :one
INSERT INTO iap_products (
    id,
    price_in_sao,
    price_in_usd
)
VALUES (
    $1,
    $2,
    $3
) RETURNING id, price_in_sao, updated_at, created_at, price_in_usd
`

type CreateIapProductParams struct {
	ID         string  `json:"id"`
	PriceInSao float64 `json:"price_in_sao"`
	PriceInUsd float64 `json:"price_in_usd"`
}

func (q *Queries) CreateIapProduct(ctx context.Context, arg CreateIapProductParams) (IapProduct, error) {
	row := q.queryRow(ctx, q.createIapProductStmt, createIapProduct, arg.ID, arg.PriceInSao, arg.PriceInUsd)
	var i IapProduct
	err := row.Scan(
		&i.ID,
		&i.PriceInSao,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.PriceInUsd,
	)
	return i, err
}

const getIapProductByID = `-- name: GetIapProductByID :one
SELECT id, price_in_sao, updated_at, created_at, price_in_usd FROM iap_products
WHERE id = $1
`

func (q *Queries) GetIapProductByID(ctx context.Context, id string) (IapProduct, error) {
	row := q.queryRow(ctx, q.getIapProductByIDStmt, getIapProductByID, id)
	var i IapProduct
	err := row.Scan(
		&i.ID,
		&i.PriceInSao,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.PriceInUsd,
	)
	return i, err
}
