// Code generated by sqlc. DO NOT EDIT.

package repository

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.acceptInvitationByInviteeEmailStmt, err = db.PrepareContext(ctx, acceptInvitationByInviteeEmail); err != nil {
		return nil, fmt.Errorf("error preparing query AcceptInvitationByInviteeEmail: %w", err)
	}
	if q.createInvitationStmt, err = db.PrepareContext(ctx, createInvitation); err != nil {
		return nil, fmt.Errorf("error preparing query CreateInvitation: %w", err)
	}
	if q.getInvitationByInviteeEmailStmt, err = db.PrepareContext(ctx, getInvitationByInviteeEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetInvitationByInviteeEmail: %w", err)
	}
	if q.getInvitationByInviteeIDStmt, err = db.PrepareContext(ctx, getInvitationByInviteeID); err != nil {
		return nil, fmt.Errorf("error preparing query GetInvitationByInviteeID: %w", err)
	}
	if q.getInvitationsStmt, err = db.PrepareContext(ctx, getInvitations); err != nil {
		return nil, fmt.Errorf("error preparing query GetInvitations: %w", err)
	}
	if q.getInvitationsByInvitedByIDStmt, err = db.PrepareContext(ctx, getInvitationsByInvitedByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetInvitationsByInvitedByID: %w", err)
	}
	if q.getInvitationsPaginatedStmt, err = db.PrepareContext(ctx, getInvitationsPaginated); err != nil {
		return nil, fmt.Errorf("error preparing query GetInvitationsPaginated: %w", err)
	}
	if q.setRewardReceivedStmt, err = db.PrepareContext(ctx, setRewardReceived); err != nil {
		return nil, fmt.Errorf("error preparing query SetRewardReceived: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.acceptInvitationByInviteeEmailStmt != nil {
		if cerr := q.acceptInvitationByInviteeEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing acceptInvitationByInviteeEmailStmt: %w", cerr)
		}
	}
	if q.createInvitationStmt != nil {
		if cerr := q.createInvitationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createInvitationStmt: %w", cerr)
		}
	}
	if q.getInvitationByInviteeEmailStmt != nil {
		if cerr := q.getInvitationByInviteeEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getInvitationByInviteeEmailStmt: %w", cerr)
		}
	}
	if q.getInvitationByInviteeIDStmt != nil {
		if cerr := q.getInvitationByInviteeIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getInvitationByInviteeIDStmt: %w", cerr)
		}
	}
	if q.getInvitationsStmt != nil {
		if cerr := q.getInvitationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getInvitationsStmt: %w", cerr)
		}
	}
	if q.getInvitationsByInvitedByIDStmt != nil {
		if cerr := q.getInvitationsByInvitedByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getInvitationsByInvitedByIDStmt: %w", cerr)
		}
	}
	if q.getInvitationsPaginatedStmt != nil {
		if cerr := q.getInvitationsPaginatedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getInvitationsPaginatedStmt: %w", cerr)
		}
	}
	if q.setRewardReceivedStmt != nil {
		if cerr := q.setRewardReceivedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setRewardReceivedStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                 DBTX
	tx                                 *sql.Tx
	acceptInvitationByInviteeEmailStmt *sql.Stmt
	createInvitationStmt               *sql.Stmt
	getInvitationByInviteeEmailStmt    *sql.Stmt
	getInvitationByInviteeIDStmt       *sql.Stmt
	getInvitationsStmt                 *sql.Stmt
	getInvitationsByInvitedByIDStmt    *sql.Stmt
	getInvitationsPaginatedStmt        *sql.Stmt
	setRewardReceivedStmt              *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                 tx,
		tx:                                 tx,
		acceptInvitationByInviteeEmailStmt: q.acceptInvitationByInviteeEmailStmt,
		createInvitationStmt:               q.createInvitationStmt,
		getInvitationByInviteeEmailStmt:    q.getInvitationByInviteeEmailStmt,
		getInvitationByInviteeIDStmt:       q.getInvitationByInviteeIDStmt,
		getInvitationsStmt:                 q.getInvitationsStmt,
		getInvitationsByInvitedByIDStmt:    q.getInvitationsByInvitedByIDStmt,
		getInvitationsPaginatedStmt:        q.getInvitationsPaginatedStmt,
		setRewardReceivedStmt:              q.setRewardReceivedStmt,
	}
}
