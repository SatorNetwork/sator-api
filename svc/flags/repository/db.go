// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0

package repository

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createFlagStmt, err = db.PrepareContext(ctx, createFlag); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFlag: %w", err)
	}
	if q.getFlagByKeyStmt, err = db.PrepareContext(ctx, getFlagByKey); err != nil {
		return nil, fmt.Errorf("error preparing query GetFlagByKey: %w", err)
	}
	if q.getFlagsStmt, err = db.PrepareContext(ctx, getFlags); err != nil {
		return nil, fmt.Errorf("error preparing query GetFlags: %w", err)
	}
	if q.updateFlagStmt, err = db.PrepareContext(ctx, updateFlag); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateFlag: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createFlagStmt != nil {
		if cerr := q.createFlagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFlagStmt: %w", cerr)
		}
	}
	if q.getFlagByKeyStmt != nil {
		if cerr := q.getFlagByKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFlagByKeyStmt: %w", cerr)
		}
	}
	if q.getFlagsStmt != nil {
		if cerr := q.getFlagsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFlagsStmt: %w", cerr)
		}
	}
	if q.updateFlagStmt != nil {
		if cerr := q.updateFlagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateFlagStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db               DBTX
	tx               *sql.Tx
	createFlagStmt   *sql.Stmt
	getFlagByKeyStmt *sql.Stmt
	getFlagsStmt     *sql.Stmt
	updateFlagStmt   *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:               tx,
		tx:               tx,
		createFlagStmt:   q.createFlagStmt,
		getFlagByKeyStmt: q.getFlagByKeyStmt,
		getFlagsStmt:     q.getFlagsStmt,
		updateFlagStmt:   q.updateFlagStmt,
	}
}
