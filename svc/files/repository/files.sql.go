// Code generated by sqlc. DO NOT EDIT.
// source: files.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const addFile = `-- name: AddFile :one
INSERT INTO files (id, file_name, file_path, file_url)
VALUES ($1, $2, $3, $4)
    RETURNING id, file_name, file_path, file_url, created_at
`

type AddFileParams struct {
	ID       uuid.UUID `json:"id"`
	FileName string    `json:"file_name"`
	FilePath string    `json:"file_path"`
	FileUrl  string    `json:"file_url"`
}

func (q *Queries) AddFile(ctx context.Context, arg AddFileParams) (File, error) {
	row := q.queryRow(ctx, q.addFileStmt, addFile,
		arg.ID,
		arg.FileName,
		arg.FilePath,
		arg.FileUrl,
	)
	var i File
	err := row.Scan(
		&i.ID,
		&i.FileName,
		&i.FilePath,
		&i.FileUrl,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFileByID = `-- name: DeleteFileByID :exec
DELETE FROM files
WHERE id = $1
`

func (q *Queries) DeleteFileByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteFileByIDStmt, deleteFileByID, id)
	return err
}

const getFileByID = `-- name: GetFileByID :one
SELECT id, file_name, file_path, file_url, created_at FROM files
WHERE id = $1
    LIMIT 1
`

func (q *Queries) GetFileByID(ctx context.Context, id uuid.UUID) (File, error) {
	row := q.queryRow(ctx, q.getFileByIDStmt, getFileByID, id)
	var i File
	err := row.Scan(
		&i.ID,
		&i.FileName,
		&i.FilePath,
		&i.FileUrl,
		&i.CreatedAt,
	)
	return i, err
}

const getFilesByIDs = `-- name: GetFilesByIDs :many
SELECT id, file_name, file_path, file_url, created_at FROM files
WHERE id = ANY($1::uuid[])
ORDER BY created_at DESC
`

func (q *Queries) GetFilesByIDs(ctx context.Context, ids []uuid.UUID) ([]File, error) {
	rows, err := q.query(ctx, q.getFilesByIDsStmt, getFilesByIDs, pq.Array(ids))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.FileName,
			&i.FilePath,
			&i.FileUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFilesList = `-- name: GetFilesList :many
SELECT id, file_name, file_path, file_url, created_at FROM files
LIMIT $1 OFFSET $2
`

type GetFilesListParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetFilesList(ctx context.Context, arg GetFilesListParams) ([]File, error) {
	rows, err := q.query(ctx, q.getFilesListStmt, getFilesList, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.FileName,
			&i.FilePath,
			&i.FileUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
