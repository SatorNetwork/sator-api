// Code generated by sqlc. DO NOT EDIT.
// source: relations.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const addNFTRelation = `-- name: AddNFTRelation :exec
INSERT INTO nft_relations (nft_item_id, relation_id)
VALUES ($1, $2)
`

type AddNFTRelationParams struct {
	NFTItemID  uuid.UUID `json:"nft_item_id"`
	RelationID uuid.UUID `json:"relation_id"`
}

func (q *Queries) AddNFTRelation(ctx context.Context, arg AddNFTRelationParams) error {
	_, err := q.exec(ctx, q.addNFTRelationStmt, addNFTRelation, arg.NFTItemID, arg.RelationID)
	return err
}

const deleteNFTRelation = `-- name: DeleteNFTRelation :exec
DELETE FROM nft_relations
WHERE nft_item_id = $1
AND relation_id = $2
`

type DeleteNFTRelationParams struct {
	NFTItemID  uuid.UUID `json:"nft_item_id"`
	RelationID uuid.UUID `json:"relation_id"`
}

func (q *Queries) DeleteNFTRelation(ctx context.Context, arg DeleteNFTRelationParams) error {
	_, err := q.exec(ctx, q.deleteNFTRelationStmt, deleteNFTRelation, arg.NFTItemID, arg.RelationID)
	return err
}

const doesRelationIDHasRelationNFT = `-- name: DoesRelationIDHasRelationNFT :one
WITH minted_nft_items AS (
    SELECT COUNT(user_id)::INT as minted, nft_item_id
    FROM nft_owners
    GROUP BY nft_owners.nft_item_id
)
SELECT EXISTS(
    SELECT nft_relations.nft_item_id
    FROM nft_relations
        LEFT JOIN minted_nft_items ON minted_nft_items.nft_item_id = nft_relations.nft_item_id
    WHERE relation_id = $1
)
`

func (q *Queries) DoesRelationIDHasRelationNFT(ctx context.Context, relationID uuid.UUID) (bool, error) {
	row := q.queryRow(ctx, q.doesRelationIDHasRelationNFTStmt, doesRelationIDHasRelationNFT, relationID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
