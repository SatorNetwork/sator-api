// Code generated by sqlc. DO NOT EDIT.
// source: categories.sql

package repository

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addNFTCategory = `-- name: AddNFTCategory :one
INSERT INTO nft_categories (title, sort)
VALUES ($1, $2)
RETURNING id, title, sort, main
`

type AddNFTCategoryParams struct {
	Title string `json:"title"`
	Sort  int64  `json:"sort"`
}

func (q *Queries) AddNFTCategory(ctx context.Context, arg AddNFTCategoryParams) (NFTCategory, error) {
	row := q.queryRow(ctx, q.addNFTCategoryStmt, addNFTCategory, arg.Title, arg.Sort)
	var i NFTCategory
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Sort,
		&i.Main,
	)
	return i, err
}

const deleteNFTCategoryByID = `-- name: DeleteNFTCategoryByID :exec
DELETE FROM nft_categories
WHERE id = $1
`

func (q *Queries) DeleteNFTCategoryByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteNFTCategoryByIDStmt, deleteNFTCategoryByID, id)
	return err
}

const getMainNFTCategory = `-- name: GetMainNFTCategory :one
SELECT id, title, sort, main FROM nft_categories
WHERE main = TRUE
LIMIT 1
`

func (q *Queries) GetMainNFTCategory(ctx context.Context) (NFTCategory, error) {
	row := q.queryRow(ctx, q.getMainNFTCategoryStmt, getMainNFTCategory)
	var i NFTCategory
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Sort,
		&i.Main,
	)
	return i, err
}

const getNFTCategoriesList = `-- name: GetNFTCategoriesList :many
SELECT id, title, sort, main FROM nft_categories
ORDER BY sort ASC
`

func (q *Queries) GetNFTCategoriesList(ctx context.Context) ([]NFTCategory, error) {
	rows, err := q.query(ctx, q.getNFTCategoriesListStmt, getNFTCategoriesList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NFTCategory
	for rows.Next() {
		var i NFTCategory
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Sort,
			&i.Main,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNFTCategoryByID = `-- name: GetNFTCategoryByID :one
SELECT id, title, sort, main FROM nft_categories
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetNFTCategoryByID(ctx context.Context, id uuid.UUID) (NFTCategory, error) {
	row := q.queryRow(ctx, q.getNFTCategoryByIDStmt, getNFTCategoryByID, id)
	var i NFTCategory
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Sort,
		&i.Main,
	)
	return i, err
}

const resetMainNFTCategory = `-- name: ResetMainNFTCategory :exec
UPDATE nft_categories SET main = FALSE
WHERE main = TRUE
`

func (q *Queries) ResetMainNFTCategory(ctx context.Context) error {
	_, err := q.exec(ctx, q.resetMainNFTCategoryStmt, resetMainNFTCategory)
	return err
}

const updateNFTCategory = `-- name: UpdateNFTCategory :one
UPDATE nft_categories SET title = $1, main = $2
WHERE id = $3
RETURNING id, title, sort, main
`

type UpdateNFTCategoryParams struct {
	Title string       `json:"title"`
	Main  sql.NullBool `json:"main"`
	ID    uuid.UUID    `json:"id"`
}

func (q *Queries) UpdateNFTCategory(ctx context.Context, arg UpdateNFTCategoryParams) (NFTCategory, error) {
	row := q.queryRow(ctx, q.updateNFTCategoryStmt, updateNFTCategory, arg.Title, arg.Main, arg.ID)
	var i NFTCategory
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Sort,
		&i.Main,
	)
	return i, err
}
