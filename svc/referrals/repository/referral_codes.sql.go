// Code generated by sqlc. DO NOT EDIT.
// source: referral_codes.sql

package repository

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addReferralCodeData = `-- name: AddReferralCodeData :one
INSERT INTO referral_codes (
        id,
        title,
        code,
        referral_link,
        is_personal,
        user_id
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6
    ) RETURNING id, title, code, referral_link, is_personal, user_id, created_at
`

type AddReferralCodeDataParams struct {
	ID           uuid.UUID      `json:"id"`
	Title        sql.NullString `json:"title"`
	Code         string         `json:"code"`
	ReferralLink sql.NullString `json:"referral_link"`
	IsPersonal   sql.NullBool   `json:"is_personal"`
	UserID       uuid.UUID      `json:"user_id"`
}

func (q *Queries) AddReferralCodeData(ctx context.Context, arg AddReferralCodeDataParams) (ReferralCode, error) {
	row := q.queryRow(ctx, q.addReferralCodeDataStmt, addReferralCodeData,
		arg.ID,
		arg.Title,
		arg.Code,
		arg.ReferralLink,
		arg.IsPersonal,
		arg.UserID,
	)
	var i ReferralCode
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Code,
		&i.ReferralLink,
		&i.IsPersonal,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteReferralCodeDataByID = `-- name: DeleteReferralCodeDataByID :exec
DELETE FROM referral_codes
WHERE id = $1
`

func (q *Queries) DeleteReferralCodeDataByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteReferralCodeDataByIDStmt, deleteReferralCodeDataByID, id)
	return err
}

const getReferralCodeDataByCode = `-- name: GetReferralCodeDataByCode :one
SELECT id, title, code, referral_link, is_personal, user_id, created_at
FROM referral_codes
WHERE code = $1 
LIMIT 1
`

func (q *Queries) GetReferralCodeDataByCode(ctx context.Context, code string) (ReferralCode, error) {
	row := q.queryRow(ctx, q.getReferralCodeDataByCodeStmt, getReferralCodeDataByCode, code)
	var i ReferralCode
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Code,
		&i.ReferralLink,
		&i.IsPersonal,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const getReferralCodeDataByUserID = `-- name: GetReferralCodeDataByUserID :many
SELECT id, title, code, referral_link, is_personal, user_id, created_at
FROM referral_codes
WHERE user_id = $1
`

func (q *Queries) GetReferralCodeDataByUserID(ctx context.Context, userID uuid.UUID) ([]ReferralCode, error) {
	rows, err := q.query(ctx, q.getReferralCodeDataByUserIDStmt, getReferralCodeDataByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReferralCode
	for rows.Next() {
		var i ReferralCode
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Code,
			&i.ReferralLink,
			&i.IsPersonal,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReferralCodesDataList = `-- name: GetReferralCodesDataList :many
SELECT id, title, code, referral_link, is_personal, user_id, created_at
FROM referral_codes
ORDER BY created_at DESC
    LIMIT $1 OFFSET $2
`

type GetReferralCodesDataListParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetReferralCodesDataList(ctx context.Context, arg GetReferralCodesDataListParams) ([]ReferralCode, error) {
	rows, err := q.query(ctx, q.getReferralCodesDataListStmt, getReferralCodesDataList, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReferralCode
	for rows.Next() {
		var i ReferralCode
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Code,
			&i.ReferralLink,
			&i.IsPersonal,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReferralCodeData = `-- name: UpdateReferralCodeData :exec
UPDATE referral_codes
SET title = $1,
    code = $2,
    referral_link = $3,
    is_personal = $4,
    user_id = $5
WHERE id = $6
`

type UpdateReferralCodeDataParams struct {
	Title        sql.NullString `json:"title"`
	Code         string         `json:"code"`
	ReferralLink sql.NullString `json:"referral_link"`
	IsPersonal   sql.NullBool   `json:"is_personal"`
	UserID       uuid.UUID      `json:"user_id"`
	ID           uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateReferralCodeData(ctx context.Context, arg UpdateReferralCodeDataParams) error {
	_, err := q.exec(ctx, q.updateReferralCodeDataStmt, updateReferralCodeData,
		arg.Title,
		arg.Code,
		arg.ReferralLink,
		arg.IsPersonal,
		arg.UserID,
		arg.ID,
	)
	return err
}
