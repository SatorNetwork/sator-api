// Code generated by sqlc. DO NOT EDIT.
// source: solana_errors.sql

package repository

import (
	"context"
)

const getErrorCounter = `-- name: GetErrorCounter :one
SELECT provider_name, error_message, counter, updated_at, created_at FROM solana_errors
WHERE provider_name = $1 AND error_message = $2
`

type GetErrorCounterParams struct {
	ProviderName string `json:"provider_name"`
	ErrorMessage string `json:"error_message"`
}

func (q *Queries) GetErrorCounter(ctx context.Context, arg GetErrorCounterParams) (SolanaError, error) {
	row := q.queryRow(ctx, q.getErrorCounterStmt, getErrorCounter, arg.ProviderName, arg.ErrorMessage)
	var i SolanaError
	err := row.Scan(
		&i.ProviderName,
		&i.ErrorMessage,
		&i.Counter,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const registerProviderError = `-- name: RegisterProviderError :exec
INSERT INTO solana_errors (
    provider_name,
    error_message,
    counter
)
VALUES (
    $1,
    $2,
    1
) ON CONFLICT (provider_name, error_message) DO UPDATE
SET
    counter = counter + 1
`

type RegisterProviderErrorParams struct {
	ProviderName string `json:"provider_name"`
	ErrorMessage string `json:"error_message"`
}

func (q *Queries) RegisterProviderError(ctx context.Context, arg RegisterProviderErrorParams) error {
	_, err := q.exec(ctx, q.registerProviderErrorStmt, registerProviderError, arg.ProviderName, arg.ErrorMessage)
	return err
}
