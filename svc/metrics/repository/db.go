// Code generated by sqlc. DO NOT EDIT.

package repository

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.getErrorCounterStmt, err = db.PrepareContext(ctx, getErrorCounter); err != nil {
		return nil, fmt.Errorf("error preparing query GetErrorCounter: %w", err)
	}
	if q.getProviderMetricByNameStmt, err = db.PrepareContext(ctx, getProviderMetricByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetProviderMetricByName: %w", err)
	}
	if q.registerProviderErrorStmt, err = db.PrepareContext(ctx, registerProviderError); err != nil {
		return nil, fmt.Errorf("error preparing query RegisterProviderError: %w", err)
	}
	if q.upsertProviderMetricsStmt, err = db.PrepareContext(ctx, upsertProviderMetrics); err != nil {
		return nil, fmt.Errorf("error preparing query UpsertProviderMetrics: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.getErrorCounterStmt != nil {
		if cerr := q.getErrorCounterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getErrorCounterStmt: %w", cerr)
		}
	}
	if q.getProviderMetricByNameStmt != nil {
		if cerr := q.getProviderMetricByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProviderMetricByNameStmt: %w", cerr)
		}
	}
	if q.registerProviderErrorStmt != nil {
		if cerr := q.registerProviderErrorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing registerProviderErrorStmt: %w", cerr)
		}
	}
	if q.upsertProviderMetricsStmt != nil {
		if cerr := q.upsertProviderMetricsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing upsertProviderMetricsStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                          DBTX
	tx                          *sql.Tx
	getErrorCounterStmt         *sql.Stmt
	getProviderMetricByNameStmt *sql.Stmt
	registerProviderErrorStmt   *sql.Stmt
	upsertProviderMetricsStmt   *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                          tx,
		tx:                          tx,
		getErrorCounterStmt:         q.getErrorCounterStmt,
		getProviderMetricByNameStmt: q.getProviderMetricByNameStmt,
		registerProviderErrorStmt:   q.registerProviderErrorStmt,
		upsertProviderMetricsStmt:   q.upsertProviderMetricsStmt,
	}
}
