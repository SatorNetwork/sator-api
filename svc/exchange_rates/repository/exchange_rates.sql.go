// Code generated by sqlc. DO NOT EDIT.
// source: exchange_rates.sql

package repository

import (
	"context"
)

const getExchangeRateByAssetType = `-- name: GetExchangeRateByAssetType :one
SELECT asset_type, usd_price, updated_at, created_at
FROM exchange_rates
WHERE asset_type = $1
`

func (q *Queries) GetExchangeRateByAssetType(ctx context.Context, assetType string) (ExchangeRate, error) {
	row := q.queryRow(ctx, q.getExchangeRateByAssetTypeStmt, getExchangeRateByAssetType, assetType)
	var i ExchangeRate
	err := row.Scan(
		&i.AssetType,
		&i.UsdPrice,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const upsertExchangeRate = `-- name: UpsertExchangeRate :exec
INSERT INTO exchange_rates (
    asset_type,
    usd_price
)
VALUES (
   $1,
   $2
) ON CONFLICT (asset_type) DO
UPDATE
SET usd_price = $2
`

type UpsertExchangeRateParams struct {
	AssetType string  `json:"asset_type"`
	UsdPrice  float64 `json:"usd_price"`
}

func (q *Queries) UpsertExchangeRate(ctx context.Context, arg UpsertExchangeRateParams) error {
	_, err := q.exec(ctx, q.upsertExchangeRateStmt, upsertExchangeRate, arg.AssetType, arg.UsdPrice)
	return err
}
