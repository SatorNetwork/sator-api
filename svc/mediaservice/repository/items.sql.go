// Code generated by sqlc. DO NOT EDIT.
// source: items.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const addItem = `-- name: AddItem :one
INSERT INTO items (id, filename, filepath)
VALUES ($1, $2, $3)
    RETURNING id, filename, filepath, created_at
`

type AddItemParams struct {
	ID       uuid.UUID `json:"id"`
	Filename string    `json:"filename"`
	Filepath string    `json:"filepath"`
}

func (q *Queries) AddItem(ctx context.Context, arg AddItemParams) (Item, error) {
	row := q.queryRow(ctx, q.addItemStmt, addItem, arg.ID, arg.Filename, arg.Filepath)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Filename,
		&i.Filepath,
		&i.CreatedAt,
	)
	return i, err
}

const deleteItemByID = `-- name: DeleteItemByID :exec
DELETE FROM items
WHERE id = $1
`

func (q *Queries) DeleteItemByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteItemByIDStmt, deleteItemByID, id)
	return err
}

const getItemByID = `-- name: GetItemByID :one
SELECT id, filename, filepath, created_at FROM items
WHERE id = $1
    LIMIT 1
`

func (q *Queries) GetItemByID(ctx context.Context, id uuid.UUID) (Item, error) {
	row := q.queryRow(ctx, q.getItemByIDStmt, getItemByID, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Filename,
		&i.Filepath,
		&i.CreatedAt,
	)
	return i, err
}

const getItemsList = `-- name: GetItemsList :many
SELECT id, filename, filepath, created_at FROM items
LIMIT $1 OFFSET $2
`

type GetItemsListParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetItemsList(ctx context.Context, arg GetItemsListParams) ([]Item, error) {
	rows, err := q.query(ctx, q.getItemsListStmt, getItemsList, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.Filename,
			&i.Filepath,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
