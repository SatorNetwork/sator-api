// Code generated by sqlc. DO NOT EDIT.
// source: images.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const addImage = `-- name: AddImage :one
INSERT INTO images (id, file_name, file_path, file_url)
VALUES ($1, $2, $3, $4)
    RETURNING id, file_name, file_path, file_url, created_at
`

type AddImageParams struct {
	ID       uuid.UUID `json:"id"`
	FileName string    `json:"file_name"`
	FilePath string    `json:"file_path"`
	FileUrl  string    `json:"file_url"`
}

func (q *Queries) AddImage(ctx context.Context, arg AddImageParams) (Image, error) {
	row := q.queryRow(ctx, q.addImageStmt, addImage,
		arg.ID,
		arg.FileName,
		arg.FilePath,
		arg.FileUrl,
	)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.FileName,
		&i.FilePath,
		&i.FileUrl,
		&i.CreatedAt,
	)
	return i, err
}

const deleteImageByID = `-- name: DeleteImageByID :exec
DELETE FROM images
WHERE id = $1
`

func (q *Queries) DeleteImageByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteImageByIDStmt, deleteImageByID, id)
	return err
}

const getImageByID = `-- name: GetImageByID :one
SELECT id, file_name, file_path, file_url, created_at FROM images
WHERE id = $1
    LIMIT 1
`

func (q *Queries) GetImageByID(ctx context.Context, id uuid.UUID) (Image, error) {
	row := q.queryRow(ctx, q.getImageByIDStmt, getImageByID, id)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.FileName,
		&i.FilePath,
		&i.FileUrl,
		&i.CreatedAt,
	)
	return i, err
}

const getImagesList = `-- name: GetImagesList :many
SELECT id, file_name, file_path, file_url, created_at FROM images
LIMIT $1 OFFSET $2
`

type GetImagesListParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetImagesList(ctx context.Context, arg GetImagesListParams) ([]Image, error) {
	rows, err := q.query(ctx, q.getImagesListStmt, getImagesList, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.FileName,
			&i.FilePath,
			&i.FileUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
