// Code generated by sqlc. DO NOT EDIT.

package repository

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addImageStmt, err = db.PrepareContext(ctx, addImage); err != nil {
		return nil, fmt.Errorf("error preparing query AddImage: %w", err)
	}
	if q.deleteImageByIDStmt, err = db.PrepareContext(ctx, deleteImageByID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteImageByID: %w", err)
	}
	if q.getImageByIDStmt, err = db.PrepareContext(ctx, getImageByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetImageByID: %w", err)
	}
	if q.getImagesListStmt, err = db.PrepareContext(ctx, getImagesList); err != nil {
		return nil, fmt.Errorf("error preparing query GetImagesList: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addImageStmt != nil {
		if cerr := q.addImageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addImageStmt: %w", cerr)
		}
	}
	if q.deleteImageByIDStmt != nil {
		if cerr := q.deleteImageByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteImageByIDStmt: %w", cerr)
		}
	}
	if q.getImageByIDStmt != nil {
		if cerr := q.getImageByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getImageByIDStmt: %w", cerr)
		}
	}
	if q.getImagesListStmt != nil {
		if cerr := q.getImagesListStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getImagesListStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                  DBTX
	tx                  *sql.Tx
	addImageStmt        *sql.Stmt
	deleteImageByIDStmt *sql.Stmt
	getImageByIDStmt    *sql.Stmt
	getImagesListStmt   *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                  tx,
		tx:                  tx,
		addImageStmt:        q.addImageStmt,
		deleteImageByIDStmt: q.deleteImageByIDStmt,
		getImageByIDStmt:    q.getImageByIDStmt,
		getImagesListStmt:   q.getImagesListStmt,
	}
}
