// Code generated by sqlc. DO NOT EDIT.
// source: question-options.sql

package repository

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addQuestionOption = `-- name: AddQuestionOption :one
INSERT INTO question_options (question_id, question_option, is_correct)
VALUES ($1, $2, $3) RETURNING id, question_id, question_option, is_correct, updated_at, created_at
`

type AddQuestionOptionParams struct {
	QuestionID     uuid.UUID    `json:"question_id"`
	QuestionOption string       `json:"question_option"`
	IsCorrect      sql.NullBool `json:"is_correct"`
}

func (q *Queries) AddQuestionOption(ctx context.Context, arg AddQuestionOptionParams) (QuestionOption, error) {
	row := q.queryRow(ctx, q.addQuestionOptionStmt, addQuestionOption, arg.QuestionID, arg.QuestionOption, arg.IsCorrect)
	var i QuestionOption
	err := row.Scan(
		&i.ID,
		&i.QuestionID,
		&i.QuestionOption,
		&i.IsCorrect,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const checkAnswer = `-- name: CheckAnswer :one
SELECT is_correct
FROM question_options
WHERE id = $1 AND question_id = $2
    LIMIT 1
`

type CheckAnswerParams struct {
	ID         uuid.UUID `json:"id"`
	QuestionID uuid.UUID `json:"question_id"`
}

func (q *Queries) CheckAnswer(ctx context.Context, arg CheckAnswerParams) (sql.NullBool, error) {
	row := q.queryRow(ctx, q.checkAnswerStmt, checkAnswer, arg.ID, arg.QuestionID)
	var is_correct sql.NullBool
	err := row.Scan(&is_correct)
	return is_correct, err
}

const getAnswerByID = `-- name: GetAnswerByID :one
SELECT id, question_id, question_option, is_correct, updated_at, created_at
FROM question_options
WHERE id = $1
    LIMIT 1
`

func (q *Queries) GetAnswerByID(ctx context.Context, id uuid.UUID) (QuestionOption, error) {
	row := q.queryRow(ctx, q.getAnswerByIDStmt, getAnswerByID, id)
	var i QuestionOption
	err := row.Scan(
		&i.ID,
		&i.QuestionID,
		&i.QuestionOption,
		&i.IsCorrect,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getAnswersByQuestionID = `-- name: GetAnswersByQuestionID :many
SELECT id, question_id, question_option, is_correct, updated_at, created_at
FROM question_options
WHERE question_id = $1
    LIMIT 1
`

func (q *Queries) GetAnswersByQuestionID(ctx context.Context, questionID uuid.UUID) ([]QuestionOption, error) {
	rows, err := q.query(ctx, q.getAnswersByQuestionIDStmt, getAnswersByQuestionID, questionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []QuestionOption
	for rows.Next() {
		var i QuestionOption
		if err := rows.Scan(
			&i.ID,
			&i.QuestionID,
			&i.QuestionOption,
			&i.IsCorrect,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
