// Code generated by sqlc. DO NOT EDIT.
// source: puzzle_games.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createPuzzleGame = `-- name: CreatePuzzleGame :one
INSERT INTO puzzle_games (
    episode_id,
    prize_pool,
    parts_x,
    parts_y
)
VALUES (
    $1,
    $2,
    $3,
    $4
) RETURNING id, episode_id, prize_pool, parts_x, parts_y, updated_at, created_at
`

type CreatePuzzleGameParams struct {
	EpisodeID uuid.UUID `json:"episode_id"`
	PrizePool float64   `json:"prize_pool"`
	PartsX    int32     `json:"parts_x"`
	PartsY    int32     `json:"parts_y"`
}

func (q *Queries) CreatePuzzleGame(ctx context.Context, arg CreatePuzzleGameParams) (PuzzleGame, error) {
	row := q.queryRow(ctx, q.createPuzzleGameStmt, createPuzzleGame,
		arg.EpisodeID,
		arg.PrizePool,
		arg.PartsX,
		arg.PartsY,
	)
	var i PuzzleGame
	err := row.Scan(
		&i.ID,
		&i.EpisodeID,
		&i.PrizePool,
		&i.PartsX,
		&i.PartsY,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getPuzzleGameByID = `-- name: GetPuzzleGameByID :one
SELECT id, episode_id, prize_pool, parts_x, parts_y, updated_at, created_at
FROM puzzle_games
WHERE id = $1
`

func (q *Queries) GetPuzzleGameByID(ctx context.Context, id uuid.UUID) (PuzzleGame, error) {
	row := q.queryRow(ctx, q.getPuzzleGameByIDStmt, getPuzzleGameByID, id)
	var i PuzzleGame
	err := row.Scan(
		&i.ID,
		&i.EpisodeID,
		&i.PrizePool,
		&i.PartsX,
		&i.PartsY,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updatePuzzleGame = `-- name: UpdatePuzzleGame :one
UPDATE puzzle_games
SET
    episode_id = $1,
    prize_pool = $2,
    parts_x = $3,
    parts_y = $4
WHERE id = $5
   RETURNING id, episode_id, prize_pool, parts_x, parts_y, updated_at, created_at
`

type UpdatePuzzleGameParams struct {
	EpisodeID uuid.UUID `json:"episode_id"`
	PrizePool float64   `json:"prize_pool"`
	PartsX    int32     `json:"parts_x"`
	PartsY    int32     `json:"parts_y"`
	ID        uuid.UUID `json:"id"`
}

func (q *Queries) UpdatePuzzleGame(ctx context.Context, arg UpdatePuzzleGameParams) (PuzzleGame, error) {
	row := q.queryRow(ctx, q.updatePuzzleGameStmt, updatePuzzleGame,
		arg.EpisodeID,
		arg.PrizePool,
		arg.PartsX,
		arg.PartsY,
		arg.ID,
	)
	var i PuzzleGame
	err := row.Scan(
		&i.ID,
		&i.EpisodeID,
		&i.PrizePool,
		&i.PartsX,
		&i.PartsY,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
