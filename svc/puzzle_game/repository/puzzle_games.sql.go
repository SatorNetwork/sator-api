// Code generated by sqlc. DO NOT EDIT.
// source: puzzle_games.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createPuzzleGame = `-- name: CreatePuzzleGame :one
INSERT INTO puzzle_games (
    episode_id,
    prize_pool,
    parts_x,
    parts_y
)
VALUES (
    $1,
    $2,
    $3,
    $4
) RETURNING id, episode_id, prize_pool, parts_x, parts_y, updated_at, created_at
`

type CreatePuzzleGameParams struct {
	EpisodeID uuid.UUID `json:"episode_id"`
	PrizePool float64   `json:"prize_pool"`
	PartsX    int32     `json:"parts_x"`
	PartsY    int32     `json:"parts_y"`
}

func (q *Queries) CreatePuzzleGame(ctx context.Context, arg CreatePuzzleGameParams) (PuzzleGame, error) {
	row := q.queryRow(ctx, q.createPuzzleGameStmt, createPuzzleGame,
		arg.EpisodeID,
		arg.PrizePool,
		arg.PartsX,
		arg.PartsY,
	)
	var i PuzzleGame
	err := row.Scan(
		&i.ID,
		&i.EpisodeID,
		&i.PrizePool,
		&i.PartsX,
		&i.PartsY,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getPuzzleGameByEpisodeID = `-- name: GetPuzzleGameByEpisodeID :one
SELECT id, episode_id, prize_pool, parts_x, parts_y, updated_at, created_at
FROM puzzle_games
WHERE episode_id = $1
`

func (q *Queries) GetPuzzleGameByEpisodeID(ctx context.Context, episodeID uuid.UUID) (PuzzleGame, error) {
	row := q.queryRow(ctx, q.getPuzzleGameByEpisodeIDStmt, getPuzzleGameByEpisodeID, episodeID)
	var i PuzzleGame
	err := row.Scan(
		&i.ID,
		&i.EpisodeID,
		&i.PrizePool,
		&i.PartsX,
		&i.PartsY,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getPuzzleGameByID = `-- name: GetPuzzleGameByID :one
SELECT id, episode_id, prize_pool, parts_x, parts_y, updated_at, created_at
FROM puzzle_games
WHERE id = $1
`

func (q *Queries) GetPuzzleGameByID(ctx context.Context, id uuid.UUID) (PuzzleGame, error) {
	row := q.queryRow(ctx, q.getPuzzleGameByIDStmt, getPuzzleGameByID, id)
	var i PuzzleGame
	err := row.Scan(
		&i.ID,
		&i.EpisodeID,
		&i.PrizePool,
		&i.PartsX,
		&i.PartsY,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const linkImageToPuzzleGame = `-- name: LinkImageToPuzzleGame :exec
INSERT INTO puzzle_games_to_images (
    file_id,
    puzzle_game_id
)
VALUES (
    $1,
    $2
)
`

type LinkImageToPuzzleGameParams struct {
	FileID       uuid.UUID `json:"file_id"`
	PuzzleGameID uuid.UUID `json:"puzzle_game_id"`
}

func (q *Queries) LinkImageToPuzzleGame(ctx context.Context, arg LinkImageToPuzzleGameParams) error {
	_, err := q.exec(ctx, q.linkImageToPuzzleGameStmt, linkImageToPuzzleGame, arg.FileID, arg.PuzzleGameID)
	return err
}

const unlinkImageFromPuzzleGame = `-- name: UnlinkImageFromPuzzleGame :exec
DELETE FROM puzzle_games_to_images
WHERE file_id = $1 AND puzzle_game_id = $2
`

type UnlinkImageFromPuzzleGameParams struct {
	FileID       uuid.UUID `json:"file_id"`
	PuzzleGameID uuid.UUID `json:"puzzle_game_id"`
}

func (q *Queries) UnlinkImageFromPuzzleGame(ctx context.Context, arg UnlinkImageFromPuzzleGameParams) error {
	_, err := q.exec(ctx, q.unlinkImageFromPuzzleGameStmt, unlinkImageFromPuzzleGame, arg.FileID, arg.PuzzleGameID)
	return err
}

const updatePuzzleGame = `-- name: UpdatePuzzleGame :one
UPDATE puzzle_games
SET
    prize_pool = $1,
    parts_x = $2,
    parts_y = $3
WHERE id = $4
   RETURNING id, episode_id, prize_pool, parts_x, parts_y, updated_at, created_at
`

type UpdatePuzzleGameParams struct {
	PrizePool float64   `json:"prize_pool"`
	PartsX    int32     `json:"parts_x"`
	PartsY    int32     `json:"parts_y"`
	ID        uuid.UUID `json:"id"`
}

func (q *Queries) UpdatePuzzleGame(ctx context.Context, arg UpdatePuzzleGameParams) (PuzzleGame, error) {
	row := q.queryRow(ctx, q.updatePuzzleGameStmt, updatePuzzleGame,
		arg.PrizePool,
		arg.PartsX,
		arg.PartsY,
		arg.ID,
	)
	var i PuzzleGame
	err := row.Scan(
		&i.ID,
		&i.EpisodeID,
		&i.PrizePool,
		&i.PartsX,
		&i.PartsY,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
