// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: rewards.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const getUserRewards = `-- name: GetUserRewards :one
WITH deposited AS (
    SELECT user_id,  SUM(amount)::DOUBLE PRECISION AS amount
    FROM unity_game_rewards
    WHERE operation_type = 1
    GROUP BY user_id
), withdrawn AS (
    SELECT user_id,  SUM(amount)::DOUBLE PRECISION AS amount
    FROM unity_game_rewards
    WHERE operation_type = 2
    GROUP BY user_id
)
SELECT (deposited.amount - withdrawn.amount)::DOUBLE PRECISION AS total_reward_amount
FROM unity_game_players
LEFT JOIN deposited ON unity_game_players.user_id = deposited.user_id
LEFT JOIN withdrawn ON unity_game_players.user_id = withdrawn.user_id
WHERE unity_game_players.user_id = $1
`

func (q *Queries) GetUserRewards(ctx context.Context, userID uuid.UUID) (float64, error) {
	row := q.queryRow(ctx, q.getUserRewardsStmt, getUserRewards, userID)
	var total_reward_amount float64
	err := row.Scan(&total_reward_amount)
	return total_reward_amount, err
}

const getUserRewardsDeposited = `-- name: GetUserRewardsDeposited :one
SELECT SUM(amount)::DOUBLE PRECISION AS total_reward_amount
FROM unity_game_rewards
WHERE user_id = $1
AND operation_type = 1
`

func (q *Queries) GetUserRewardsDeposited(ctx context.Context, userID uuid.UUID) (float64, error) {
	row := q.queryRow(ctx, q.getUserRewardsDepositedStmt, getUserRewardsDeposited, userID)
	var total_reward_amount float64
	err := row.Scan(&total_reward_amount)
	return total_reward_amount, err
}

const getUserRewardsWithdrawn = `-- name: GetUserRewardsWithdrawn :one
SELECT SUM(amount)::DOUBLE PRECISION AS total_reward_amount
FROM unity_game_rewards
WHERE user_id = $1
AND operation_type = 2
`

func (q *Queries) GetUserRewardsWithdrawn(ctx context.Context, userID uuid.UUID) (float64, error) {
	row := q.queryRow(ctx, q.getUserRewardsWithdrawnStmt, getUserRewardsWithdrawn, userID)
	var total_reward_amount float64
	err := row.Scan(&total_reward_amount)
	return total_reward_amount, err
}

const rewardsDeposit = `-- name: RewardsDeposit :exec
INSERT INTO unity_game_rewards (user_id, relation_id, operation_type, amount)
VALUES ($1, $2, 1, $3)
`

type RewardsDepositParams struct {
	UserID     uuid.UUID     `json:"user_id"`
	RelationID uuid.NullUUID `json:"relation_id"`
	Amount     float64       `json:"amount"`
}

func (q *Queries) RewardsDeposit(ctx context.Context, arg RewardsDepositParams) error {
	_, err := q.exec(ctx, q.rewardsDepositStmt, rewardsDeposit, arg.UserID, arg.RelationID, arg.Amount)
	return err
}

const rewardsWithdraw = `-- name: RewardsWithdraw :exec
INSERT INTO unity_game_rewards (user_id, operation_type, amount)
VALUES ($1, 2, $2)
`

type RewardsWithdrawParams struct {
	UserID uuid.UUID `json:"user_id"`
	Amount float64   `json:"amount"`
}

func (q *Queries) RewardsWithdraw(ctx context.Context, arg RewardsWithdrawParams) error {
	_, err := q.exec(ctx, q.rewardsWithdrawStmt, rewardsWithdraw, arg.UserID, arg.Amount)
	return err
}
