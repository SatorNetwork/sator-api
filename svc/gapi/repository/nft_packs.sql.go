// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: nft_packs.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const addNFTPack = `-- name: AddNFTPack :one
INSERT INTO unity_game_nft_packs ( name, drop_chances, price) VALUES ($1, $2, $3) RETURNING id, drop_chances, price, updated_at, created_at, deleted_at, name
`

type AddNFTPackParams struct {
	Name        string  `json:"name"`
	DropChances []byte  `json:"drop_chances"`
	Price       float64 `json:"price"`
}

func (q *Queries) AddNFTPack(ctx context.Context, arg AddNFTPackParams) (UnityGameNftPack, error) {
	row := q.queryRow(ctx, q.addNFTPackStmt, addNFTPack, arg.Name, arg.DropChances, arg.Price)
	var i UnityGameNftPack
	err := row.Scan(
		&i.ID,
		&i.DropChances,
		&i.Price,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.Name,
	)
	return i, err
}

const deleteNFTPack = `-- name: DeleteNFTPack :exec
DELETE FROM unity_game_nft_packs WHERE id = $1
`

func (q *Queries) DeleteNFTPack(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteNFTPackStmt, deleteNFTPack, id)
	return err
}

const getNFTPack = `-- name: GetNFTPack :one
SELECT id, drop_chances, price, updated_at, created_at, deleted_at, name FROM unity_game_nft_packs WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetNFTPack(ctx context.Context, id uuid.UUID) (UnityGameNftPack, error) {
	row := q.queryRow(ctx, q.getNFTPackStmt, getNFTPack, id)
	var i UnityGameNftPack
	err := row.Scan(
		&i.ID,
		&i.DropChances,
		&i.Price,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.Name,
	)
	return i, err
}

const getNFTPacksList = `-- name: GetNFTPacksList :many
SELECT id, drop_chances, price, updated_at, created_at, deleted_at, name FROM unity_game_nft_packs WHERE deleted_at IS NULL
`

func (q *Queries) GetNFTPacksList(ctx context.Context) ([]UnityGameNftPack, error) {
	rows, err := q.query(ctx, q.getNFTPacksListStmt, getNFTPacksList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UnityGameNftPack
	for rows.Next() {
		var i UnityGameNftPack
		if err := rows.Scan(
			&i.ID,
			&i.DropChances,
			&i.Price,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.DeletedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteNFTPack = `-- name: SoftDeleteNFTPack :exec
UPDATE unity_game_nft_packs SET deleted_at = now() WHERE id = $1
`

func (q *Queries) SoftDeleteNFTPack(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.softDeleteNFTPackStmt, softDeleteNFTPack, id)
	return err
}

const updateNFTPack = `-- name: UpdateNFTPack :one
UPDATE unity_game_nft_packs SET drop_chances = $1, price = $2, name = $3 WHERE id = $4 RETURNING id, drop_chances, price, updated_at, created_at, deleted_at, name
`

type UpdateNFTPackParams struct {
	DropChances []byte    `json:"drop_chances"`
	Price       float64   `json:"price"`
	Name        string    `json:"name"`
	ID          uuid.UUID `json:"id"`
}

func (q *Queries) UpdateNFTPack(ctx context.Context, arg UpdateNFTPackParams) (UnityGameNftPack, error) {
	row := q.queryRow(ctx, q.updateNFTPackStmt, updateNFTPack,
		arg.DropChances,
		arg.Price,
		arg.Name,
		arg.ID,
	)
	var i UnityGameNftPack
	err := row.Scan(
		&i.ID,
		&i.DropChances,
		&i.Price,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.Name,
	)
	return i, err
}
