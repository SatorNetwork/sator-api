// Code generated by sqlc. DO NOT EDIT.

package repository

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addNFTStmt, err = db.PrepareContext(ctx, addNFT); err != nil {
		return nil, fmt.Errorf("error preparing query AddNFT: %w", err)
	}
	if q.addNFTPackStmt, err = db.PrepareContext(ctx, addNFTPack); err != nil {
		return nil, fmt.Errorf("error preparing query AddNFTPack: %w", err)
	}
	if q.addNewPlayerStmt, err = db.PrepareContext(ctx, addNewPlayer); err != nil {
		return nil, fmt.Errorf("error preparing query AddNewPlayer: %w", err)
	}
	if q.craftNFTsStmt, err = db.PrepareContext(ctx, craftNFTs); err != nil {
		return nil, fmt.Errorf("error preparing query CraftNFTs: %w", err)
	}
	if q.deleteNFTStmt, err = db.PrepareContext(ctx, deleteNFT); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteNFT: %w", err)
	}
	if q.deleteNFTPackStmt, err = db.PrepareContext(ctx, deleteNFTPack); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteNFTPack: %w", err)
	}
	if q.finishGameStmt, err = db.PrepareContext(ctx, finishGame); err != nil {
		return nil, fmt.Errorf("error preparing query FinishGame: %w", err)
	}
	if q.getCurrentGameStmt, err = db.PrepareContext(ctx, getCurrentGame); err != nil {
		return nil, fmt.Errorf("error preparing query GetCurrentGame: %w", err)
	}
	if q.getNFTStmt, err = db.PrepareContext(ctx, getNFT); err != nil {
		return nil, fmt.Errorf("error preparing query GetNFT: %w", err)
	}
	if q.getNFTPackStmt, err = db.PrepareContext(ctx, getNFTPack); err != nil {
		return nil, fmt.Errorf("error preparing query GetNFTPack: %w", err)
	}
	if q.getNFTPacksListStmt, err = db.PrepareContext(ctx, getNFTPacksList); err != nil {
		return nil, fmt.Errorf("error preparing query GetNFTPacksList: %w", err)
	}
	if q.getNFTsStmt, err = db.PrepareContext(ctx, getNFTs); err != nil {
		return nil, fmt.Errorf("error preparing query GetNFTs: %w", err)
	}
	if q.getNFTsByPlayerStmt, err = db.PrepareContext(ctx, getNFTsByPlayer); err != nil {
		return nil, fmt.Errorf("error preparing query GetNFTsByPlayer: %w", err)
	}
	if q.getNFTsByTypeAndLevelStmt, err = db.PrepareContext(ctx, getNFTsByTypeAndLevel); err != nil {
		return nil, fmt.Errorf("error preparing query GetNFTsByTypeAndLevel: %w", err)
	}
	if q.getPlayerStmt, err = db.PrepareContext(ctx, getPlayer); err != nil {
		return nil, fmt.Errorf("error preparing query GetPlayer: %w", err)
	}
	if q.linkNFTToPlayerStmt, err = db.PrepareContext(ctx, linkNFTToPlayer); err != nil {
		return nil, fmt.Errorf("error preparing query LinkNFTToPlayer: %w", err)
	}
	if q.refillEnergyOfPlayerStmt, err = db.PrepareContext(ctx, refillEnergyOfPlayer); err != nil {
		return nil, fmt.Errorf("error preparing query RefillEnergyOfPlayer: %w", err)
	}
	if q.softDeleteNFTStmt, err = db.PrepareContext(ctx, softDeleteNFT); err != nil {
		return nil, fmt.Errorf("error preparing query SoftDeleteNFT: %w", err)
	}
	if q.softDeleteNFTPackStmt, err = db.PrepareContext(ctx, softDeleteNFTPack); err != nil {
		return nil, fmt.Errorf("error preparing query SoftDeleteNFTPack: %w", err)
	}
	if q.startGameStmt, err = db.PrepareContext(ctx, startGame); err != nil {
		return nil, fmt.Errorf("error preparing query StartGame: %w", err)
	}
	if q.storeSelectedNFTStmt, err = db.PrepareContext(ctx, storeSelectedNFT); err != nil {
		return nil, fmt.Errorf("error preparing query StoreSelectedNFT: %w", err)
	}
	if q.unlinkNFTFromPlayerStmt, err = db.PrepareContext(ctx, unlinkNFTFromPlayer); err != nil {
		return nil, fmt.Errorf("error preparing query UnlinkNFTFromPlayer: %w", err)
	}
	if q.updateNFTStmt, err = db.PrepareContext(ctx, updateNFT); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateNFT: %w", err)
	}
	if q.updateNFTPackStmt, err = db.PrepareContext(ctx, updateNFTPack); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateNFTPack: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addNFTStmt != nil {
		if cerr := q.addNFTStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addNFTStmt: %w", cerr)
		}
	}
	if q.addNFTPackStmt != nil {
		if cerr := q.addNFTPackStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addNFTPackStmt: %w", cerr)
		}
	}
	if q.addNewPlayerStmt != nil {
		if cerr := q.addNewPlayerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addNewPlayerStmt: %w", cerr)
		}
	}
	if q.craftNFTsStmt != nil {
		if cerr := q.craftNFTsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing craftNFTsStmt: %w", cerr)
		}
	}
	if q.deleteNFTStmt != nil {
		if cerr := q.deleteNFTStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteNFTStmt: %w", cerr)
		}
	}
	if q.deleteNFTPackStmt != nil {
		if cerr := q.deleteNFTPackStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteNFTPackStmt: %w", cerr)
		}
	}
	if q.finishGameStmt != nil {
		if cerr := q.finishGameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing finishGameStmt: %w", cerr)
		}
	}
	if q.getCurrentGameStmt != nil {
		if cerr := q.getCurrentGameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCurrentGameStmt: %w", cerr)
		}
	}
	if q.getNFTStmt != nil {
		if cerr := q.getNFTStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNFTStmt: %w", cerr)
		}
	}
	if q.getNFTPackStmt != nil {
		if cerr := q.getNFTPackStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNFTPackStmt: %w", cerr)
		}
	}
	if q.getNFTPacksListStmt != nil {
		if cerr := q.getNFTPacksListStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNFTPacksListStmt: %w", cerr)
		}
	}
	if q.getNFTsStmt != nil {
		if cerr := q.getNFTsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNFTsStmt: %w", cerr)
		}
	}
	if q.getNFTsByPlayerStmt != nil {
		if cerr := q.getNFTsByPlayerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNFTsByPlayerStmt: %w", cerr)
		}
	}
	if q.getNFTsByTypeAndLevelStmt != nil {
		if cerr := q.getNFTsByTypeAndLevelStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNFTsByTypeAndLevelStmt: %w", cerr)
		}
	}
	if q.getPlayerStmt != nil {
		if cerr := q.getPlayerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPlayerStmt: %w", cerr)
		}
	}
	if q.linkNFTToPlayerStmt != nil {
		if cerr := q.linkNFTToPlayerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing linkNFTToPlayerStmt: %w", cerr)
		}
	}
	if q.refillEnergyOfPlayerStmt != nil {
		if cerr := q.refillEnergyOfPlayerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing refillEnergyOfPlayerStmt: %w", cerr)
		}
	}
	if q.softDeleteNFTStmt != nil {
		if cerr := q.softDeleteNFTStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing softDeleteNFTStmt: %w", cerr)
		}
	}
	if q.softDeleteNFTPackStmt != nil {
		if cerr := q.softDeleteNFTPackStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing softDeleteNFTPackStmt: %w", cerr)
		}
	}
	if q.startGameStmt != nil {
		if cerr := q.startGameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing startGameStmt: %w", cerr)
		}
	}
	if q.storeSelectedNFTStmt != nil {
		if cerr := q.storeSelectedNFTStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing storeSelectedNFTStmt: %w", cerr)
		}
	}
	if q.unlinkNFTFromPlayerStmt != nil {
		if cerr := q.unlinkNFTFromPlayerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing unlinkNFTFromPlayerStmt: %w", cerr)
		}
	}
	if q.updateNFTStmt != nil {
		if cerr := q.updateNFTStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateNFTStmt: %w", cerr)
		}
	}
	if q.updateNFTPackStmt != nil {
		if cerr := q.updateNFTPackStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateNFTPackStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                        DBTX
	tx                        *sql.Tx
	addNFTStmt                *sql.Stmt
	addNFTPackStmt            *sql.Stmt
	addNewPlayerStmt          *sql.Stmt
	craftNFTsStmt             *sql.Stmt
	deleteNFTStmt             *sql.Stmt
	deleteNFTPackStmt         *sql.Stmt
	finishGameStmt            *sql.Stmt
	getCurrentGameStmt        *sql.Stmt
	getNFTStmt                *sql.Stmt
	getNFTPackStmt            *sql.Stmt
	getNFTPacksListStmt       *sql.Stmt
	getNFTsStmt               *sql.Stmt
	getNFTsByPlayerStmt       *sql.Stmt
	getNFTsByTypeAndLevelStmt *sql.Stmt
	getPlayerStmt             *sql.Stmt
	linkNFTToPlayerStmt       *sql.Stmt
	refillEnergyOfPlayerStmt  *sql.Stmt
	softDeleteNFTStmt         *sql.Stmt
	softDeleteNFTPackStmt     *sql.Stmt
	startGameStmt             *sql.Stmt
	storeSelectedNFTStmt      *sql.Stmt
	unlinkNFTFromPlayerStmt   *sql.Stmt
	updateNFTStmt             *sql.Stmt
	updateNFTPackStmt         *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                        tx,
		tx:                        tx,
		addNFTStmt:                q.addNFTStmt,
		addNFTPackStmt:            q.addNFTPackStmt,
		addNewPlayerStmt:          q.addNewPlayerStmt,
		craftNFTsStmt:             q.craftNFTsStmt,
		deleteNFTStmt:             q.deleteNFTStmt,
		deleteNFTPackStmt:         q.deleteNFTPackStmt,
		finishGameStmt:            q.finishGameStmt,
		getCurrentGameStmt:        q.getCurrentGameStmt,
		getNFTStmt:                q.getNFTStmt,
		getNFTPackStmt:            q.getNFTPackStmt,
		getNFTPacksListStmt:       q.getNFTPacksListStmt,
		getNFTsStmt:               q.getNFTsStmt,
		getNFTsByPlayerStmt:       q.getNFTsByPlayerStmt,
		getNFTsByTypeAndLevelStmt: q.getNFTsByTypeAndLevelStmt,
		getPlayerStmt:             q.getPlayerStmt,
		linkNFTToPlayerStmt:       q.linkNFTToPlayerStmt,
		refillEnergyOfPlayerStmt:  q.refillEnergyOfPlayerStmt,
		softDeleteNFTStmt:         q.softDeleteNFTStmt,
		softDeleteNFTPackStmt:     q.softDeleteNFTPackStmt,
		startGameStmt:             q.startGameStmt,
		storeSelectedNFTStmt:      q.storeSelectedNFTStmt,
		unlinkNFTFromPlayerStmt:   q.unlinkNFTFromPlayerStmt,
		updateNFTStmt:             q.updateNFTStmt,
		updateNFTPackStmt:         q.updateNFTPackStmt,
	}
}
