// Code generated by sqlc. DO NOT EDIT.
// source: player_nfts.sql

package repository

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const craftNFTs = `-- name: CraftNFTs :exec
UPDATE unity_game_player_nfts SET crafted_nft_id = $1
WHERE user_id = $2 AND nft_id = ANY($3::VARCHAR[])
`

type CraftNFTsParams struct {
	CraftedNftID sql.NullString `json:"crafted_nft_id"`
	UserID       uuid.UUID      `json:"user_id"`
	NftIds       []string       `json:"nft_ids"`
}

func (q *Queries) CraftNFTs(ctx context.Context, arg CraftNFTsParams) error {
	_, err := q.exec(ctx, q.craftNFTsStmt, craftNFTs, arg.CraftedNftID, arg.UserID, pq.Array(arg.NftIds))
	return err
}

const getNFTsByPlayer = `-- name: GetNFTsByPlayer :many
SELECT unity_game_nfts.id, unity_game_nfts.nft_type, unity_game_nfts.allowed_levels, unity_game_nfts.deleted_at 
FROM unity_game_player_nfts 
JOIN unity_game_nfts ON unity_game_player_nfts.nft_id = unity_game_nfts.id AND unity_game_nfts.deleted_at IS NULL
WHERE user_id = $1
AND crafted_nft_id IS NULL
`

func (q *Queries) GetNFTsByPlayer(ctx context.Context, userID uuid.UUID) ([]UnityGameNft, error) {
	rows, err := q.query(ctx, q.getNFTsByPlayerStmt, getNFTsByPlayer, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UnityGameNft
	for rows.Next() {
		var i UnityGameNft
		if err := rows.Scan(
			&i.ID,
			&i.NftType,
			pq.Array(&i.AllowedLevels),
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const linkNFTToPlayer = `-- name: LinkNFTToPlayer :exec
INSERT INTO unity_game_player_nfts (user_id, nft_id) VALUES ($1, $2)
`

type LinkNFTToPlayerParams struct {
	UserID uuid.UUID `json:"user_id"`
	NftID  string    `json:"nft_id"`
}

func (q *Queries) LinkNFTToPlayer(ctx context.Context, arg LinkNFTToPlayerParams) error {
	_, err := q.exec(ctx, q.linkNFTToPlayerStmt, linkNFTToPlayer, arg.UserID, arg.NftID)
	return err
}

const unlinkNFTFromPlayer = `-- name: UnlinkNFTFromPlayer :exec
DELETE FROM unity_game_player_nfts WHERE user_id = $1 AND nft_id = $2
`

type UnlinkNFTFromPlayerParams struct {
	UserID uuid.UUID `json:"user_id"`
	NftID  string    `json:"nft_id"`
}

func (q *Queries) UnlinkNFTFromPlayer(ctx context.Context, arg UnlinkNFTFromPlayerParams) error {
	_, err := q.exec(ctx, q.unlinkNFTFromPlayerStmt, unlinkNFTFromPlayer, arg.UserID, arg.NftID)
	return err
}
