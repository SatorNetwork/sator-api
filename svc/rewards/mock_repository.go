// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SatorNetwork/sator-api/svc/rewards (interfaces: RewardsRepository)

// Package rewards is a generated GoMock package.
package rewards

import (
	context "context"
	reflect "reflect"

	repository "github.com/SatorNetwork/sator-api/svc/rewards/repository"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockRewardsRepository is a mock of RewardsRepository interface.
type MockRewardsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRewardsRepositoryMockRecorder
}

// MockRewardsRepositoryMockRecorder is the mock recorder for MockRewardsRepository.
type MockRewardsRepositoryMockRecorder struct {
	mock *MockRewardsRepository
}

// NewMockRewardsRepository creates a new mock instance.
func NewMockRewardsRepository(ctrl *gomock.Controller) *MockRewardsRepository {
	mock := &MockRewardsRepository{ctrl: ctrl}
	mock.recorder = &MockRewardsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRewardsRepository) EXPECT() *MockRewardsRepositoryMockRecorder {
	return m.recorder
}

// AddTransaction mocks base method.
func (m *MockRewardsRepository) AddTransaction(arg0 context.Context, arg1 repository.AddTransactionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTransaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTransaction indicates an expected call of AddTransaction.
func (mr *MockRewardsRepositoryMockRecorder) AddTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTransaction", reflect.TypeOf((*MockRewardsRepository)(nil).AddTransaction), arg0, arg1)
}

// GetScannedQRCodeByUserID mocks base method.
func (m *MockRewardsRepository) GetScannedQRCodeByUserID(arg0 context.Context, arg1 repository.GetScannedQRCodeByUserIDParams) (repository.Reward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScannedQRCodeByUserID", arg0, arg1)
	ret0, _ := ret[0].(repository.Reward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScannedQRCodeByUserID indicates an expected call of GetScannedQRCodeByUserID.
func (mr *MockRewardsRepositoryMockRecorder) GetScannedQRCodeByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScannedQRCodeByUserID", reflect.TypeOf((*MockRewardsRepository)(nil).GetScannedQRCodeByUserID), arg0, arg1)
}

// GetTotalAmount mocks base method.
func (m *MockRewardsRepository) GetTotalAmount(arg0 context.Context, arg1 uuid.UUID) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalAmount", arg0, arg1)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalAmount indicates an expected call of GetTotalAmount.
func (mr *MockRewardsRepositoryMockRecorder) GetTotalAmount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalAmount", reflect.TypeOf((*MockRewardsRepository)(nil).GetTotalAmount), arg0, arg1)
}

// GetTransactionsByUserIDPaginated mocks base method.
func (m *MockRewardsRepository) GetTransactionsByUserIDPaginated(arg0 context.Context, arg1 repository.GetTransactionsByUserIDPaginatedParams) ([]repository.Reward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsByUserIDPaginated", arg0, arg1)
	ret0, _ := ret[0].([]repository.Reward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsByUserIDPaginated indicates an expected call of GetTransactionsByUserIDPaginated.
func (mr *MockRewardsRepositoryMockRecorder) GetTransactionsByUserIDPaginated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByUserIDPaginated", reflect.TypeOf((*MockRewardsRepository)(nil).GetTransactionsByUserIDPaginated), arg0, arg1)
}

// Withdraw mocks base method.
func (m *MockRewardsRepository) Withdraw(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockRewardsRepositoryMockRecorder) Withdraw(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockRewardsRepository)(nil).Withdraw), arg0, arg1)
}
