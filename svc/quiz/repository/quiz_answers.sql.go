// Code generated by sqlc. DO NOT EDIT.
// source: quiz_answers.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const countCorrectAnswers = `-- name: CountCorrectAnswers :one
SELECT COUNT(answer_id) AS correct_answers,
    COUNT(pts) AS pts
FROM quiz_answers
WHERE quiz_id = $1
    AND user_id = $2
    AND is_correct = TRUE
GROUP BY quiz_id
LIMIT 1
`

type CountCorrectAnswersParams struct {
	QuizID uuid.UUID `json:"quiz_id"`
	UserID uuid.UUID `json:"user_id"`
}

type CountCorrectAnswersRow struct {
	CorrectAnswers int64 `json:"correct_answers"`
	Pts            int64 `json:"pts"`
}

func (q *Queries) CountCorrectAnswers(ctx context.Context, arg CountCorrectAnswersParams) (CountCorrectAnswersRow, error) {
	row := q.queryRow(ctx, q.countCorrectAnswersStmt, countCorrectAnswers, arg.QuizID, arg.UserID)
	var i CountCorrectAnswersRow
	err := row.Scan(&i.CorrectAnswers, &i.Pts)
	return i, err
}

const getAnswer = `-- name: GetAnswer :one
SELECT quiz_id, user_id, question_id, answer_id, is_correct, rate, pts, created_at, updated_at
FROM quiz_answers
WHERE quiz_id = $1
    AND user_id = $2
    AND question_id = $3
LIMIT 1
`

type GetAnswerParams struct {
	QuizID     uuid.UUID `json:"quiz_id"`
	UserID     uuid.UUID `json:"user_id"`
	QuestionID uuid.UUID `json:"question_id"`
}

func (q *Queries) GetAnswer(ctx context.Context, arg GetAnswerParams) (QuizAnswer, error) {
	row := q.queryRow(ctx, q.getAnswerStmt, getAnswer, arg.QuizID, arg.UserID, arg.QuestionID)
	var i QuizAnswer
	err := row.Scan(
		&i.QuizID,
		&i.UserID,
		&i.QuestionID,
		&i.AnswerID,
		&i.IsCorrect,
		&i.Rate,
		&i.Pts,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getQuizWinnners = `-- name: GetQuizWinnners :many
SELECT quiz_players.quiz_id AS quiz_id,
    quiz_players.user_id AS user_id,
    quiz_players.username AS username,
    COUNT(quiz_answers.answer_id)::INT AS correct_answers,
    SUM(quiz_answers.rate)::INT AS rate,
    SUM(quiz_answers.pts)::INT AS pts
FROM quiz_answers
    JOIN quiz_players ON quiz_players.quiz_id = quiz_answers.quiz_id
    AND quiz_players.user_id = quiz_answers.user_id
WHERE quiz_answers.quiz_id = $1
    AND quiz_answers.is_correct = TRUE
GROUP BY quiz_players.user_id,
    quiz_players.quiz_id
HAVING COUNT(quiz_answers.answer_id)::INT = $2::INT
`

type GetQuizWinnnersParams struct {
	QuizID         uuid.UUID `json:"quiz_id"`
	CorrectAnswers int32     `json:"correct_answers"`
}

type GetQuizWinnnersRow struct {
	QuizID         uuid.UUID `json:"quiz_id"`
	UserID         uuid.UUID `json:"user_id"`
	Username       string    `json:"username"`
	CorrectAnswers int32     `json:"correct_answers"`
	Rate           int32     `json:"rate"`
	Pts            int32     `json:"pts"`
}

func (q *Queries) GetQuizWinnners(ctx context.Context, arg GetQuizWinnnersParams) ([]GetQuizWinnnersRow, error) {
	rows, err := q.query(ctx, q.getQuizWinnnersStmt, getQuizWinnners, arg.QuizID, arg.CorrectAnswers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetQuizWinnnersRow
	for rows.Next() {
		var i GetQuizWinnnersRow
		if err := rows.Scan(
			&i.QuizID,
			&i.UserID,
			&i.Username,
			&i.CorrectAnswers,
			&i.Rate,
			&i.Pts,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const storeAnswer = `-- name: StoreAnswer :one
INSERT INTO quiz_answers (
        quiz_id,
        user_id,
        question_id,
        answer_id,
        is_correct,
        rate,
        pts
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        CASE
            WHEN $5 THEN COALESCE(
                (
                    SELECT CASE
                            WHEN COUNT(*) > 0 THEN 0
                        END AS pts
                    FROM quiz_answers
                    WHERE question_id = $3
                        AND quiz_id = $1
                        AND is_correct = TRUE
                    GROUP BY question_id
                ),
                2
            )
            ELSE 0
        END
    ) ON CONFLICT (quiz_id, user_id, question_id) DO 
UPDATE SET 
    answer_id = EXCLUDED.answer_id, 
    is_correct = EXCLUDED.is_correct, 
    pts = CASE
            WHEN EXCLUDED.is_correct THEN COALESCE(
                (
                    SELECT CASE
                            WHEN COUNT(*) > 0 THEN 0
                        END AS pts
                    FROM quiz_answers
                    WHERE question_id = EXCLUDED.question_id
                        AND quiz_id = EXCLUDED.quiz_id
                        AND is_correct = TRUE
                    GROUP BY question_id
                ),
                2
            )
            ELSE 0
        END
RETURNING quiz_id, user_id, question_id, answer_id, is_correct, rate, pts, created_at, updated_at
`

type StoreAnswerParams struct {
	QuizID     uuid.UUID `json:"quiz_id"`
	UserID     uuid.UUID `json:"user_id"`
	QuestionID uuid.UUID `json:"question_id"`
	AnswerID   uuid.UUID `json:"answer_id"`
	IsCorrect  bool      `json:"is_correct"`
	Rate       int32     `json:"rate"`
}

func (q *Queries) StoreAnswer(ctx context.Context, arg StoreAnswerParams) (QuizAnswer, error) {
	row := q.queryRow(ctx, q.storeAnswerStmt, storeAnswer,
		arg.QuizID,
		arg.UserID,
		arg.QuestionID,
		arg.AnswerID,
		arg.IsCorrect,
		arg.Rate,
	)
	var i QuizAnswer
	err := row.Scan(
		&i.QuizID,
		&i.UserID,
		&i.QuestionID,
		&i.AnswerID,
		&i.IsCorrect,
		&i.Rate,
		&i.Pts,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
