// Code generated by sqlc. DO NOT EDIT.
// source: quiz_players.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const addNewPlayer = `-- name: AddNewPlayer :exec
INSERT INTO quiz_players (quiz_id, user_id, username, status)
VALUES ($1, $2, $3, $4) ON CONFLICT (quiz_id, user_id) DO NOTHING
`

type AddNewPlayerParams struct {
	QuizID   uuid.UUID `json:"quiz_id"`
	UserID   uuid.UUID `json:"user_id"`
	Username string    `json:"username"`
	Status   int32     `json:"status"`
}

func (q *Queries) AddNewPlayer(ctx context.Context, arg AddNewPlayerParams) error {
	_, err := q.exec(ctx, q.addNewPlayerStmt, addNewPlayer,
		arg.QuizID,
		arg.UserID,
		arg.Username,
		arg.Status,
	)
	return err
}

const countPlayersInQuiz = `-- name: CountPlayersInQuiz :one
SELECT COUNT(user_id) AS players
FROM quiz_players
WHERE quiz_id = $1
GROUP BY quiz_id
LIMIT 1
`

func (q *Queries) CountPlayersInQuiz(ctx context.Context, quizID uuid.UUID) (int64, error) {
	row := q.queryRow(ctx, q.countPlayersInQuizStmt, countPlayersInQuiz, quizID)
	var players int64
	err := row.Scan(&players)
	return players, err
}

const updatePlayerStatus = `-- name: UpdatePlayerStatus :exec
UPDATE quiz_players
SET status = $1
WHERE quiz_id = $2
    AND user_id = $3
`

type UpdatePlayerStatusParams struct {
	Status int32     `json:"status"`
	QuizID uuid.UUID `json:"quiz_id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) UpdatePlayerStatus(ctx context.Context, arg UpdatePlayerStatusParams) error {
	_, err := q.exec(ctx, q.updatePlayerStatusStmt, updatePlayerStatus, arg.Status, arg.QuizID, arg.UserID)
	return err
}
