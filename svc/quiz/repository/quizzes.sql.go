// Code generated by sqlc. DO NOT EDIT.
// source: quizzes.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const addNewQuiz = `-- name: AddNewQuiz :one
INSERT INTO quizzes (
        challenge_id,
        prize_pool,
        players_to_start,
        time_per_question
    )
VALUES (
        $1,
        $2,
        $3,
        $4
    ) RETURNING id, challenge_id, prize_pool, players_to_start, time_per_question, status, updated_at, created_at
`

type AddNewQuizParams struct {
	ChallengeID     uuid.UUID `json:"challenge_id"`
	PrizePool       float64   `json:"prize_pool"`
	PlayersToStart  int32     `json:"players_to_start"`
	TimePerQuestion int64     `json:"time_per_question"`
}

func (q *Queries) AddNewQuiz(ctx context.Context, arg AddNewQuizParams) (Quiz, error) {
	row := q.queryRow(ctx, q.addNewQuizStmt, addNewQuiz,
		arg.ChallengeID,
		arg.PrizePool,
		arg.PlayersToStart,
		arg.TimePerQuestion,
	)
	var i Quiz
	err := row.Scan(
		&i.ID,
		&i.ChallengeID,
		&i.PrizePool,
		&i.PlayersToStart,
		&i.TimePerQuestion,
		&i.Status,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getQuizByChallengeID = `-- name: GetQuizByChallengeID :one
SELECT id, challenge_id, prize_pool, players_to_start, time_per_question, status, updated_at, created_at
FROM quizzes
WHERE challenge_id = $1
    AND status = 0
ORDER BY created_at DESC
`

func (q *Queries) GetQuizByChallengeID(ctx context.Context, challengeID uuid.UUID) (Quiz, error) {
	row := q.queryRow(ctx, q.getQuizByChallengeIDStmt, getQuizByChallengeID, challengeID)
	var i Quiz
	err := row.Scan(
		&i.ID,
		&i.ChallengeID,
		&i.PrizePool,
		&i.PlayersToStart,
		&i.TimePerQuestion,
		&i.Status,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getQuizByID = `-- name: GetQuizByID :one
SELECT id, challenge_id, prize_pool, players_to_start, time_per_question, status, updated_at, created_at
FROM quizzes
WHERE id = $1
`

func (q *Queries) GetQuizByID(ctx context.Context, id uuid.UUID) (Quiz, error) {
	row := q.queryRow(ctx, q.getQuizByIDStmt, getQuizByID, id)
	var i Quiz
	err := row.Scan(
		&i.ID,
		&i.ChallengeID,
		&i.PrizePool,
		&i.PlayersToStart,
		&i.TimePerQuestion,
		&i.Status,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateQuizStatus = `-- name: UpdateQuizStatus :exec
UPDATE quizzes
SET status = $1
WHERE id = $2
`

type UpdateQuizStatusParams struct {
	Status int32     `json:"status"`
	ID     uuid.UUID `json:"id"`
}

func (q *Queries) UpdateQuizStatus(ctx context.Context, arg UpdateQuizStatusParams) error {
	_, err := q.exec(ctx, q.updateQuizStatusStmt, updateQuizStatus, arg.Status, arg.ID)
	return err
}
