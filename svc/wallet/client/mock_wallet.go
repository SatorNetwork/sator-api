// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SatorNetwork/sator-api/svc/wallet/client (interfaces: Service)

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	wallet "github.com/SatorNetwork/sator-api/svc/wallet"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateWallet mocks base method.
func (m *MockService) CreateWallet(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockServiceMockRecorder) CreateWallet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockService)(nil).CreateWallet), arg0, arg1)
}

// GetListTransactionsByWalletID mocks base method.
func (m *MockService) GetListTransactionsByWalletID(arg0 context.Context, arg1, arg2 uuid.UUID, arg3, arg4 int32) (wallet.Transactions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListTransactionsByWalletID", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(wallet.Transactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListTransactionsByWalletID indicates an expected call of GetListTransactionsByWalletID.
func (mr *MockServiceMockRecorder) GetListTransactionsByWalletID(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListTransactionsByWalletID", reflect.TypeOf((*MockService)(nil).GetListTransactionsByWalletID), arg0, arg1, arg2, arg3, arg4)
}

// GetMultiplier mocks base method.
func (m *MockService) GetMultiplier(arg0 context.Context, arg1 uuid.UUID) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMultiplier", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMultiplier indicates an expected call of GetMultiplier.
func (mr *MockServiceMockRecorder) GetMultiplier(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultiplier", reflect.TypeOf((*MockService)(nil).GetMultiplier), arg0, arg1)
}

// GetWalletByID mocks base method.
func (m *MockService) GetWalletByID(arg0 context.Context, arg1, arg2 uuid.UUID) (wallet.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(wallet.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByID indicates an expected call of GetWalletByID.
func (mr *MockServiceMockRecorder) GetWalletByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByID", reflect.TypeOf((*MockService)(nil).GetWalletByID), arg0, arg1, arg2)
}

// GetWallets mocks base method.
func (m *MockService) GetWallets(arg0 context.Context, arg1 uuid.UUID) (wallet.Wallets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallets", arg0, arg1)
	ret0, _ := ret[0].(wallet.Wallets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallets indicates an expected call of GetWallets.
func (mr *MockServiceMockRecorder) GetWallets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallets", reflect.TypeOf((*MockService)(nil).GetWallets), arg0, arg1)
}

// P2PTransfer mocks base method.
func (m *MockService) P2PTransfer(arg0 context.Context, arg1, arg2 uuid.UUID, arg3 float64, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "P2PTransfer", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// P2PTransfer indicates an expected call of P2PTransfer.
func (mr *MockServiceMockRecorder) P2PTransfer(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "P2PTransfer", reflect.TypeOf((*MockService)(nil).P2PTransfer), arg0, arg1, arg2, arg3, arg4)
}

// PayForNFT mocks base method.
func (m *MockService) PayForNFT(arg0 context.Context, arg1 uuid.UUID, arg2 float64, arg3, arg4 string, arg5 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PayForNFT", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// PayForNFT indicates an expected call of PayForNFT.
func (mr *MockServiceMockRecorder) PayForNFT(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PayForNFT", reflect.TypeOf((*MockService)(nil).PayForNFT), arg0, arg1, arg2, arg3, arg4, arg5)
}

// PayForService mocks base method.
func (m *MockService) PayForService(arg0 context.Context, arg1 uuid.UUID, arg2 float64, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PayForService", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PayForService indicates an expected call of PayForService.
func (mr *MockServiceMockRecorder) PayForService(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PayForService", reflect.TypeOf((*MockService)(nil).PayForService), arg0, arg1, arg2, arg3)
}

// WithdrawRewards mocks base method.
func (m *MockService) WithdrawRewards(arg0 context.Context, arg1 uuid.UUID, arg2 float64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawRewards", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithdrawRewards indicates an expected call of WithdrawRewards.
func (mr *MockServiceMockRecorder) WithdrawRewards(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawRewards", reflect.TypeOf((*MockService)(nil).WithdrawRewards), arg0, arg1, arg2)
}
