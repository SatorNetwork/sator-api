// Code generated by sqlc. DO NOT EDIT.
// source: stake.sql

package repository

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const addStake = `-- name: AddStake :one
INSERT INTO stake (
    user_id,
    wallet_id,
    stake_amount,
    stake_duration,
    unstake_date
)
VALUES (
           $1,
           $2,
           $3,
           $4,
           $5
       ) RETURNING id, user_id, wallet_id, stake_amount, stake_duration, unstake_date, updated_at, created_at
`

type AddStakeParams struct {
	UserID        uuid.UUID     `json:"user_id"`
	WalletID      uuid.UUID     `json:"wallet_id"`
	StakeAmount   float64       `json:"stake_amount"`
	StakeDuration sql.NullInt32 `json:"stake_duration"`
	UnstakeDate   time.Time     `json:"unstake_date"`
}

func (q *Queries) AddStake(ctx context.Context, arg AddStakeParams) (Stake, error) {
	row := q.queryRow(ctx, q.addStakeStmt, addStake,
		arg.UserID,
		arg.WalletID,
		arg.StakeAmount,
		arg.StakeDuration,
		arg.UnstakeDate,
	)
	var i Stake
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WalletID,
		&i.StakeAmount,
		&i.StakeDuration,
		&i.UnstakeDate,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteStakeByUserID = `-- name: DeleteStakeByUserID :exec
DELETE FROM stake
WHERE user_id = $1
`

func (q *Queries) DeleteStakeByUserID(ctx context.Context, userID uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteStakeByUserIDStmt, deleteStakeByUserID, userID)
	return err
}

const getStakeByUserID = `-- name: GetStakeByUserID :one
SELECT id, user_id, wallet_id, stake_amount, stake_duration, unstake_date, updated_at, created_at
FROM stake
WHERE user_id = $1
    LIMIT 1
`

func (q *Queries) GetStakeByUserID(ctx context.Context, userID uuid.UUID) (Stake, error) {
	row := q.queryRow(ctx, q.getStakeByUserIDStmt, getStakeByUserID, userID)
	var i Stake
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WalletID,
		&i.StakeAmount,
		&i.StakeDuration,
		&i.UnstakeDate,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getTotalStake = `-- name: GetTotalStake :one
SELECT coalesce(SUM(coalesce(stake_amount, 0)), 0)::DOUBLE PRECISION
FROM stake
`

func (q *Queries) GetTotalStake(ctx context.Context) (float64, error) {
	row := q.queryRow(ctx, q.getTotalStakeStmt, getTotalStake)
	var column_1 float64
	err := row.Scan(&column_1)
	return column_1, err
}

const updateStake = `-- name: UpdateStake :exec
UPDATE stake
SET stake_amount = $1,
    stake_duration = $2,
    unstake_date = $3
WHERE user_id = $4
`

type UpdateStakeParams struct {
	StakeAmount   float64       `json:"stake_amount"`
	StakeDuration sql.NullInt32 `json:"stake_duration"`
	UnstakeDate   time.Time     `json:"unstake_date"`
	UserID        uuid.UUID     `json:"user_id"`
}

func (q *Queries) UpdateStake(ctx context.Context, arg UpdateStakeParams) error {
	_, err := q.exec(ctx, q.updateStakeStmt, updateStake,
		arg.StakeAmount,
		arg.StakeDuration,
		arg.UnstakeDate,
		arg.UserID,
	)
	return err
}
