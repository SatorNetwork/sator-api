// Code generated by sqlc. DO NOT EDIT.

package repository

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addSolanaAccountStmt, err = db.PrepareContext(ctx, addSolanaAccount); err != nil {
		return nil, fmt.Errorf("error preparing query AddSolanaAccount: %w", err)
	}
	if q.createWalletStmt, err = db.PrepareContext(ctx, createWallet); err != nil {
		return nil, fmt.Errorf("error preparing query CreateWallet: %w", err)
	}
	if q.getSolanaAccountByIDStmt, err = db.PrepareContext(ctx, getSolanaAccountByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetSolanaAccountByID: %w", err)
	}
	if q.getSolanaAccountByTypeStmt, err = db.PrepareContext(ctx, getSolanaAccountByType); err != nil {
		return nil, fmt.Errorf("error preparing query GetSolanaAccountByType: %w", err)
	}
	if q.getSolanaAccountByUserIDAndTypeStmt, err = db.PrepareContext(ctx, getSolanaAccountByUserIDAndType); err != nil {
		return nil, fmt.Errorf("error preparing query GetSolanaAccountByUserIDAndType: %w", err)
	}
	if q.getSolanaAccountTypeByPublicKeyStmt, err = db.PrepareContext(ctx, getSolanaAccountTypeByPublicKey); err != nil {
		return nil, fmt.Errorf("error preparing query GetSolanaAccountTypeByPublicKey: %w", err)
	}
	if q.getWalletByIDStmt, err = db.PrepareContext(ctx, getWalletByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetWalletByID: %w", err)
	}
	if q.getWalletBySolanaAccountIDStmt, err = db.PrepareContext(ctx, getWalletBySolanaAccountID); err != nil {
		return nil, fmt.Errorf("error preparing query GetWalletBySolanaAccountID: %w", err)
	}
	if q.getWalletsByUserIDStmt, err = db.PrepareContext(ctx, getWalletsByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetWalletsByUserID: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addSolanaAccountStmt != nil {
		if cerr := q.addSolanaAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addSolanaAccountStmt: %w", cerr)
		}
	}
	if q.createWalletStmt != nil {
		if cerr := q.createWalletStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createWalletStmt: %w", cerr)
		}
	}
	if q.getSolanaAccountByIDStmt != nil {
		if cerr := q.getSolanaAccountByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSolanaAccountByIDStmt: %w", cerr)
		}
	}
	if q.getSolanaAccountByTypeStmt != nil {
		if cerr := q.getSolanaAccountByTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSolanaAccountByTypeStmt: %w", cerr)
		}
	}
	if q.getSolanaAccountByUserIDAndTypeStmt != nil {
		if cerr := q.getSolanaAccountByUserIDAndTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSolanaAccountByUserIDAndTypeStmt: %w", cerr)
		}
	}
	if q.getSolanaAccountTypeByPublicKeyStmt != nil {
		if cerr := q.getSolanaAccountTypeByPublicKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSolanaAccountTypeByPublicKeyStmt: %w", cerr)
		}
	}
	if q.getWalletByIDStmt != nil {
		if cerr := q.getWalletByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWalletByIDStmt: %w", cerr)
		}
	}
	if q.getWalletBySolanaAccountIDStmt != nil {
		if cerr := q.getWalletBySolanaAccountIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWalletBySolanaAccountIDStmt: %w", cerr)
		}
	}
	if q.getWalletsByUserIDStmt != nil {
		if cerr := q.getWalletsByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWalletsByUserIDStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                  DBTX
	tx                                  *sql.Tx
	addSolanaAccountStmt                *sql.Stmt
	createWalletStmt                    *sql.Stmt
	getSolanaAccountByIDStmt            *sql.Stmt
	getSolanaAccountByTypeStmt          *sql.Stmt
	getSolanaAccountByUserIDAndTypeStmt *sql.Stmt
	getSolanaAccountTypeByPublicKeyStmt *sql.Stmt
	getWalletByIDStmt                   *sql.Stmt
	getWalletBySolanaAccountIDStmt      *sql.Stmt
	getWalletsByUserIDStmt              *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                  tx,
		tx:                                  tx,
		addSolanaAccountStmt:                q.addSolanaAccountStmt,
		createWalletStmt:                    q.createWalletStmt,
		getSolanaAccountByIDStmt:            q.getSolanaAccountByIDStmt,
		getSolanaAccountByTypeStmt:          q.getSolanaAccountByTypeStmt,
		getSolanaAccountByUserIDAndTypeStmt: q.getSolanaAccountByUserIDAndTypeStmt,
		getSolanaAccountTypeByPublicKeyStmt: q.getSolanaAccountTypeByPublicKeyStmt,
		getWalletByIDStmt:                   q.getWalletByIDStmt,
		getWalletBySolanaAccountIDStmt:      q.getWalletBySolanaAccountIDStmt,
		getWalletsByUserIDStmt:              q.getWalletsByUserIDStmt,
	}
}
