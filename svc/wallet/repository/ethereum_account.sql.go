// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: ethereum_account.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const addEthereumAccount = `-- name: AddEthereumAccount :one
INSERT INTO ethereum_accounts (
        public_key,
        private_key,
        address
    )
VALUES (
        $1,
        $2,
        $3
    ) ON CONFLICT (public_key) DO NOTHING RETURNING id, public_key, private_key, address, updated_at, created_at
`

type AddEthereumAccountParams struct {
	PublicKey  []byte `json:"public_key"`
	PrivateKey []byte `json:"private_key"`
	Address    string `json:"address"`
}

func (q *Queries) AddEthereumAccount(ctx context.Context, arg AddEthereumAccountParams) (EthereumAccount, error) {
	row := q.queryRow(ctx, q.addEthereumAccountStmt, addEthereumAccount, arg.PublicKey, arg.PrivateKey, arg.Address)
	var i EthereumAccount
	err := row.Scan(
		&i.ID,
		&i.PublicKey,
		&i.PrivateKey,
		&i.Address,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getEthereumAccountByID = `-- name: GetEthereumAccountByID :one
SELECT id, public_key, private_key, address, updated_at, created_at
FROM ethereum_accounts
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetEthereumAccountByID(ctx context.Context, id uuid.UUID) (EthereumAccount, error) {
	row := q.queryRow(ctx, q.getEthereumAccountByIDStmt, getEthereumAccountByID, id)
	var i EthereumAccount
	err := row.Scan(
		&i.ID,
		&i.PublicKey,
		&i.PrivateKey,
		&i.Address,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getEthereumAccountByUserIDAndType = `-- name: GetEthereumAccountByUserIDAndType :one
SELECT id, public_key, private_key, address, updated_at, created_at
FROM ethereum_accounts
WHERE id = (
        SELECT ethereum_account_id
        FROM wallets
        WHERE user_id = $1
            AND wallet_type = $2
        LIMIT 1
    )
LIMIT 1
`

type GetEthereumAccountByUserIDAndTypeParams struct {
	UserID     uuid.UUID `json:"user_id"`
	WalletType string    `json:"wallet_type"`
}

func (q *Queries) GetEthereumAccountByUserIDAndType(ctx context.Context, arg GetEthereumAccountByUserIDAndTypeParams) (EthereumAccount, error) {
	row := q.queryRow(ctx, q.getEthereumAccountByUserIDAndTypeStmt, getEthereumAccountByUserIDAndType, arg.UserID, arg.WalletType)
	var i EthereumAccount
	err := row.Scan(
		&i.ID,
		&i.PublicKey,
		&i.PrivateKey,
		&i.Address,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
