// Code generated by sqlc. DO NOT EDIT.
// source: wallet.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createWallet = `-- name: CreateWallet :one
INSERT INTO wallets (user_id, solana_account_id, wallet_name)
VALUES ($1, $2, $3) RETURNING id, user_id, solana_account_id, wallet_name, status, updated_at, created_at
`

type CreateWalletParams struct {
	UserID          uuid.UUID `json:"user_id"`
	SolanaAccountID uuid.UUID `json:"solana_account_id"`
	WalletName      string    `json:"wallet_name"`
}

func (q *Queries) CreateWallet(ctx context.Context, arg CreateWalletParams) (Wallet, error) {
	row := q.queryRow(ctx, q.createWalletStmt, createWallet, arg.UserID, arg.SolanaAccountID, arg.WalletName)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SolanaAccountID,
		&i.WalletName,
		&i.Status,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getWalletByID = `-- name: GetWalletByID :one
SELECT id, user_id, solana_account_id, wallet_name, status, updated_at, created_at
FROM wallets
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetWalletByID(ctx context.Context, id uuid.UUID) (Wallet, error) {
	row := q.queryRow(ctx, q.getWalletByIDStmt, getWalletByID, id)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SolanaAccountID,
		&i.WalletName,
		&i.Status,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getWalletBySolanaAccountID = `-- name: GetWalletBySolanaAccountID :one
SELECT id, user_id, solana_account_id, wallet_name, status, updated_at, created_at
FROM wallets
WHERE solana_account_id = $1
LIMIT 1
`

func (q *Queries) GetWalletBySolanaAccountID(ctx context.Context, solanaAccountID uuid.UUID) (Wallet, error) {
	row := q.queryRow(ctx, q.getWalletBySolanaAccountIDStmt, getWalletBySolanaAccountID, solanaAccountID)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SolanaAccountID,
		&i.WalletName,
		&i.Status,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getWalletsByUserID = `-- name: GetWalletsByUserID :many
SELECT id, user_id, solana_account_id, wallet_name, status, updated_at, created_at
FROM wallets
WHERE user_id = $1
`

func (q *Queries) GetWalletsByUserID(ctx context.Context, userID uuid.UUID) ([]Wallet, error) {
	rows, err := q.query(ctx, q.getWalletsByUserIDStmt, getWalletsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wallet
	for rows.Next() {
		var i Wallet
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.SolanaAccountID,
			&i.WalletName,
			&i.Status,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
