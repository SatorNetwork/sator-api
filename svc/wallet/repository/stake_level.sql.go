// Code generated by sqlc. DO NOT EDIT.
// source: stake_level.sql

package repository

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addStakeLevel = `-- name: AddStakeLevel :one
INSERT INTO stake_levels (
        min_stake_amount,
        min_days_amount,
        title,
        subtitle,
        multiplier,
        disabled
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6
    ) ON CONFLICT (title) DO NOTHING RETURNING id, min_stake_amount, min_days_amount, title, subtitle, multiplier, disabled
`

type AddStakeLevelParams struct {
	MinStakeAmount sql.NullFloat64 `json:"min_stake_amount"`
	MinDaysAmount  sql.NullInt32   `json:"min_days_amount"`
	Title          string          `json:"title"`
	Subtitle       string          `json:"subtitle"`
	Multiplier     sql.NullInt32   `json:"multiplier"`
	Disabled       sql.NullBool    `json:"disabled"`
}

func (q *Queries) AddStakeLevel(ctx context.Context, arg AddStakeLevelParams) (StakeLevel, error) {
	row := q.queryRow(ctx, q.addStakeLevelStmt, addStakeLevel,
		arg.MinStakeAmount,
		arg.MinDaysAmount,
		arg.Title,
		arg.Subtitle,
		arg.Multiplier,
		arg.Disabled,
	)
	var i StakeLevel
	err := row.Scan(
		&i.ID,
		&i.MinStakeAmount,
		&i.MinDaysAmount,
		&i.Title,
		&i.Subtitle,
		&i.Multiplier,
		&i.Disabled,
	)
	return i, err
}

const getAllStakeLevels = `-- name: GetAllStakeLevels :many
SELECT id, min_stake_amount, min_days_amount, title, subtitle, multiplier, disabled
FROM stake_levels
ORDER BY min_stake_amount DESC
`

func (q *Queries) GetAllStakeLevels(ctx context.Context) ([]StakeLevel, error) {
	rows, err := q.query(ctx, q.getAllStakeLevelsStmt, getAllStakeLevels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StakeLevel
	for rows.Next() {
		var i StakeLevel
		if err := rows.Scan(
			&i.ID,
			&i.MinStakeAmount,
			&i.MinDaysAmount,
			&i.Title,
			&i.Subtitle,
			&i.Multiplier,
			&i.Disabled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMinimalStakeLevel = `-- name: GetMinimalStakeLevel :many
SELECT id, min_stake_amount, min_days_amount, title, subtitle, multiplier, disabled
FROM stake_levels
ORDER BY min_stake_amount ASC
`

func (q *Queries) GetMinimalStakeLevel(ctx context.Context) ([]StakeLevel, error) {
	rows, err := q.query(ctx, q.getMinimalStakeLevelStmt, getMinimalStakeLevel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StakeLevel
	for rows.Next() {
		var i StakeLevel
		if err := rows.Scan(
			&i.ID,
			&i.MinStakeAmount,
			&i.MinDaysAmount,
			&i.Title,
			&i.Subtitle,
			&i.Multiplier,
			&i.Disabled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStakeLevelByAmount = `-- name: GetStakeLevelByAmount :one
WITH lvls AS (
	SELECT
		id,
		(lag(min_stake_amount,
				1) OVER (ORDER BY min_stake_amount DESC)) AS max_stake_amount
	FROM
		stake_levels
	WHERE
		disabled = FALSE ORDER BY
			min_stake_amount ASC
)
SELECT
	stake_levels.id, min_stake_amount, min_days_amount, title, subtitle, multiplier, disabled, lvls.id, max_stake_amount
FROM
	stake_levels
	JOIN lvls ON stake_levels.id = lvls.id
WHERE
	$1::DOUBLE PRECISION >= min_stake_amount
	AND($1::DOUBLE PRECISION <= max_stake_amount
	OR max_stake_amount IS NULL)
`

type GetStakeLevelByAmountRow struct {
	ID             uuid.UUID       `json:"id"`
	MinStakeAmount sql.NullFloat64 `json:"min_stake_amount"`
	MinDaysAmount  sql.NullInt32   `json:"min_days_amount"`
	Title          string          `json:"title"`
	Subtitle       string          `json:"subtitle"`
	Multiplier     sql.NullInt32   `json:"multiplier"`
	Disabled       sql.NullBool    `json:"disabled"`
	ID_2           uuid.UUID       `json:"id_2"`
	MaxStakeAmount interface{}     `json:"max_stake_amount"`
}

func (q *Queries) GetStakeLevelByAmount(ctx context.Context, amount float64) (GetStakeLevelByAmountRow, error) {
	row := q.queryRow(ctx, q.getStakeLevelByAmountStmt, getStakeLevelByAmount, amount)
	var i GetStakeLevelByAmountRow
	err := row.Scan(
		&i.ID,
		&i.MinStakeAmount,
		&i.MinDaysAmount,
		&i.Title,
		&i.Subtitle,
		&i.Multiplier,
		&i.Disabled,
		&i.ID_2,
		&i.MaxStakeAmount,
	)
	return i, err
}

const getStakeLevelByID = `-- name: GetStakeLevelByID :one
SELECT id, min_stake_amount, min_days_amount, title, subtitle, multiplier, disabled
FROM stake_levels
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetStakeLevelByID(ctx context.Context, id uuid.UUID) (StakeLevel, error) {
	row := q.queryRow(ctx, q.getStakeLevelByIDStmt, getStakeLevelByID, id)
	var i StakeLevel
	err := row.Scan(
		&i.ID,
		&i.MinStakeAmount,
		&i.MinDaysAmount,
		&i.Title,
		&i.Subtitle,
		&i.Multiplier,
		&i.Disabled,
	)
	return i, err
}

const updateStakeLevel = `-- name: UpdateStakeLevel :exec
UPDATE stake_levels
SET min_stake_amount = $2, min_days_amount= $3, title = $4, subtitle = $5, multiplier = $6, disabled = $7
WHERE id = $1
`

type UpdateStakeLevelParams struct {
	ID             uuid.UUID       `json:"id"`
	MinStakeAmount sql.NullFloat64 `json:"min_stake_amount"`
	MinDaysAmount  sql.NullInt32   `json:"min_days_amount"`
	Title          string          `json:"title"`
	Subtitle       string          `json:"subtitle"`
	Multiplier     sql.NullInt32   `json:"multiplier"`
	Disabled       sql.NullBool    `json:"disabled"`
}

func (q *Queries) UpdateStakeLevel(ctx context.Context, arg UpdateStakeLevelParams) error {
	_, err := q.exec(ctx, q.updateStakeLevelStmt, updateStakeLevel,
		arg.ID,
		arg.MinStakeAmount,
		arg.MinDaysAmount,
		arg.Title,
		arg.Subtitle,
		arg.Multiplier,
		arg.Disabled,
	)
	return err
}
