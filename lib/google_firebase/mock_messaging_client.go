// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SatorNetwork/sator-api/lib/google_firebase (interfaces: MessagingClientInterface)

// Package google_firebase is a generated GoMock package.
package google_firebase

import (
	context "context"
	reflect "reflect"

	messaging "firebase.google.com/go/messaging"
	gomock "github.com/golang/mock/gomock"
)

// MockMessagingClientInterface is a mock of MessagingClientInterface interface.
type MockMessagingClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMessagingClientInterfaceMockRecorder
}

// MockMessagingClientInterfaceMockRecorder is the mock recorder for MockMessagingClientInterface.
type MockMessagingClientInterfaceMockRecorder struct {
	mock *MockMessagingClientInterface
}

// NewMockMessagingClientInterface creates a new mock instance.
func NewMockMessagingClientInterface(ctrl *gomock.Controller) *MockMessagingClientInterface {
	mock := &MockMessagingClientInterface{ctrl: ctrl}
	mock.recorder = &MockMessagingClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessagingClientInterface) EXPECT() *MockMessagingClientInterfaceMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockMessagingClientInterface) Send(arg0 context.Context, arg1 *messaging.Message) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockMessagingClientInterfaceMockRecorder) Send(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMessagingClientInterface)(nil).Send), arg0, arg1)
}

// SubscribeToTopic mocks base method.
func (m *MockMessagingClientInterface) SubscribeToTopic(arg0 context.Context, arg1 []string, arg2 string) (*messaging.TopicManagementResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToTopic", arg0, arg1, arg2)
	ret0, _ := ret[0].(*messaging.TopicManagementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeToTopic indicates an expected call of SubscribeToTopic.
func (mr *MockMessagingClientInterfaceMockRecorder) SubscribeToTopic(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToTopic", reflect.TypeOf((*MockMessagingClientInterface)(nil).SubscribeToTopic), arg0, arg1, arg2)
}

// UnsubscribeFromTopic mocks base method.
func (m *MockMessagingClientInterface) UnsubscribeFromTopic(arg0 context.Context, arg1 []string, arg2 string) (*messaging.TopicManagementResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsubscribeFromTopic", arg0, arg1, arg2)
	ret0, _ := ret[0].(*messaging.TopicManagementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnsubscribeFromTopic indicates an expected call of UnsubscribeFromTopic.
func (mr *MockMessagingClientInterfaceMockRecorder) UnsubscribeFromTopic(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsubscribeFromTopic", reflect.TypeOf((*MockMessagingClientInterface)(nil).UnsubscribeFromTopic), arg0, arg1, arg2)
}
