// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SatorNetwork/sator-api/lib/google_firebase (interfaces: AppInterface)

// Package google_firebase is a generated GoMock package.
package google_firebase

import (
	context "context"
	reflect "reflect"

	messaging "firebase.google.com/go/messaging"
	gomock "github.com/golang/mock/gomock"
)

// MockAppInterface is a mock of AppInterface interface.
type MockAppInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAppInterfaceMockRecorder
}

// MockAppInterfaceMockRecorder is the mock recorder for MockAppInterface.
type MockAppInterfaceMockRecorder struct {
	mock *MockAppInterface
}

// NewMockAppInterface creates a new mock instance.
func NewMockAppInterface(ctrl *gomock.Controller) *MockAppInterface {
	mock := &MockAppInterface{ctrl: ctrl}
	mock.recorder = &MockAppInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppInterface) EXPECT() *MockAppInterfaceMockRecorder {
	return m.recorder
}

// Messaging mocks base method.
func (m *MockAppInterface) Messaging(arg0 context.Context) (*messaging.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Messaging", arg0)
	ret0, _ := ret[0].(*messaging.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Messaging indicates an expected call of Messaging.
func (mr *MockAppInterfaceMockRecorder) Messaging(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Messaging", reflect.TypeOf((*MockAppInterface)(nil).Messaging), arg0)
}
